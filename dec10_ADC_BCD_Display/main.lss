
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006f  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002d3  00000000  00000000  00000373  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ea  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000287  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000105  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a6  00000000  00000000  00000c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  7a:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Initialization>:
#include<bcd_lib.h>

void ADC_Initialization()
{

ADMUX =(1<<REFS0);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADPS1) | (1<<ADEN);
  86:	82 e8       	ldi	r24, 0x82	; 130
  88:	86 b9       	out	0x06, r24	; 6
 
}
  8a:	08 95       	ret

0000008c <Read_ADC>:

int Read_ADC()
{

ADMUX |=(1<<MUX1);
  8c:	39 9a       	sbi	0x07, 1	; 7
ADCSRA |= (1<<ADSC);
  8e:	36 9a       	sbi	0x06, 6	; 6

while (ADCSRA & 0b01000000)
  90:	36 99       	sbic	0x06, 6	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <Read_ADC+0x4>
{
}

int value = 0;
value = ADCL; 
  94:	24 b1       	in	r18, 0x04	; 4
  96:	30 e0       	ldi	r19, 0x00	; 0
value |=(ADCH << 8);
  98:	45 b1       	in	r20, 0x05	; 5
  9a:	94 2f       	mov	r25, r20
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	28 2b       	or	r18, r24
  a0:	39 2b       	or	r19, r25
return value;

}
  a2:	c9 01       	movw	r24, r18
  a4:	08 95       	ret

000000a6 <main>:
#include<bcd_lib.h>

void ADC_Initialization()
{

ADMUX =(1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADPS1) | (1<<ADEN);
  aa:	82 e8       	ldi	r24, 0x82	; 130
  ac:	86 b9       	out	0x06, r24	; 6


int main(){
ADC_Initialization();

DDRC = DDRC | 0b11111111;
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 bb       	out	0x14, r24	; 20
DDRD = DDRD | 0b00001111;
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	81 bb       	out	0x11, r24	; 17

while(1){

int sensed_value = Read_ADC();
  ba:	0e 94 46 00 	call	0x8c	; 0x8c <Read_ADC>
BCD_Converter(sensed_value);
  be:	0e 94 8e 00 	call	0x11c	; 0x11c <BCD_Converter>
  c2:	fb cf       	rjmp	.-10     	; 0xba <main+0x14>

000000c4 <display>:
#include<avr/io.h>
#include<util/delay.h>

void display(unsigned char seg,unsigned char data){
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	28 97       	sbiw	r28, 0x08	; 8
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	98 2f       	mov	r25, r24
int s[4]={0xfe,0xfd,0xfb,0x07};
  da:	fe 01       	movw	r30, r28
  dc:	31 96       	adiw	r30, 0x01	; 1
  de:	a0 e6       	ldi	r26, 0x60	; 96
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	0d 90       	ld	r0, X+
  e6:	01 92       	st	Z+, r0
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	e1 f7       	brne	.-8      	; 0xe4 <display+0x20>
PORTD=0xff;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	82 bb       	out	0x12, r24	; 18
PORTC=data;
  f0:	65 bb       	out	0x15, r22	; 21
PORTD=s[seg];  
  f2:	e9 2f       	mov	r30, r25
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ec 0f       	add	r30, r28
  fc:	fd 1f       	adc	r31, r29
  fe:	81 81       	ldd	r24, Z+1	; 0x01
 100:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 102:	80 e2       	ldi	r24, 0x20	; 32
 104:	9e e4       	ldi	r25, 0x4E	; 78
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <display+0x42>
_delay_ms(10);
}
 10a:	28 96       	adiw	r28, 0x08	; 8
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	08 95       	ret

0000011c <BCD_Converter>:

void BCD_Converter(int given){
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	28 97       	sbiw	r28, 0x08	; 8
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	7c 01       	movw	r14, r24
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
		 a = (given/1000);
 144:	68 ee       	ldi	r22, 0xE8	; 232
 146:	73 e0       	ldi	r23, 0x03	; 3
 148:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__divmodhi4>
 14c:	46 2f       	mov	r20, r22
 14e:	03 e0       	ldi	r16, 0x03	; 3
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
#include<avr/io.h>
#include<util/delay.h>

void display(unsigned char seg,unsigned char data){
int s[4]={0xfe,0xfd,0xfb,0x07};
 156:	6e 01       	movw	r12, r28
 158:	08 94       	sec
 15a:	c1 1c       	adc	r12, r1
 15c:	d1 1c       	adc	r13, r1
PORTD=0xff;
 15e:	99 24       	eor	r9, r9
 160:	9a 94       	dec	r9
 162:	e0 e2       	ldi	r30, 0x20	; 32
 164:	ae 2e       	mov	r10, r30
 166:	ee e4       	ldi	r30, 0x4E	; 78
 168:	be 2e       	mov	r11, r30
void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
 16a:	01 15       	cp	r16, r1
 16c:	11 05       	cpc	r17, r1
 16e:	11 f4       	brne	.+4      	; 0x174 <BCD_Converter+0x58>
 170:	84 2f       	mov	r24, r20
 172:	09 c0       	rjmp	.+18     	; 0x186 <BCD_Converter+0x6a>
		 a = (given/1000);
		}
	else{
		 a = (given/j)%10;
 174:	c7 01       	movw	r24, r14
 176:	b9 01       	movw	r22, r18
 178:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__divmodhi4>
 17c:	cb 01       	movw	r24, r22
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__divmodhi4>
#include<avr/io.h>
#include<util/delay.h>

void display(unsigned char seg,unsigned char data){
int s[4]={0xfe,0xfd,0xfb,0x07};
 186:	d6 01       	movw	r26, r12
 188:	e0 e6       	ldi	r30, 0x60	; 96
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	98 e0       	ldi	r25, 0x08	; 8
 18e:	01 90       	ld	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	91 50       	subi	r25, 0x01	; 1
 194:	e1 f7       	brne	.-8      	; 0x18e <BCD_Converter+0x72>
PORTD=0xff;
 196:	92 ba       	out	0x12, r9	; 18
PORTC=data;
 198:	85 bb       	out	0x15, r24	; 21
PORTD=s[seg];  
 19a:	e0 2f       	mov	r30, r16
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ec 0d       	add	r30, r12
 1a4:	fd 1d       	adc	r31, r13
 1a6:	80 81       	ld	r24, Z
 1a8:	82 bb       	out	0x12, r24	; 18
 1aa:	c5 01       	movw	r24, r10
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <BCD_Converter+0x90>
		}
	else{
		 a = (given/j)%10;
		}
display(i, a);
i--;
 1b0:	01 50       	subi	r16, 0x01	; 1
 1b2:	10 40       	sbci	r17, 0x00	; 0

void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	0f 3f       	cpi	r16, 0xFF	; 255
 1b8:	18 07       	cpc	r17, r24
 1ba:	59 f0       	breq	.+22     	; 0x1d2 <BCD_Converter+0xb6>
	else{
		 a = (given/j)%10;
		}
display(i, a);
i--;
j = j*10;
 1bc:	c9 01       	movw	r24, r18
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	53 e0       	ldi	r21, 0x03	; 3
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	5a 95       	dec	r21
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <BCD_Converter+0xa8>
 1cc:	28 0f       	add	r18, r24
 1ce:	39 1f       	adc	r19, r25
 1d0:	cc cf       	rjmp	.-104    	; 0x16a <BCD_Converter+0x4e>
}
}
 1d2:	28 96       	adiw	r28, 0x08	; 8
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	cf 91       	pop	r28
 1e0:	df 91       	pop	r29
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	bf 90       	pop	r11
 1f0:	af 90       	pop	r10
 1f2:	9f 90       	pop	r9
 1f4:	08 95       	ret

000001f6 <__divmodhi4>:
 1f6:	97 fb       	bst	r25, 7
 1f8:	09 2e       	mov	r0, r25
 1fa:	07 26       	eor	r0, r23
 1fc:	0a d0       	rcall	.+20     	; 0x212 <__divmodhi4_neg1>
 1fe:	77 fd       	sbrc	r23, 7
 200:	04 d0       	rcall	.+8      	; 0x20a <__divmodhi4_neg2>
 202:	0c d0       	rcall	.+24     	; 0x21c <__udivmodhi4>
 204:	06 d0       	rcall	.+12     	; 0x212 <__divmodhi4_neg1>
 206:	00 20       	and	r0, r0
 208:	1a f4       	brpl	.+6      	; 0x210 <__divmodhi4_exit>

0000020a <__divmodhi4_neg2>:
 20a:	70 95       	com	r23
 20c:	61 95       	neg	r22
 20e:	7f 4f       	sbci	r23, 0xFF	; 255

00000210 <__divmodhi4_exit>:
 210:	08 95       	ret

00000212 <__divmodhi4_neg1>:
 212:	f6 f7       	brtc	.-4      	; 0x210 <__divmodhi4_exit>
 214:	90 95       	com	r25
 216:	81 95       	neg	r24
 218:	9f 4f       	sbci	r25, 0xFF	; 255
 21a:	08 95       	ret

0000021c <__udivmodhi4>:
 21c:	aa 1b       	sub	r26, r26
 21e:	bb 1b       	sub	r27, r27
 220:	51 e1       	ldi	r21, 0x11	; 17
 222:	07 c0       	rjmp	.+14     	; 0x232 <__udivmodhi4_ep>

00000224 <__udivmodhi4_loop>:
 224:	aa 1f       	adc	r26, r26
 226:	bb 1f       	adc	r27, r27
 228:	a6 17       	cp	r26, r22
 22a:	b7 07       	cpc	r27, r23
 22c:	10 f0       	brcs	.+4      	; 0x232 <__udivmodhi4_ep>
 22e:	a6 1b       	sub	r26, r22
 230:	b7 0b       	sbc	r27, r23

00000232 <__udivmodhi4_ep>:
 232:	88 1f       	adc	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	5a 95       	dec	r21
 238:	a9 f7       	brne	.-22     	; 0x224 <__udivmodhi4_loop>
 23a:	80 95       	com	r24
 23c:	90 95       	com	r25
 23e:	bc 01       	movw	r22, r24
 240:	cd 01       	movw	r24, r26
 242:	08 95       	ret

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
