
Atmega32_usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000000dc  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067f  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b3  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000290  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000301  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000125  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  7a:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <US_TX>:
	while (s[i] != 0x00)
	{
		US_TX(s[i]);
		i++;
	}
}
  82:	5d 9b       	sbis	0x0b, 5	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <US_TX>
  86:	8c b9       	out	0x0c, r24	; 12
  88:	08 95       	ret

0000008a <send_strin>:

void send_strin(char *s)
{
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	ec 01       	movw	r28, r24
	while (*s != 0x00)
  90:	88 81       	ld	r24, Y
  92:	88 23       	and	r24, r24
  94:	31 f0       	breq	.+12     	; 0xa2 <send_strin+0x18>
  96:	21 96       	adiw	r28, 0x01	; 1
	{
		US_TX(*s++);
  98:	0e 94 41 00 	call	0x82	; 0x82 <US_TX>
	}
}

void send_strin(char *s)
{
	while (*s != 0x00)
  9c:	89 91       	ld	r24, Y+
  9e:	81 11       	cpse	r24, r1
  a0:	fb cf       	rjmp	.-10     	; 0x98 <send_strin+0xe>
	{
		US_TX(*s++);
	}
}
  a2:	df 91       	pop	r29
  a4:	cf 91       	pop	r28
  a6:	08 95       	ret

000000a8 <US_RX>:

unsigned char US_RX()
{
	while(!(UCSRA & (1<<RXC))){
  a8:	5f 9b       	sbis	0x0b, 7	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <US_RX>
		
	}
	
	return UDR;
  ac:	8c b1       	in	r24, 0x0c	; 12
}
  ae:	08 95       	ret

000000b0 <US_config>:


void US_config(){
	UBRRL = UBRR_Value;
  b0:	83 e3       	ldi	r24, 0x33	; 51
  b2:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Value>>8;
  b4:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXEN)|(1<<TXEN);
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (3<<UCSZ0)|(1<<URSEL);
  ba:	86 e8       	ldi	r24, 0x86	; 134
  bc:	80 bd       	out	0x20, r24	; 32
  be:	08 95       	ret

000000c0 <main>:
}


int main(void)
{
	US_config();
  c0:	0e 94 58 00 	call	0xb0	; 0xb0 <US_config>
	
	char b;
	
	while (1)
	{
		b = US_RX();
  c4:	0e 94 54 00 	call	0xa8	; 0xa8 <US_RX>
		//sprintf(b,"%d",a);
		send_strin(b);
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 45 00 	call	0x8a	; 0x8a <send_strin>
		send_strin("\r\n");
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 45 00 	call	0x8a	; 0x8a <send_strin>
  d6:	f6 cf       	rjmp	.-20     	; 0xc4 <main+0x4>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
