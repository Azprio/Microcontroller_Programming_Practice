
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005c  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000194  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000123  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000166  00000000  00000000  0000049d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a9  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000053  00000000  00000000  0000071d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 65 00 	call	0xca	; 0xca <main>
  7a:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <US_TX>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

void US_TX(unsigned char m){
	while(!(UCSRA & (1<<UDRE))){ }
  82:	5d 9b       	sbis	0x0b, 5	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <US_TX>
	UDR = m;
  86:	8c b9       	out	0x0c, r24	; 12
}
  88:	08 95       	ret

0000008a <send_string>:

void send_string(char s[])
{
  8a:	fc 01       	movw	r30, r24
  8c:	04 c0       	rjmp	.+8      	; 0x96 <send_string+0xc>
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

void US_TX(unsigned char m){
	while(!(UCSRA & (1<<UDRE))){ }
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <send_string+0x4>
	UDR = m;
  92:	8c b9       	out	0x0c, r24	; 12
  94:	31 96       	adiw	r30, 0x01	; 1

void send_string(char s[])
{
	int i =0;
	
	while (s[i] != 0x00)
  96:	80 81       	ld	r24, Z
  98:	88 23       	and	r24, r24
  9a:	c9 f7       	brne	.-14     	; 0x8e <send_string+0x4>
	{
		US_TX(s[i]);
		i++;
	}
}
  9c:	08 95       	ret

0000009e <send_strin>:

void send_strin(char *s)
{
  9e:	fc 01       	movw	r30, r24
  a0:	04 c0       	rjmp	.+8      	; 0xaa <send_strin+0xc>
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

void US_TX(unsigned char m){
	while(!(UCSRA & (1<<UDRE))){ }
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <send_strin+0x4>

void send_strin(char *s)
{
	while (*s != 0x00)
	{
		US_TX(*s++);
  a6:	31 96       	adiw	r30, 0x01	; 1
#include <util/delay.h>
#include <stdio.h>

void US_TX(unsigned char m){
	while(!(UCSRA & (1<<UDRE))){ }
	UDR = m;
  a8:	8c b9       	out	0x0c, r24	; 12
	}
}

void send_strin(char *s)
{
	while (*s != 0x00)
  aa:	80 81       	ld	r24, Z
  ac:	88 23       	and	r24, r24
  ae:	c9 f7       	brne	.-14     	; 0xa2 <send_strin+0x4>
	{
		US_TX(*s++);
	}
}
  b0:	08 95       	ret

000000b2 <US_RX>:

unsigned char US_RX()
{
	while(!(UCSRA & (1<<RXC))){
  b2:	5f 9b       	sbis	0x0b, 7	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <US_RX>
		
	}
	
	return UDR;
  b6:	8c b1       	in	r24, 0x0c	; 12
}
  b8:	08 95       	ret

000000ba <US_config>:


void US_config(){
	UBRRL = UBRR_Value;
  ba:	83 e3       	ldi	r24, 0x33	; 51
  bc:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Value>>8;
  be:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXEN)|(1<<TXEN);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (3<<UCSZ0)|(1<<URSEL);
  c4:	86 e8       	ldi	r24, 0x86	; 134
  c6:	80 bd       	out	0x20, r24	; 32
	
}
  c8:	08 95       	ret

000000ca <main>:
	return UDR;
}


void US_config(){
	UBRRL = UBRR_Value;
  ca:	83 e3       	ldi	r24, 0x33	; 51
  cc:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Value>>8;
  ce:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXEN)|(1<<TXEN);
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (3<<UCSZ0)|(1<<URSEL);
  d4:	86 e8       	ldi	r24, 0x86	; 134
  d6:	80 bd       	out	0x20, r24	; 32
	}
}

unsigned char US_RX()
{
	while(!(UCSRA & (1<<RXC))){
  d8:	5f 9b       	sbis	0x0b, 7	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <main+0xe>
		
	}
	
	return UDR;
  dc:	8c b1       	in	r24, 0x0c	; 12
	
	while (1)
	{
		b = US_RX();
		//sprintf(b,"%d",a);
		send_strin(b);
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 4f 00 	call	0x9e	; 0x9e <send_strin>
		send_strin("\r\n");
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 4f 00 	call	0x9e	; 0x9e <send_strin>
  ec:	f5 cf       	rjmp	.-22     	; 0xd8 <main+0xe>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
