
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000072e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000072e  000007a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c5  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008fc  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002cc  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000646  00000000  00000000  00001487  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019c  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000046c  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  7a:	0c 94 95 03 	jmp	0x72a	; 0x72a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Initialization>:
#include "lcd.h"

void ADC_Initialization()
{

ADMUX =(1<<REFS0);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADPS1) | (1<<ADEN);
  86:	82 e8       	ldi	r24, 0x82	; 130
  88:	86 b9       	out	0x06, r24	; 6
 
}
  8a:	08 95       	ret

0000008c <Read_ADC>:

int Read_ADC()
{

ADMUX |=(1<<MUX2);
  8c:	3a 9a       	sbi	0x07, 2	; 7
ADCSRA |= (1<<ADSC);
  8e:	36 9a       	sbi	0x06, 6	; 6

while (ADCSRA & 0b01000000)
  90:	36 99       	sbic	0x06, 6	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <Read_ADC+0x4>
{
}

int value = 0;
value = ADCL; 
  94:	24 b1       	in	r18, 0x04	; 4
  96:	30 e0       	ldi	r19, 0x00	; 0
value |=(ADCH << 8);
  98:	45 b1       	in	r20, 0x05	; 5
  9a:	94 2f       	mov	r25, r20
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	28 2b       	or	r18, r24
  a0:	39 2b       	or	r19, r25
return value;

}
  a2:	c9 01       	movw	r24, r18
  a4:	08 95       	ret

000000a6 <main>:


int main(){
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	2d 97       	sbiw	r28, 0x0d	; 13
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
#include "lcd.h"

void ADC_Initialization()
{

ADMUX =(1<<REFS0);
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADPS1) | (1<<ADEN);
  ca:	82 e8       	ldi	r24, 0x82	; 130
  cc:	86 b9       	out	0x06, r24	; 6


int main(){
ADC_Initialization();

DDRC = DDRC | 0b11111111;
  ce:	84 b3       	in	r24, 0x14	; 20
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 bb       	out	0x14, r24	; 20
DDRD = DDRD | 0b00001111;
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	8f 60       	ori	r24, 0x0F	; 15
  d8:	81 bb       	out	0x11, r24	; 17
LCDInit(0);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCDInit>
while(1){

	int sensed_value = Read_ADC();
	
	LCDClear();
char a[] = "Aktaruzzaman";
  e0:	7e 01       	movw	r14, r28
  e2:	08 94       	sec
  e4:	e1 1c       	adc	r14, r1
  e6:	f1 1c       	adc	r15, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	88 ec       	ldi	r24, 0xC8	; 200
  ea:	c8 2e       	mov	r12, r24
  ec:	d1 2c       	mov	r13, r1
DDRC = DDRC | 0b11111111;
DDRD = DDRD | 0b00001111;
LCDInit(0);
while(1){

	int sensed_value = Read_ADC();
  ee:	0e 94 46 00 	call	0x8c	; 0x8c <Read_ADC>
  f2:	8c 01       	movw	r16, r24
	
	LCDClear();
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	0e 94 cd 00 	call	0x19a	; 0x19a <LCDByte>
char a[] = "Aktaruzzaman";
  fc:	d7 01       	movw	r26, r14
  fe:	eb e6       	ldi	r30, 0x6B	; 107
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	01 90       	ld	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	81 50       	subi	r24, 0x01	; 1
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x5e>
	LCDWriteStringXY(2,0,a);
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	0e 94 05 02 	call	0x40a	; 0x40a <LCDGotoXY>
 114:	c7 01       	movw	r24, r14
 116:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteString>
	LCDWriteStringXY(1,1,"ADC value=");
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	0e 94 05 02 	call	0x40a	; 0x40a <LCDGotoXY>
 122:	80 e6       	ldi	r24, 0x60	; 96
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteString>
	LCDWriteInt(sensed_value,4);
 12a:	c8 01       	movw	r24, r16
 12c:	64 e0       	ldi	r22, 0x04	; 4
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDWriteInt>
 134:	80 ed       	ldi	r24, 0xD0	; 208
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	f6 01       	movw	r30, r12
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0x94>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 140:	d9 f7       	brne	.-10     	; 0x138 <main+0x92>
 142:	d5 cf       	rjmp	.-86     	; 0xee <main+0x48>

00000144 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 144:	81 b3       	in	r24, 0x11	; 17
 146:	80 7f       	andi	r24, 0xF0	; 240
 148:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();		//Read mode
 14a:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 14c:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	8a 95       	dec	r24
 152:	f1 f7       	brne	.-4      	; 0x150 <LCDBusyLoop+0xc>


	do
	{

		SET_E();
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	32 e0       	ldi	r19, 0x02	; 2
 158:	94 9a       	sbi	0x12, 4	; 18
 15a:	82 2f       	mov	r24, r18
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 160:	80 b3       	in	r24, 0x10	; 16
		status=status<<4;
 162:	82 95       	swap	r24
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	92 2f       	mov	r25, r18
 168:	9a 95       	dec	r25
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 16c:	94 98       	cbi	0x12, 4	; 18
 16e:	93 2f       	mov	r25, r19
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 174:	94 9a       	sbi	0x12, 4	; 18
 176:	92 2f       	mov	r25, r18
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 17c:	90 b3       	in	r25, 0x10	; 16
 17e:	92 2f       	mov	r25, r18
 180:	9a 95       	dec	r25
 182:	f1 f7       	brne	.-4      	; 0x180 <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 184:	94 98       	cbi	0x12, 4	; 18
 186:	93 2f       	mov	r25, r19
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 18c:	87 fd       	sbrc	r24, 7
 18e:	e4 cf       	rjmp	.-56     	; 0x158 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 190:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 192:	81 b3       	in	r24, 0x11	; 17
 194:	8f 60       	ori	r24, 0x0F	; 15
 196:	81 bb       	out	0x11, r24	; 17

}
 198:	08 95       	ret

0000019a <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 19a:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 19c:	66 23       	and	r22, r22
 19e:	11 f4       	brne	.+4      	; 0x1a4 <LCDByte+0xa>
	CLEAR_RS();
 1a0:	96 98       	cbi	0x12, 6	; 18
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <LCDByte+0xc>
else
	SET_RS();
 1a4:	96 9a       	sbi	0x12, 6	; 18
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 1ac:	94 9a       	sbi	0x12, 4	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1ae:	82 b3       	in	r24, 0x12	; 18
 1b0:	92 2f       	mov	r25, r18
 1b2:	92 95       	swap	r25
 1b4:	9f 70       	andi	r25, 0x0F	; 15
 1b6:	80 7f       	andi	r24, 0xF0	; 240
 1b8:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1ba:	92 bb       	out	0x12, r25	; 18
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	89 2f       	mov	r24, r25
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 1c4:	94 98       	cbi	0x12, 4	; 18
 1c6:	89 2f       	mov	r24, r25
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 1cc:	94 9a       	sbi	0x12, 4	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1ce:	82 b3       	in	r24, 0x12	; 18
 1d0:	2f 70       	andi	r18, 0x0F	; 15
 1d2:	80 7f       	andi	r24, 0xF0	; 240
 1d4:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 1d6:	82 bb       	out	0x12, r24	; 18
 1d8:	89 2f       	mov	r24, r25
 1da:	8a 95       	dec	r24
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1de:	94 98       	cbi	0x12, 4	; 18
 1e0:	9a 95       	dec	r25
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1e4:	0e 94 a2 00 	call	0x144	; 0x144 <LCDBusyLoop>
}
 1e8:	08 95       	ret

000001ea <LCDInit>:
	LCD_DATA_DDR|=0x0F;

}

void LCDInit(uint8_t style)
{
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f0:	80 e6       	ldi	r24, 0x60	; 96
 1f2:	9a ee       	ldi	r25, 0xEA	; 234
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCDInit+0xa>

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1f8:	81 b3       	in	r24, 0x11	; 17
 1fa:	8f 60       	ori	r24, 0x0F	; 15
 1fc:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);
 1fe:	8c 9a       	sbi	0x11, 4	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 200:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 202:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 204:	82 b3       	in	r24, 0x12	; 18
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 20a:	94 98       	cbi	0x12, 4	; 18
	CLEAR_RW();
 20c:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 20e:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 210:	85 e8       	ldi	r24, 0x85	; 133
 212:	98 2f       	mov	r25, r24
 214:	9a 95       	dec	r25
 216:	f1 f7       	brne	.-4      	; 0x214 <LCDInit+0x2a>

	//Set 4-bit mode
	_delay_us(50);	//tAS

	SET_E();
 218:	94 9a       	sbi	0x12, 4	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 21a:	91 9a       	sbi	0x12, 1	; 18
 21c:	98 2f       	mov	r25, r24
 21e:	9a 95       	dec	r25
 220:	f1 f7       	brne	.-4      	; 0x21e <LCDInit+0x34>
	_delay_us(50);
	CLEAR_E();
 222:	94 98       	cbi	0x12, 4	; 18
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <LCDInit+0x3a>
	_delay_us(50);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 228:	0e 94 a2 00 	call	0x144	; 0x144 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 22c:	81 2f       	mov	r24, r17
 22e:	8c 60       	ori	r24, 0x0C	; 12
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	0e 94 cd 00 	call	0x19a	; 0x19a <LCDByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 236:	08 ec       	ldi	r16, 0xC8	; 200
 238:	10 e0       	ldi	r17, 0x00	; 0
 23a:	c8 01       	movw	r24, r16
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCDInit+0x52>
	_delay_us(100);
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 240:	88 e2       	ldi	r24, 0x28	; 40
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	0e 94 cd 00 	call	0x19a	; 0x19a <LCDByte>
 248:	c8 01       	movw	r24, r16
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCDInit+0x60>
	_delay_us(100);
}
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	ec 01       	movw	r28, r24
 25a:	04 c0       	rjmp	.+8      	; 0x264 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	0e 94 cd 00 	call	0x19a	; 0x19a <LCDByte>
	msg++;
 262:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 264:	88 81       	ld	r24, Y
 266:	88 23       	and	r24, r24
 268:	c9 f7       	brne	.-14     	; 0x25c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <LCDWriteString_sliding>:
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
 270:	4f 92       	push	r4
 272:	5f 92       	push	r5
 274:	6f 92       	push	r6
 276:	7f 92       	push	r7
 278:	8f 92       	push	r8
 27a:	9f 92       	push	r9
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	eb 01       	movw	r28, r22
  while (*strng>0)
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
 292:	3c 01       	movw	r6, r24
 294:	88 24       	eor	r8, r8
 296:	99 24       	eor	r9, r9
 298:	88 ec       	ldi	r24, 0xC8	; 200
 29a:	48 2e       	mov	r4, r24
 29c:	51 2c       	mov	r5, r1
 29e:	42 c0       	rjmp	.+132    	; 0x324 <LCDWriteString_sliding+0xb4>
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
  {
	  LCDData(*strng++);
 2a0:	21 96       	adiw	r28, 0x01	; 1
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	0e 94 cd 00 	call	0x19a	; 0x19a <LCDByte>
	  _delay_ms(delay_ms);
 2a8:	c4 01       	movw	r24, r8
 2aa:	b3 01       	movw	r22, r6
 2ac:	0e 94 55 02 	call	0x4aa	; 0x4aa <__floatunsisf>
 2b0:	5b 01       	movw	r10, r22
 2b2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	4a ef       	ldi	r20, 0xFA	; 250
 2ba:	54 e4       	ldi	r21, 0x44	; 68
 2bc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__mulsf3>
 2c0:	7b 01       	movw	r14, r22
 2c2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e8       	ldi	r20, 0x80	; 128
 2ca:	5f e3       	ldi	r21, 0x3F	; 63
 2cc:	0e 94 25 02 	call	0x44a	; 0x44a <__cmpsf2>
 2d0:	88 23       	and	r24, r24
 2d2:	1c f4       	brge	.+6      	; 0x2da <LCDWriteString_sliding+0x6a>
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	22 c0       	rjmp	.+68     	; 0x31e <LCDWriteString_sliding+0xae>
		__ticks = 1;
	else if (__tmp > 65535)
 2da:	c8 01       	movw	r24, r16
 2dc:	b7 01       	movw	r22, r14
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	3f ef       	ldi	r19, 0xFF	; 255
 2e2:	4f e7       	ldi	r20, 0x7F	; 127
 2e4:	57 e4       	ldi	r21, 0x47	; 71
 2e6:	0e 94 df 02 	call	0x5be	; 0x5be <__gesf2>
 2ea:	18 16       	cp	r1, r24
 2ec:	a4 f4       	brge	.+40     	; 0x316 <LCDWriteString_sliding+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2ee:	c6 01       	movw	r24, r12
 2f0:	b5 01       	movw	r22, r10
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e2       	ldi	r20, 0x20	; 32
 2f8:	51 e4       	ldi	r21, 0x41	; 65
 2fa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__mulsf3>
 2fe:	0e 94 29 02 	call	0x452	; 0x452 <__fixunssfsi>
 302:	05 c0       	rjmp	.+10     	; 0x30e <LCDWriteString_sliding+0x9e>
 304:	c2 01       	movw	r24, r4
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCDWriteString_sliding+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30a:	61 50       	subi	r22, 0x01	; 1
 30c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30e:	61 15       	cp	r22, r1
 310:	71 05       	cpc	r23, r1
 312:	c1 f7       	brne	.-16     	; 0x304 <LCDWriteString_sliding+0x94>
 314:	07 c0       	rjmp	.+14     	; 0x324 <LCDWriteString_sliding+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 316:	c8 01       	movw	r24, r16
 318:	b7 01       	movw	r22, r14
 31a:	0e 94 29 02 	call	0x452	; 0x452 <__fixunssfsi>
 31e:	cb 01       	movw	r24, r22
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCDWriteString_sliding+0xb0>
 }
}
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
 324:	88 81       	ld	r24, Y
 326:	88 23       	and	r24, r24
 328:	09 f0       	breq	.+2      	; 0x32c <LCDWriteString_sliding+0xbc>
 32a:	ba cf       	rjmp	.-140    	; 0x2a0 <LCDWriteString_sliding+0x30>
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
  }
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	bf 90       	pop	r11
 33e:	af 90       	pop	r10
 340:	9f 90       	pop	r9
 342:	8f 90       	pop	r8
 344:	7f 90       	pop	r7
 346:	6f 90       	pop	r6
 348:	5f 90       	pop	r5
 34a:	4f 90       	pop	r4
 34c:	08 95       	ret

0000034e <LCDWriteInt>:
//-----------------------------------------------------
void LCDWriteInt(int val,unsigned int field_length)
{
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	00 d0       	rcall	.+0      	; 0x35c <LCDWriteInt+0xe>
 35c:	00 d0       	rcall	.+0      	; 0x35e <LCDWriteInt+0x10>
 35e:	0f 92       	push	r0
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	9c 01       	movw	r18, r24
 366:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 368:	fe 01       	movw	r30, r28
 36a:	31 96       	adiw	r30, 0x01	; 1
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	df 01       	movw	r26, r30
 370:	1d 92       	st	X+, r1
 372:	8a 95       	dec	r24
 374:	e9 f7       	brne	.-6      	; 0x370 <LCDWriteInt+0x22>
 376:	fe 01       	movw	r30, r28
 378:	35 96       	adiw	r30, 0x05	; 5
 37a:	0d c0       	rjmp	.+26     	; 0x396 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 37c:	c9 01       	movw	r24, r18
 37e:	6a e0       	ldi	r22, 0x0A	; 10
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__divmodhi4>
 386:	80 83       	st	Z, r24
	val=val/10;
 388:	c9 01       	movw	r24, r18
 38a:	6a e0       	ldi	r22, 0x0A	; 10
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__divmodhi4>
 392:	9b 01       	movw	r18, r22
 394:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 396:	21 15       	cp	r18, r1
 398:	31 05       	cpc	r19, r1
 39a:	81 f7       	brne	.-32     	; 0x37c <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 39c:	bf ef       	ldi	r27, 0xFF	; 255
 39e:	0f 3f       	cpi	r16, 0xFF	; 255
 3a0:	1b 07       	cpc	r17, r27
 3a2:	79 f4       	brne	.+30     	; 0x3c2 <LCDWriteInt+0x74>
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 3a8:	ae 01       	movw	r20, r28
 3aa:	4f 5f       	subi	r20, 0xFF	; 255
 3ac:	5f 4f       	sbci	r21, 0xFF	; 255
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <LCDWriteInt+0x66>
 3b0:	2f 5f       	subi	r18, 0xFF	; 255
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	fa 01       	movw	r30, r20
 3b6:	e2 0f       	add	r30, r18
 3b8:	f3 1f       	adc	r31, r19
 3ba:	80 81       	ld	r24, Z
 3bc:	88 23       	and	r24, r24
 3be:	c1 f3       	breq	.-16     	; 0x3b0 <LCDWriteInt+0x62>
 3c0:	04 c0       	rjmp	.+8      	; 0x3ca <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 3c2:	25 e0       	ldi	r18, 0x05	; 5
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	20 1b       	sub	r18, r16
 3c8:	31 0b       	sbc	r19, r17
 3ca:	7e 01       	movw	r14, r28
 3cc:	08 94       	sec
 3ce:	e1 1c       	adc	r14, r1
 3d0:	f1 1c       	adc	r15, r1
 3d2:	e2 0e       	add	r14, r18
 3d4:	f3 1e       	adc	r15, r19
 3d6:	89 01       	movw	r16, r18
 3d8:	09 c0       	rjmp	.+18     	; 0x3ec <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 3da:	f7 01       	movw	r30, r14
 3dc:	81 91       	ld	r24, Z+
 3de:	7f 01       	movw	r14, r30
 3e0:	80 5d       	subi	r24, 0xD0	; 208
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	0e 94 cd 00 	call	0x19a	; 0x19a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 3e8:	0f 5f       	subi	r16, 0xFF	; 255
 3ea:	1f 4f       	sbci	r17, 0xFF	; 255
 3ec:	05 30       	cpi	r16, 0x05	; 5
 3ee:	11 05       	cpc	r17, r1
 3f0:	a4 f3       	brlt	.-24     	; 0x3da <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	cf 91       	pop	r28
 3fe:	df 91       	pop	r29
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	08 95       	ret

0000040a <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	00 d0       	rcall	.+0      	; 0x410 <LCDGotoXY+0x6>
 410:	00 d0       	rcall	.+0      	; 0x412 <LCDGotoXY+0x8>
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	98 2f       	mov	r25, r24
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
    if(x<20)
 418:	84 31       	cpi	r24, 0x14	; 20
 41a:	80 f4       	brcc	.+32     	; 0x43c <LCDGotoXY+0x32>
{
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	89 83       	std	Y+1, r24	; 0x01
 420:	80 ec       	ldi	r24, 0xC0	; 192
 422:	8a 83       	std	Y+2, r24	; 0x02
 424:	84 e9       	ldi	r24, 0x94	; 148
 426:	8b 83       	std	Y+3, r24	; 0x03
 428:	84 ed       	ldi	r24, 0xD4	; 212
 42a:	8c 83       	std	Y+4, r24	; 0x04
    if(x<20)
    LCDCmd(line[y]+x);//if(y==0)x|=0x80,if(y==1)x|=0x80,if(y==2)x|=0x80,if(y==3)x|=0x80
 42c:	fe 01       	movw	r30, r28
 42e:	e6 0f       	add	r30, r22
 430:	f1 1d       	adc	r31, r1
 432:	81 81       	ldd	r24, Z+1	; 0x01
 434:	89 0f       	add	r24, r25
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	0e 94 cd 00 	call	0x19a	; 0x19a <LCDByte>

}
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	cf 91       	pop	r28
 446:	df 91       	pop	r29
 448:	08 95       	ret

0000044a <__cmpsf2>:
 44a:	6c d0       	rcall	.+216    	; 0x524 <__fp_cmp>
 44c:	08 f4       	brcc	.+2      	; 0x450 <__cmpsf2+0x6>
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	08 95       	ret

00000452 <__fixunssfsi>:
 452:	94 d0       	rcall	.+296    	; 0x57c <__fp_splitA>
 454:	88 f0       	brcs	.+34     	; 0x478 <__fixunssfsi+0x26>
 456:	9f 57       	subi	r25, 0x7F	; 127
 458:	90 f0       	brcs	.+36     	; 0x47e <__fixunssfsi+0x2c>
 45a:	b9 2f       	mov	r27, r25
 45c:	99 27       	eor	r25, r25
 45e:	b7 51       	subi	r27, 0x17	; 23
 460:	a0 f0       	brcs	.+40     	; 0x48a <__fixunssfsi+0x38>
 462:	d1 f0       	breq	.+52     	; 0x498 <__fixunssfsi+0x46>
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	1a f0       	brmi	.+6      	; 0x474 <__fixunssfsi+0x22>
 46e:	ba 95       	dec	r27
 470:	c9 f7       	brne	.-14     	; 0x464 <__fixunssfsi+0x12>
 472:	12 c0       	rjmp	.+36     	; 0x498 <__fixunssfsi+0x46>
 474:	b1 30       	cpi	r27, 0x01	; 1
 476:	81 f0       	breq	.+32     	; 0x498 <__fixunssfsi+0x46>
 478:	9b d0       	rcall	.+310    	; 0x5b0 <__fp_zero>
 47a:	b1 e0       	ldi	r27, 0x01	; 1
 47c:	08 95       	ret
 47e:	98 c0       	rjmp	.+304    	; 0x5b0 <__fp_zero>
 480:	67 2f       	mov	r22, r23
 482:	78 2f       	mov	r23, r24
 484:	88 27       	eor	r24, r24
 486:	b8 5f       	subi	r27, 0xF8	; 248
 488:	39 f0       	breq	.+14     	; 0x498 <__fixunssfsi+0x46>
 48a:	b9 3f       	cpi	r27, 0xF9	; 249
 48c:	cc f3       	brlt	.-14     	; 0x480 <__fixunssfsi+0x2e>
 48e:	86 95       	lsr	r24
 490:	77 95       	ror	r23
 492:	67 95       	ror	r22
 494:	b3 95       	inc	r27
 496:	d9 f7       	brne	.-10     	; 0x48e <__fixunssfsi+0x3c>
 498:	3e f4       	brtc	.+14     	; 0x4a8 <__fixunssfsi+0x56>
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	08 95       	ret

000004aa <__floatunsisf>:
 4aa:	e8 94       	clt
 4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <__floatsisf+0x12>

000004ae <__floatsisf>:
 4ae:	97 fb       	bst	r25, 7
 4b0:	3e f4       	brtc	.+14     	; 0x4c0 <__floatsisf+0x12>
 4b2:	90 95       	com	r25
 4b4:	80 95       	com	r24
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	99 23       	and	r25, r25
 4c2:	a9 f0       	breq	.+42     	; 0x4ee <__floatsisf+0x40>
 4c4:	f9 2f       	mov	r31, r25
 4c6:	96 e9       	ldi	r25, 0x96	; 150
 4c8:	bb 27       	eor	r27, r27
 4ca:	93 95       	inc	r25
 4cc:	f6 95       	lsr	r31
 4ce:	87 95       	ror	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b7 95       	ror	r27
 4d6:	f1 11       	cpse	r31, r1
 4d8:	f8 cf       	rjmp	.-16     	; 0x4ca <__floatsisf+0x1c>
 4da:	fa f4       	brpl	.+62     	; 0x51a <__floatsisf+0x6c>
 4dc:	bb 0f       	add	r27, r27
 4de:	11 f4       	brne	.+4      	; 0x4e4 <__floatsisf+0x36>
 4e0:	60 ff       	sbrs	r22, 0
 4e2:	1b c0       	rjmp	.+54     	; 0x51a <__floatsisf+0x6c>
 4e4:	6f 5f       	subi	r22, 0xFF	; 255
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	16 c0       	rjmp	.+44     	; 0x51a <__floatsisf+0x6c>
 4ee:	88 23       	and	r24, r24
 4f0:	11 f0       	breq	.+4      	; 0x4f6 <__floatsisf+0x48>
 4f2:	96 e9       	ldi	r25, 0x96	; 150
 4f4:	11 c0       	rjmp	.+34     	; 0x518 <__floatsisf+0x6a>
 4f6:	77 23       	and	r23, r23
 4f8:	21 f0       	breq	.+8      	; 0x502 <__floatsisf+0x54>
 4fa:	9e e8       	ldi	r25, 0x8E	; 142
 4fc:	87 2f       	mov	r24, r23
 4fe:	76 2f       	mov	r23, r22
 500:	05 c0       	rjmp	.+10     	; 0x50c <__floatsisf+0x5e>
 502:	66 23       	and	r22, r22
 504:	71 f0       	breq	.+28     	; 0x522 <__floatsisf+0x74>
 506:	96 e8       	ldi	r25, 0x86	; 134
 508:	86 2f       	mov	r24, r22
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	2a f0       	brmi	.+10     	; 0x51a <__floatsisf+0x6c>
 510:	9a 95       	dec	r25
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	da f7       	brpl	.-10     	; 0x510 <__floatsisf+0x62>
 51a:	88 0f       	add	r24, r24
 51c:	96 95       	lsr	r25
 51e:	87 95       	ror	r24
 520:	97 f9       	bld	r25, 7
 522:	08 95       	ret

00000524 <__fp_cmp>:
 524:	99 0f       	add	r25, r25
 526:	00 08       	sbc	r0, r0
 528:	55 0f       	add	r21, r21
 52a:	aa 0b       	sbc	r26, r26
 52c:	e0 e8       	ldi	r30, 0x80	; 128
 52e:	fe ef       	ldi	r31, 0xFE	; 254
 530:	16 16       	cp	r1, r22
 532:	17 06       	cpc	r1, r23
 534:	e8 07       	cpc	r30, r24
 536:	f9 07       	cpc	r31, r25
 538:	c0 f0       	brcs	.+48     	; 0x56a <__fp_cmp+0x46>
 53a:	12 16       	cp	r1, r18
 53c:	13 06       	cpc	r1, r19
 53e:	e4 07       	cpc	r30, r20
 540:	f5 07       	cpc	r31, r21
 542:	98 f0       	brcs	.+38     	; 0x56a <__fp_cmp+0x46>
 544:	62 1b       	sub	r22, r18
 546:	73 0b       	sbc	r23, r19
 548:	84 0b       	sbc	r24, r20
 54a:	95 0b       	sbc	r25, r21
 54c:	39 f4       	brne	.+14     	; 0x55c <__fp_cmp+0x38>
 54e:	0a 26       	eor	r0, r26
 550:	61 f0       	breq	.+24     	; 0x56a <__fp_cmp+0x46>
 552:	23 2b       	or	r18, r19
 554:	24 2b       	or	r18, r20
 556:	25 2b       	or	r18, r21
 558:	21 f4       	brne	.+8      	; 0x562 <__fp_cmp+0x3e>
 55a:	08 95       	ret
 55c:	0a 26       	eor	r0, r26
 55e:	09 f4       	brne	.+2      	; 0x562 <__fp_cmp+0x3e>
 560:	a1 40       	sbci	r26, 0x01	; 1
 562:	a6 95       	lsr	r26
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	81 1d       	adc	r24, r1
 568:	81 1d       	adc	r24, r1
 56a:	08 95       	ret

0000056c <__fp_split3>:
 56c:	57 fd       	sbrc	r21, 7
 56e:	90 58       	subi	r25, 0x80	; 128
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	59 f0       	breq	.+22     	; 0x58c <__fp_splitA+0x10>
 576:	5f 3f       	cpi	r21, 0xFF	; 255
 578:	71 f0       	breq	.+28     	; 0x596 <__fp_splitA+0x1a>
 57a:	47 95       	ror	r20

0000057c <__fp_splitA>:
 57c:	88 0f       	add	r24, r24
 57e:	97 fb       	bst	r25, 7
 580:	99 1f       	adc	r25, r25
 582:	61 f0       	breq	.+24     	; 0x59c <__fp_splitA+0x20>
 584:	9f 3f       	cpi	r25, 0xFF	; 255
 586:	79 f0       	breq	.+30     	; 0x5a6 <__fp_splitA+0x2a>
 588:	87 95       	ror	r24
 58a:	08 95       	ret
 58c:	12 16       	cp	r1, r18
 58e:	13 06       	cpc	r1, r19
 590:	14 06       	cpc	r1, r20
 592:	55 1f       	adc	r21, r21
 594:	f2 cf       	rjmp	.-28     	; 0x57a <__fp_split3+0xe>
 596:	46 95       	lsr	r20
 598:	f1 df       	rcall	.-30     	; 0x57c <__fp_splitA>
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__fp_splitA+0x30>
 59c:	16 16       	cp	r1, r22
 59e:	17 06       	cpc	r1, r23
 5a0:	18 06       	cpc	r1, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	f1 cf       	rjmp	.-30     	; 0x588 <__fp_splitA+0xc>
 5a6:	86 95       	lsr	r24
 5a8:	71 05       	cpc	r23, r1
 5aa:	61 05       	cpc	r22, r1
 5ac:	08 94       	sec
 5ae:	08 95       	ret

000005b0 <__fp_zero>:
 5b0:	e8 94       	clt

000005b2 <__fp_szero>:
 5b2:	bb 27       	eor	r27, r27
 5b4:	66 27       	eor	r22, r22
 5b6:	77 27       	eor	r23, r23
 5b8:	cb 01       	movw	r24, r22
 5ba:	97 f9       	bld	r25, 7
 5bc:	08 95       	ret

000005be <__gesf2>:
 5be:	b2 df       	rcall	.-156    	; 0x524 <__fp_cmp>
 5c0:	08 f4       	brcc	.+2      	; 0x5c4 <__gesf2+0x6>
 5c2:	8f ef       	ldi	r24, 0xFF	; 255
 5c4:	08 95       	ret

000005c6 <__mulsf3>:
 5c6:	0b d0       	rcall	.+22     	; 0x5de <__mulsf3x>
 5c8:	78 c0       	rjmp	.+240    	; 0x6ba <__fp_round>
 5ca:	69 d0       	rcall	.+210    	; 0x69e <__fp_pscA>
 5cc:	28 f0       	brcs	.+10     	; 0x5d8 <__mulsf3+0x12>
 5ce:	6e d0       	rcall	.+220    	; 0x6ac <__fp_pscB>
 5d0:	18 f0       	brcs	.+6      	; 0x5d8 <__mulsf3+0x12>
 5d2:	95 23       	and	r25, r21
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <__mulsf3+0x12>
 5d6:	5a c0       	rjmp	.+180    	; 0x68c <__fp_inf>
 5d8:	5f c0       	rjmp	.+190    	; 0x698 <__fp_nan>
 5da:	11 24       	eor	r1, r1
 5dc:	ea cf       	rjmp	.-44     	; 0x5b2 <__fp_szero>

000005de <__mulsf3x>:
 5de:	c6 df       	rcall	.-116    	; 0x56c <__fp_split3>
 5e0:	a0 f3       	brcs	.-24     	; 0x5ca <__mulsf3+0x4>

000005e2 <__mulsf3_pse>:
 5e2:	95 9f       	mul	r25, r21
 5e4:	d1 f3       	breq	.-12     	; 0x5da <__mulsf3+0x14>
 5e6:	95 0f       	add	r25, r21
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	55 1f       	adc	r21, r21
 5ec:	62 9f       	mul	r22, r18
 5ee:	f0 01       	movw	r30, r0
 5f0:	72 9f       	mul	r23, r18
 5f2:	bb 27       	eor	r27, r27
 5f4:	f0 0d       	add	r31, r0
 5f6:	b1 1d       	adc	r27, r1
 5f8:	63 9f       	mul	r22, r19
 5fa:	aa 27       	eor	r26, r26
 5fc:	f0 0d       	add	r31, r0
 5fe:	b1 1d       	adc	r27, r1
 600:	aa 1f       	adc	r26, r26
 602:	64 9f       	mul	r22, r20
 604:	66 27       	eor	r22, r22
 606:	b0 0d       	add	r27, r0
 608:	a1 1d       	adc	r26, r1
 60a:	66 1f       	adc	r22, r22
 60c:	82 9f       	mul	r24, r18
 60e:	22 27       	eor	r18, r18
 610:	b0 0d       	add	r27, r0
 612:	a1 1d       	adc	r26, r1
 614:	62 1f       	adc	r22, r18
 616:	73 9f       	mul	r23, r19
 618:	b0 0d       	add	r27, r0
 61a:	a1 1d       	adc	r26, r1
 61c:	62 1f       	adc	r22, r18
 61e:	83 9f       	mul	r24, r19
 620:	a0 0d       	add	r26, r0
 622:	61 1d       	adc	r22, r1
 624:	22 1f       	adc	r18, r18
 626:	74 9f       	mul	r23, r20
 628:	33 27       	eor	r19, r19
 62a:	a0 0d       	add	r26, r0
 62c:	61 1d       	adc	r22, r1
 62e:	23 1f       	adc	r18, r19
 630:	84 9f       	mul	r24, r20
 632:	60 0d       	add	r22, r0
 634:	21 1d       	adc	r18, r1
 636:	82 2f       	mov	r24, r18
 638:	76 2f       	mov	r23, r22
 63a:	6a 2f       	mov	r22, r26
 63c:	11 24       	eor	r1, r1
 63e:	9f 57       	subi	r25, 0x7F	; 127
 640:	50 40       	sbci	r21, 0x00	; 0
 642:	8a f0       	brmi	.+34     	; 0x666 <__mulsf3_pse+0x84>
 644:	e1 f0       	breq	.+56     	; 0x67e <__mulsf3_pse+0x9c>
 646:	88 23       	and	r24, r24
 648:	4a f0       	brmi	.+18     	; 0x65c <__mulsf3_pse+0x7a>
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	bb 1f       	adc	r27, r27
 650:	66 1f       	adc	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	91 50       	subi	r25, 0x01	; 1
 658:	50 40       	sbci	r21, 0x00	; 0
 65a:	a9 f7       	brne	.-22     	; 0x646 <__mulsf3_pse+0x64>
 65c:	9e 3f       	cpi	r25, 0xFE	; 254
 65e:	51 05       	cpc	r21, r1
 660:	70 f0       	brcs	.+28     	; 0x67e <__mulsf3_pse+0x9c>
 662:	14 c0       	rjmp	.+40     	; 0x68c <__fp_inf>
 664:	a6 cf       	rjmp	.-180    	; 0x5b2 <__fp_szero>
 666:	5f 3f       	cpi	r21, 0xFF	; 255
 668:	ec f3       	brlt	.-6      	; 0x664 <__mulsf3_pse+0x82>
 66a:	98 3e       	cpi	r25, 0xE8	; 232
 66c:	dc f3       	brlt	.-10     	; 0x664 <__mulsf3_pse+0x82>
 66e:	86 95       	lsr	r24
 670:	77 95       	ror	r23
 672:	67 95       	ror	r22
 674:	b7 95       	ror	r27
 676:	f7 95       	ror	r31
 678:	e7 95       	ror	r30
 67a:	9f 5f       	subi	r25, 0xFF	; 255
 67c:	c1 f7       	brne	.-16     	; 0x66e <__mulsf3_pse+0x8c>
 67e:	fe 2b       	or	r31, r30
 680:	88 0f       	add	r24, r24
 682:	91 1d       	adc	r25, r1
 684:	96 95       	lsr	r25
 686:	87 95       	ror	r24
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret

0000068c <__fp_inf>:
 68c:	97 f9       	bld	r25, 7
 68e:	9f 67       	ori	r25, 0x7F	; 127
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	08 95       	ret

00000698 <__fp_nan>:
 698:	9f ef       	ldi	r25, 0xFF	; 255
 69a:	80 ec       	ldi	r24, 0xC0	; 192
 69c:	08 95       	ret

0000069e <__fp_pscA>:
 69e:	00 24       	eor	r0, r0
 6a0:	0a 94       	dec	r0
 6a2:	16 16       	cp	r1, r22
 6a4:	17 06       	cpc	r1, r23
 6a6:	18 06       	cpc	r1, r24
 6a8:	09 06       	cpc	r0, r25
 6aa:	08 95       	ret

000006ac <__fp_pscB>:
 6ac:	00 24       	eor	r0, r0
 6ae:	0a 94       	dec	r0
 6b0:	12 16       	cp	r1, r18
 6b2:	13 06       	cpc	r1, r19
 6b4:	14 06       	cpc	r1, r20
 6b6:	05 06       	cpc	r0, r21
 6b8:	08 95       	ret

000006ba <__fp_round>:
 6ba:	09 2e       	mov	r0, r25
 6bc:	03 94       	inc	r0
 6be:	00 0c       	add	r0, r0
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <__fp_round+0xc>
 6c2:	88 23       	and	r24, r24
 6c4:	52 f0       	brmi	.+20     	; 0x6da <__fp_round+0x20>
 6c6:	bb 0f       	add	r27, r27
 6c8:	40 f4       	brcc	.+16     	; 0x6da <__fp_round+0x20>
 6ca:	bf 2b       	or	r27, r31
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <__fp_round+0x18>
 6ce:	60 ff       	sbrs	r22, 0
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <__fp_round+0x20>
 6d2:	6f 5f       	subi	r22, 0xFF	; 255
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	08 95       	ret

000006dc <__divmodhi4>:
 6dc:	97 fb       	bst	r25, 7
 6de:	09 2e       	mov	r0, r25
 6e0:	07 26       	eor	r0, r23
 6e2:	0a d0       	rcall	.+20     	; 0x6f8 <__divmodhi4_neg1>
 6e4:	77 fd       	sbrc	r23, 7
 6e6:	04 d0       	rcall	.+8      	; 0x6f0 <__divmodhi4_neg2>
 6e8:	0c d0       	rcall	.+24     	; 0x702 <__udivmodhi4>
 6ea:	06 d0       	rcall	.+12     	; 0x6f8 <__divmodhi4_neg1>
 6ec:	00 20       	and	r0, r0
 6ee:	1a f4       	brpl	.+6      	; 0x6f6 <__divmodhi4_exit>

000006f0 <__divmodhi4_neg2>:
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255

000006f6 <__divmodhi4_exit>:
 6f6:	08 95       	ret

000006f8 <__divmodhi4_neg1>:
 6f8:	f6 f7       	brtc	.-4      	; 0x6f6 <__divmodhi4_exit>
 6fa:	90 95       	com	r25
 6fc:	81 95       	neg	r24
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	08 95       	ret

00000702 <__udivmodhi4>:
 702:	aa 1b       	sub	r26, r26
 704:	bb 1b       	sub	r27, r27
 706:	51 e1       	ldi	r21, 0x11	; 17
 708:	07 c0       	rjmp	.+14     	; 0x718 <__udivmodhi4_ep>

0000070a <__udivmodhi4_loop>:
 70a:	aa 1f       	adc	r26, r26
 70c:	bb 1f       	adc	r27, r27
 70e:	a6 17       	cp	r26, r22
 710:	b7 07       	cpc	r27, r23
 712:	10 f0       	brcs	.+4      	; 0x718 <__udivmodhi4_ep>
 714:	a6 1b       	sub	r26, r22
 716:	b7 0b       	sbc	r27, r23

00000718 <__udivmodhi4_ep>:
 718:	88 1f       	adc	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	5a 95       	dec	r21
 71e:	a9 f7       	brne	.-22     	; 0x70a <__udivmodhi4_loop>
 720:	80 95       	com	r24
 722:	90 95       	com	r25
 724:	bc 01       	movw	r22, r24
 726:	cd 01       	movw	r24, r26
 728:	08 95       	ret

0000072a <_exit>:
 72a:	f8 94       	cli

0000072c <__stop_program>:
 72c:	ff cf       	rjmp	.-2      	; 0x72c <__stop_program>
