
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000006e8  0000075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a1  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000084e  00000000  00000000  00000845  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000261  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005c5  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  000018bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000191  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000042a  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00001f17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>
#include "lcd.h"

int main()
{
     LCDInit(0);// pass 1 for cursor blinking 
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCDInit>
    LCDClear();
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDByte>
   // LCDGotoXY(0,0);
	LCDWriteStringXY(0,0,"A");
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCDGotoXY>
  98:	80 e6       	ldi	r24, 0x60	; 96
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 07 01 	call	0x20e	; 0x20e <LCDWriteString>
	LCDWriteStringXY(15,0,"B");
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCDGotoXY>
  a8:	82 e6       	ldi	r24, 0x62	; 98
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 07 01 	call	0x20e	; 0x20e <LCDWriteString>
	LCDWriteStringXY(0,1,"C");
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCDGotoXY>
  b8:	84 e6       	ldi	r24, 0x64	; 100
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 07 01 	call	0x20e	; 0x20e <LCDWriteString>
	LCDWriteStringXY(15,1,"D");
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCDGotoXY>
  c8:	86 e6       	ldi	r24, 0x66	; 102
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 07 01 	call	0x20e	; 0x20e <LCDWriteString>
	
	//LCDWriteStringXY(x,y,msg);
    //LCDWriteString_sliding(200,"Abdur Rahman");
	//LCDWriteString("hello");
	LCDClear();
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDByte>
	LCDWriteStringXY(0,0,65);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCDGotoXY>
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 07 01 	call	0x20e	; 0x20e <LCDWriteString>
	//LCDWriteString(01011010);
	LCDWriteInt(1023,4);
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	93 e0       	ldi	r25, 0x03	; 3
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	0e 94 84 01 	call	0x308	; 0x308 <LCDWriteInt>
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	9f ef       	ldi	r25, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f8:	29 e1       	ldi	r18, 0x19	; 25
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x7c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	d9 f7       	brne	.-10     	; 0xfc <main+0x7a>
 106:	ff cf       	rjmp	.-2      	; 0x106 <main+0x84>

00000108 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 108:	81 b3       	in	r24, 0x11	; 17
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();		//Read mode
 10e:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 110:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDBusyLoop+0xc>


	do
	{

		SET_E();
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	94 9a       	sbi	0x12, 4	; 18
 11c:	82 2f       	mov	r24, r18
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 122:	80 b3       	in	r24, 0x10	; 16
		status=status<<4;
 124:	82 95       	swap	r24
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	92 2f       	mov	r25, r18
 12a:	9a 95       	dec	r25
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 12e:	94 98       	cbi	0x12, 4	; 18
 130:	92 2f       	mov	r25, r18
 132:	9a 95       	dec	r25
 134:	f1 f7       	brne	.-4      	; 0x132 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 136:	94 9a       	sbi	0x12, 4	; 18
 138:	92 2f       	mov	r25, r18
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 13e:	90 b3       	in	r25, 0x10	; 16
 140:	92 2f       	mov	r25, r18
 142:	9a 95       	dec	r25
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 146:	94 98       	cbi	0x12, 4	; 18
 148:	92 2f       	mov	r25, r18
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 14e:	87 fd       	sbrc	r24, 7
 150:	e4 cf       	rjmp	.-56     	; 0x11a <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 152:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 154:	81 b3       	in	r24, 0x11	; 17
 156:	8f 60       	ori	r24, 0x0F	; 15
 158:	81 bb       	out	0x11, r24	; 17

}
 15a:	08 95       	ret

0000015c <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 15c:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 15e:	66 23       	and	r22, r22
 160:	11 f4       	brne	.+4      	; 0x166 <LCDByte+0xa>
	CLEAR_RS();
 162:	96 98       	cbi	0x12, 6	; 18
 164:	01 c0       	rjmp	.+2      	; 0x168 <LCDByte+0xc>
else
	SET_RS();
 166:	96 9a       	sbi	0x12, 6	; 18
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	82 2f       	mov	r24, r18
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 170:	94 9a       	sbi	0x12, 4	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 172:	82 b3       	in	r24, 0x12	; 18
 174:	93 2f       	mov	r25, r19
 176:	92 95       	swap	r25
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 17e:	92 bb       	out	0x12, r25	; 18
 180:	82 2f       	mov	r24, r18
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 186:	94 98       	cbi	0x12, 4	; 18
 188:	82 2f       	mov	r24, r18
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 18e:	94 9a       	sbi	0x12, 4	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 190:	82 b3       	in	r24, 0x12	; 18
 192:	3f 70       	andi	r19, 0x0F	; 15
 194:	80 7f       	andi	r24, 0xF0	; 240
 196:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 198:	82 bb       	out	0x12, r24	; 18
 19a:	82 2f       	mov	r24, r18
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1a0:	94 98       	cbi	0x12, 4	; 18
 1a2:	2a 95       	dec	r18
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1a6:	0e 94 84 00 	call	0x108	; 0x108 <LCDBusyLoop>
}
 1aa:	08 95       	ret

000001ac <LCDInit>:
	LCD_DATA_DDR|=0x0F;

}

void LCDInit(uint8_t style)
{
 1ac:	1f 93       	push	r17
 1ae:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b0:	8c e4       	ldi	r24, 0x4C	; 76
 1b2:	9d e1       	ldi	r25, 0x1D	; 29
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDInit+0x8>

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1b8:	81 b3       	in	r24, 0x11	; 17
 1ba:	8f 60       	ori	r24, 0x0F	; 15
 1bc:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);
 1be:	8c 9a       	sbi	0x11, 4	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1c0:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1c2:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 1c4:	82 b3       	in	r24, 0x12	; 18
 1c6:	80 7f       	andi	r24, 0xF0	; 240
 1c8:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 1ca:	94 98       	cbi	0x12, 4	; 18
	CLEAR_RW();
 1cc:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 1ce:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d0:	80 e1       	ldi	r24, 0x10	; 16
 1d2:	98 2f       	mov	r25, r24
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDInit+0x28>

	//Set 4-bit mode
	_delay_us(50);	//tAS

	SET_E();
 1d8:	94 9a       	sbi	0x12, 4	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1da:	91 9a       	sbi	0x12, 1	; 18
 1dc:	98 2f       	mov	r25, r24
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCDInit+0x32>
	_delay_us(50);
	CLEAR_E();
 1e2:	94 98       	cbi	0x12, 4	; 18
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDInit+0x38>
	_delay_us(50);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1e8:	0e 94 84 00 	call	0x108	; 0x108 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1ec:	81 2f       	mov	r24, r17
 1ee:	8c 60       	ori	r24, 0x0C	; 12
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDByte>
 1f6:	11 e2       	ldi	r17, 0x21	; 33
 1f8:	81 2f       	mov	r24, r17
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDInit+0x4e>
	_delay_us(100);
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDByte>
 206:	1a 95       	dec	r17
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDInit+0x5a>
	_delay_us(100);
}
 20a:	1f 91       	pop	r17
 20c:	08 95       	ret

0000020e <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	ec 01       	movw	r28, r24
 214:	04 c0       	rjmp	.+8      	; 0x21e <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDByte>
	msg++;
 21c:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 21e:	88 81       	ld	r24, Y
 220:	88 23       	and	r24, r24
 222:	c9 f7       	brne	.-14     	; 0x216 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <LCDWriteString_sliding>:
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
 22a:	4f 92       	push	r4
 22c:	5f 92       	push	r5
 22e:	6f 92       	push	r6
 230:	7f 92       	push	r7
 232:	8f 92       	push	r8
 234:	9f 92       	push	r9
 236:	af 92       	push	r10
 238:	bf 92       	push	r11
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	eb 01       	movw	r28, r22
  while (*strng>0)
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
 24c:	3c 01       	movw	r6, r24
 24e:	88 24       	eor	r8, r8
 250:	99 24       	eor	r9, r9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 252:	89 e1       	ldi	r24, 0x19	; 25
 254:	48 2e       	mov	r4, r24
 256:	51 2c       	mov	r5, r1
 258:	42 c0       	rjmp	.+132    	; 0x2de <LCDWriteString_sliding+0xb4>
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
  {
	  LCDData(*strng++);
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDByte>
	  _delay_ms(delay_ms);
 262:	c4 01       	movw	r24, r8
 264:	b3 01       	movw	r22, r6
 266:	0e 94 32 02 	call	0x464	; 0x464 <__floatunsisf>
 26a:	5b 01       	movw	r10, r22
 26c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	4a e7       	ldi	r20, 0x7A	; 122
 274:	53 e4       	ldi	r21, 0x43	; 67
 276:	0e 94 c0 02 	call	0x580	; 0x580 <__mulsf3>
 27a:	7b 01       	movw	r14, r22
 27c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e8       	ldi	r20, 0x80	; 128
 284:	5f e3       	ldi	r21, 0x3F	; 63
 286:	0e 94 02 02 	call	0x404	; 0x404 <__cmpsf2>
 28a:	88 23       	and	r24, r24
 28c:	1c f4       	brge	.+6      	; 0x294 <LCDWriteString_sliding+0x6a>
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	22 c0       	rjmp	.+68     	; 0x2d8 <LCDWriteString_sliding+0xae>
		__ticks = 1;
	else if (__tmp > 65535)
 294:	c8 01       	movw	r24, r16
 296:	b7 01       	movw	r22, r14
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	3f ef       	ldi	r19, 0xFF	; 255
 29c:	4f e7       	ldi	r20, 0x7F	; 127
 29e:	57 e4       	ldi	r21, 0x47	; 71
 2a0:	0e 94 bc 02 	call	0x578	; 0x578 <__gesf2>
 2a4:	18 16       	cp	r1, r24
 2a6:	a4 f4       	brge	.+40     	; 0x2d0 <LCDWriteString_sliding+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2a8:	c6 01       	movw	r24, r12
 2aa:	b5 01       	movw	r22, r10
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e2       	ldi	r20, 0x20	; 32
 2b2:	51 e4       	ldi	r21, 0x41	; 65
 2b4:	0e 94 c0 02 	call	0x580	; 0x580 <__mulsf3>
 2b8:	0e 94 06 02 	call	0x40c	; 0x40c <__fixunssfsi>
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <LCDWriteString_sliding+0x9e>
 2be:	c2 01       	movw	r24, r4
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCDWriteString_sliding+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c4:	61 50       	subi	r22, 0x01	; 1
 2c6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c8:	61 15       	cp	r22, r1
 2ca:	71 05       	cpc	r23, r1
 2cc:	c1 f7       	brne	.-16     	; 0x2be <LCDWriteString_sliding+0x94>
 2ce:	07 c0       	rjmp	.+14     	; 0x2de <LCDWriteString_sliding+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2d0:	c8 01       	movw	r24, r16
 2d2:	b7 01       	movw	r22, r14
 2d4:	0e 94 06 02 	call	0x40c	; 0x40c <__fixunssfsi>
 2d8:	cb 01       	movw	r24, r22
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCDWriteString_sliding+0xb0>
 }
}
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
 2de:	88 81       	ld	r24, Y
 2e0:	88 23       	and	r24, r24
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <LCDWriteString_sliding+0xbc>
 2e4:	ba cf       	rjmp	.-140    	; 0x25a <LCDWriteString_sliding+0x30>
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
  }
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	bf 90       	pop	r11
 2f8:	af 90       	pop	r10
 2fa:	9f 90       	pop	r9
 2fc:	8f 90       	pop	r8
 2fe:	7f 90       	pop	r7
 300:	6f 90       	pop	r6
 302:	5f 90       	pop	r5
 304:	4f 90       	pop	r4
 306:	08 95       	ret

00000308 <LCDWriteInt>:
//-----------------------------------------------------
void LCDWriteInt(int val,unsigned int field_length)
{
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	df 93       	push	r29
 312:	cf 93       	push	r28
 314:	00 d0       	rcall	.+0      	; 0x316 <LCDWriteInt+0xe>
 316:	00 d0       	rcall	.+0      	; 0x318 <LCDWriteInt+0x10>
 318:	0f 92       	push	r0
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	9c 01       	movw	r18, r24
 320:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 322:	fe 01       	movw	r30, r28
 324:	31 96       	adiw	r30, 0x01	; 1
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	df 01       	movw	r26, r30
 32a:	1d 92       	st	X+, r1
 32c:	8a 95       	dec	r24
 32e:	e9 f7       	brne	.-6      	; 0x32a <LCDWriteInt+0x22>
 330:	fe 01       	movw	r30, r28
 332:	35 96       	adiw	r30, 0x05	; 5
 334:	0d c0       	rjmp	.+26     	; 0x350 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 336:	c9 01       	movw	r24, r18
 338:	6a e0       	ldi	r22, 0x0A	; 10
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	0e 94 4b 03 	call	0x696	; 0x696 <__divmodhi4>
 340:	80 83       	st	Z, r24
	val=val/10;
 342:	c9 01       	movw	r24, r18
 344:	6a e0       	ldi	r22, 0x0A	; 10
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	0e 94 4b 03 	call	0x696	; 0x696 <__divmodhi4>
 34c:	9b 01       	movw	r18, r22
 34e:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 350:	21 15       	cp	r18, r1
 352:	31 05       	cpc	r19, r1
 354:	81 f7       	brne	.-32     	; 0x336 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 356:	bf ef       	ldi	r27, 0xFF	; 255
 358:	0f 3f       	cpi	r16, 0xFF	; 255
 35a:	1b 07       	cpc	r17, r27
 35c:	79 f4       	brne	.+30     	; 0x37c <LCDWriteInt+0x74>
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 362:	ae 01       	movw	r20, r28
 364:	4f 5f       	subi	r20, 0xFF	; 255
 366:	5f 4f       	sbci	r21, 0xFF	; 255
 368:	02 c0       	rjmp	.+4      	; 0x36e <LCDWriteInt+0x66>
 36a:	2f 5f       	subi	r18, 0xFF	; 255
 36c:	3f 4f       	sbci	r19, 0xFF	; 255
 36e:	fa 01       	movw	r30, r20
 370:	e2 0f       	add	r30, r18
 372:	f3 1f       	adc	r31, r19
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	c1 f3       	breq	.-16     	; 0x36a <LCDWriteInt+0x62>
 37a:	04 c0       	rjmp	.+8      	; 0x384 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 37c:	25 e0       	ldi	r18, 0x05	; 5
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	20 1b       	sub	r18, r16
 382:	31 0b       	sbc	r19, r17
 384:	7e 01       	movw	r14, r28
 386:	08 94       	sec
 388:	e1 1c       	adc	r14, r1
 38a:	f1 1c       	adc	r15, r1
 38c:	e2 0e       	add	r14, r18
 38e:	f3 1e       	adc	r15, r19
 390:	89 01       	movw	r16, r18
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 394:	f7 01       	movw	r30, r14
 396:	81 91       	ld	r24, Z+
 398:	7f 01       	movw	r14, r30
 39a:	80 5d       	subi	r24, 0xD0	; 208
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 3a2:	0f 5f       	subi	r16, 0xFF	; 255
 3a4:	1f 4f       	sbci	r17, 0xFF	; 255
 3a6:	05 30       	cpi	r16, 0x05	; 5
 3a8:	11 05       	cpc	r17, r1
 3aa:	a4 f3       	brlt	.-24     	; 0x394 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	cf 91       	pop	r28
 3b8:	df 91       	pop	r29
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	08 95       	ret

000003c4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 3c4:	df 93       	push	r29
 3c6:	cf 93       	push	r28
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <LCDGotoXY+0x6>
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <LCDGotoXY+0x8>
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	98 2f       	mov	r25, r24
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
    if(x<20)
 3d2:	84 31       	cpi	r24, 0x14	; 20
 3d4:	80 f4       	brcc	.+32     	; 0x3f6 <LCDGotoXY+0x32>
{
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
 3d6:	80 e8       	ldi	r24, 0x80	; 128
 3d8:	89 83       	std	Y+1, r24	; 0x01
 3da:	80 ec       	ldi	r24, 0xC0	; 192
 3dc:	8a 83       	std	Y+2, r24	; 0x02
 3de:	84 e9       	ldi	r24, 0x94	; 148
 3e0:	8b 83       	std	Y+3, r24	; 0x03
 3e2:	84 ed       	ldi	r24, 0xD4	; 212
 3e4:	8c 83       	std	Y+4, r24	; 0x04
    if(x<20)
    LCDCmd(line[y]+x);//if(y==0)x|=0x80,if(y==1)x|=0x80,if(y==2)x|=0x80,if(y==3)x|=0x80
 3e6:	fe 01       	movw	r30, r28
 3e8:	e6 0f       	add	r30, r22
 3ea:	f1 1d       	adc	r31, r1
 3ec:	81 81       	ldd	r24, Z+1	; 0x01
 3ee:	89 0f       	add	r24, r25
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDByte>

}
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	cf 91       	pop	r28
 400:	df 91       	pop	r29
 402:	08 95       	ret

00000404 <__cmpsf2>:
 404:	6c d0       	rcall	.+216    	; 0x4de <__fp_cmp>
 406:	08 f4       	brcc	.+2      	; 0x40a <__cmpsf2+0x6>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret

0000040c <__fixunssfsi>:
 40c:	94 d0       	rcall	.+296    	; 0x536 <__fp_splitA>
 40e:	88 f0       	brcs	.+34     	; 0x432 <__fixunssfsi+0x26>
 410:	9f 57       	subi	r25, 0x7F	; 127
 412:	90 f0       	brcs	.+36     	; 0x438 <__fixunssfsi+0x2c>
 414:	b9 2f       	mov	r27, r25
 416:	99 27       	eor	r25, r25
 418:	b7 51       	subi	r27, 0x17	; 23
 41a:	a0 f0       	brcs	.+40     	; 0x444 <__fixunssfsi+0x38>
 41c:	d1 f0       	breq	.+52     	; 0x452 <__fixunssfsi+0x46>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	88 1f       	adc	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	1a f0       	brmi	.+6      	; 0x42e <__fixunssfsi+0x22>
 428:	ba 95       	dec	r27
 42a:	c9 f7       	brne	.-14     	; 0x41e <__fixunssfsi+0x12>
 42c:	12 c0       	rjmp	.+36     	; 0x452 <__fixunssfsi+0x46>
 42e:	b1 30       	cpi	r27, 0x01	; 1
 430:	81 f0       	breq	.+32     	; 0x452 <__fixunssfsi+0x46>
 432:	9b d0       	rcall	.+310    	; 0x56a <__fp_zero>
 434:	b1 e0       	ldi	r27, 0x01	; 1
 436:	08 95       	ret
 438:	98 c0       	rjmp	.+304    	; 0x56a <__fp_zero>
 43a:	67 2f       	mov	r22, r23
 43c:	78 2f       	mov	r23, r24
 43e:	88 27       	eor	r24, r24
 440:	b8 5f       	subi	r27, 0xF8	; 248
 442:	39 f0       	breq	.+14     	; 0x452 <__fixunssfsi+0x46>
 444:	b9 3f       	cpi	r27, 0xF9	; 249
 446:	cc f3       	brlt	.-14     	; 0x43a <__fixunssfsi+0x2e>
 448:	86 95       	lsr	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	b3 95       	inc	r27
 450:	d9 f7       	brne	.-10     	; 0x448 <__fixunssfsi+0x3c>
 452:	3e f4       	brtc	.+14     	; 0x462 <__fixunssfsi+0x56>
 454:	90 95       	com	r25
 456:	80 95       	com	r24
 458:	70 95       	com	r23
 45a:	61 95       	neg	r22
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	08 95       	ret

00000464 <__floatunsisf>:
 464:	e8 94       	clt
 466:	09 c0       	rjmp	.+18     	; 0x47a <__floatsisf+0x12>

00000468 <__floatsisf>:
 468:	97 fb       	bst	r25, 7
 46a:	3e f4       	brtc	.+14     	; 0x47a <__floatsisf+0x12>
 46c:	90 95       	com	r25
 46e:	80 95       	com	r24
 470:	70 95       	com	r23
 472:	61 95       	neg	r22
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	99 23       	and	r25, r25
 47c:	a9 f0       	breq	.+42     	; 0x4a8 <__floatsisf+0x40>
 47e:	f9 2f       	mov	r31, r25
 480:	96 e9       	ldi	r25, 0x96	; 150
 482:	bb 27       	eor	r27, r27
 484:	93 95       	inc	r25
 486:	f6 95       	lsr	r31
 488:	87 95       	ror	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b7 95       	ror	r27
 490:	f1 11       	cpse	r31, r1
 492:	f8 cf       	rjmp	.-16     	; 0x484 <__floatsisf+0x1c>
 494:	fa f4       	brpl	.+62     	; 0x4d4 <__floatsisf+0x6c>
 496:	bb 0f       	add	r27, r27
 498:	11 f4       	brne	.+4      	; 0x49e <__floatsisf+0x36>
 49a:	60 ff       	sbrs	r22, 0
 49c:	1b c0       	rjmp	.+54     	; 0x4d4 <__floatsisf+0x6c>
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	16 c0       	rjmp	.+44     	; 0x4d4 <__floatsisf+0x6c>
 4a8:	88 23       	and	r24, r24
 4aa:	11 f0       	breq	.+4      	; 0x4b0 <__floatsisf+0x48>
 4ac:	96 e9       	ldi	r25, 0x96	; 150
 4ae:	11 c0       	rjmp	.+34     	; 0x4d2 <__floatsisf+0x6a>
 4b0:	77 23       	and	r23, r23
 4b2:	21 f0       	breq	.+8      	; 0x4bc <__floatsisf+0x54>
 4b4:	9e e8       	ldi	r25, 0x8E	; 142
 4b6:	87 2f       	mov	r24, r23
 4b8:	76 2f       	mov	r23, r22
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__floatsisf+0x5e>
 4bc:	66 23       	and	r22, r22
 4be:	71 f0       	breq	.+28     	; 0x4dc <__floatsisf+0x74>
 4c0:	96 e8       	ldi	r25, 0x86	; 134
 4c2:	86 2f       	mov	r24, r22
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	2a f0       	brmi	.+10     	; 0x4d4 <__floatsisf+0x6c>
 4ca:	9a 95       	dec	r25
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	da f7       	brpl	.-10     	; 0x4ca <__floatsisf+0x62>
 4d4:	88 0f       	add	r24, r24
 4d6:	96 95       	lsr	r25
 4d8:	87 95       	ror	r24
 4da:	97 f9       	bld	r25, 7
 4dc:	08 95       	ret

000004de <__fp_cmp>:
 4de:	99 0f       	add	r25, r25
 4e0:	00 08       	sbc	r0, r0
 4e2:	55 0f       	add	r21, r21
 4e4:	aa 0b       	sbc	r26, r26
 4e6:	e0 e8       	ldi	r30, 0x80	; 128
 4e8:	fe ef       	ldi	r31, 0xFE	; 254
 4ea:	16 16       	cp	r1, r22
 4ec:	17 06       	cpc	r1, r23
 4ee:	e8 07       	cpc	r30, r24
 4f0:	f9 07       	cpc	r31, r25
 4f2:	c0 f0       	brcs	.+48     	; 0x524 <__fp_cmp+0x46>
 4f4:	12 16       	cp	r1, r18
 4f6:	13 06       	cpc	r1, r19
 4f8:	e4 07       	cpc	r30, r20
 4fa:	f5 07       	cpc	r31, r21
 4fc:	98 f0       	brcs	.+38     	; 0x524 <__fp_cmp+0x46>
 4fe:	62 1b       	sub	r22, r18
 500:	73 0b       	sbc	r23, r19
 502:	84 0b       	sbc	r24, r20
 504:	95 0b       	sbc	r25, r21
 506:	39 f4       	brne	.+14     	; 0x516 <__fp_cmp+0x38>
 508:	0a 26       	eor	r0, r26
 50a:	61 f0       	breq	.+24     	; 0x524 <__fp_cmp+0x46>
 50c:	23 2b       	or	r18, r19
 50e:	24 2b       	or	r18, r20
 510:	25 2b       	or	r18, r21
 512:	21 f4       	brne	.+8      	; 0x51c <__fp_cmp+0x3e>
 514:	08 95       	ret
 516:	0a 26       	eor	r0, r26
 518:	09 f4       	brne	.+2      	; 0x51c <__fp_cmp+0x3e>
 51a:	a1 40       	sbci	r26, 0x01	; 1
 51c:	a6 95       	lsr	r26
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	81 1d       	adc	r24, r1
 522:	81 1d       	adc	r24, r1
 524:	08 95       	ret

00000526 <__fp_split3>:
 526:	57 fd       	sbrc	r21, 7
 528:	90 58       	subi	r25, 0x80	; 128
 52a:	44 0f       	add	r20, r20
 52c:	55 1f       	adc	r21, r21
 52e:	59 f0       	breq	.+22     	; 0x546 <__fp_splitA+0x10>
 530:	5f 3f       	cpi	r21, 0xFF	; 255
 532:	71 f0       	breq	.+28     	; 0x550 <__fp_splitA+0x1a>
 534:	47 95       	ror	r20

00000536 <__fp_splitA>:
 536:	88 0f       	add	r24, r24
 538:	97 fb       	bst	r25, 7
 53a:	99 1f       	adc	r25, r25
 53c:	61 f0       	breq	.+24     	; 0x556 <__fp_splitA+0x20>
 53e:	9f 3f       	cpi	r25, 0xFF	; 255
 540:	79 f0       	breq	.+30     	; 0x560 <__fp_splitA+0x2a>
 542:	87 95       	ror	r24
 544:	08 95       	ret
 546:	12 16       	cp	r1, r18
 548:	13 06       	cpc	r1, r19
 54a:	14 06       	cpc	r1, r20
 54c:	55 1f       	adc	r21, r21
 54e:	f2 cf       	rjmp	.-28     	; 0x534 <__fp_split3+0xe>
 550:	46 95       	lsr	r20
 552:	f1 df       	rcall	.-30     	; 0x536 <__fp_splitA>
 554:	08 c0       	rjmp	.+16     	; 0x566 <__fp_splitA+0x30>
 556:	16 16       	cp	r1, r22
 558:	17 06       	cpc	r1, r23
 55a:	18 06       	cpc	r1, r24
 55c:	99 1f       	adc	r25, r25
 55e:	f1 cf       	rjmp	.-30     	; 0x542 <__fp_splitA+0xc>
 560:	86 95       	lsr	r24
 562:	71 05       	cpc	r23, r1
 564:	61 05       	cpc	r22, r1
 566:	08 94       	sec
 568:	08 95       	ret

0000056a <__fp_zero>:
 56a:	e8 94       	clt

0000056c <__fp_szero>:
 56c:	bb 27       	eor	r27, r27
 56e:	66 27       	eor	r22, r22
 570:	77 27       	eor	r23, r23
 572:	cb 01       	movw	r24, r22
 574:	97 f9       	bld	r25, 7
 576:	08 95       	ret

00000578 <__gesf2>:
 578:	b2 df       	rcall	.-156    	; 0x4de <__fp_cmp>
 57a:	08 f4       	brcc	.+2      	; 0x57e <__gesf2+0x6>
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	08 95       	ret

00000580 <__mulsf3>:
 580:	0b d0       	rcall	.+22     	; 0x598 <__mulsf3x>
 582:	78 c0       	rjmp	.+240    	; 0x674 <__fp_round>
 584:	69 d0       	rcall	.+210    	; 0x658 <__fp_pscA>
 586:	28 f0       	brcs	.+10     	; 0x592 <__mulsf3+0x12>
 588:	6e d0       	rcall	.+220    	; 0x666 <__fp_pscB>
 58a:	18 f0       	brcs	.+6      	; 0x592 <__mulsf3+0x12>
 58c:	95 23       	and	r25, r21
 58e:	09 f0       	breq	.+2      	; 0x592 <__mulsf3+0x12>
 590:	5a c0       	rjmp	.+180    	; 0x646 <__fp_inf>
 592:	5f c0       	rjmp	.+190    	; 0x652 <__fp_nan>
 594:	11 24       	eor	r1, r1
 596:	ea cf       	rjmp	.-44     	; 0x56c <__fp_szero>

00000598 <__mulsf3x>:
 598:	c6 df       	rcall	.-116    	; 0x526 <__fp_split3>
 59a:	a0 f3       	brcs	.-24     	; 0x584 <__mulsf3+0x4>

0000059c <__mulsf3_pse>:
 59c:	95 9f       	mul	r25, r21
 59e:	d1 f3       	breq	.-12     	; 0x594 <__mulsf3+0x14>
 5a0:	95 0f       	add	r25, r21
 5a2:	50 e0       	ldi	r21, 0x00	; 0
 5a4:	55 1f       	adc	r21, r21
 5a6:	62 9f       	mul	r22, r18
 5a8:	f0 01       	movw	r30, r0
 5aa:	72 9f       	mul	r23, r18
 5ac:	bb 27       	eor	r27, r27
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	63 9f       	mul	r22, r19
 5b4:	aa 27       	eor	r26, r26
 5b6:	f0 0d       	add	r31, r0
 5b8:	b1 1d       	adc	r27, r1
 5ba:	aa 1f       	adc	r26, r26
 5bc:	64 9f       	mul	r22, r20
 5be:	66 27       	eor	r22, r22
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	66 1f       	adc	r22, r22
 5c6:	82 9f       	mul	r24, r18
 5c8:	22 27       	eor	r18, r18
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	73 9f       	mul	r23, r19
 5d2:	b0 0d       	add	r27, r0
 5d4:	a1 1d       	adc	r26, r1
 5d6:	62 1f       	adc	r22, r18
 5d8:	83 9f       	mul	r24, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	22 1f       	adc	r18, r18
 5e0:	74 9f       	mul	r23, r20
 5e2:	33 27       	eor	r19, r19
 5e4:	a0 0d       	add	r26, r0
 5e6:	61 1d       	adc	r22, r1
 5e8:	23 1f       	adc	r18, r19
 5ea:	84 9f       	mul	r24, r20
 5ec:	60 0d       	add	r22, r0
 5ee:	21 1d       	adc	r18, r1
 5f0:	82 2f       	mov	r24, r18
 5f2:	76 2f       	mov	r23, r22
 5f4:	6a 2f       	mov	r22, r26
 5f6:	11 24       	eor	r1, r1
 5f8:	9f 57       	subi	r25, 0x7F	; 127
 5fa:	50 40       	sbci	r21, 0x00	; 0
 5fc:	8a f0       	brmi	.+34     	; 0x620 <__mulsf3_pse+0x84>
 5fe:	e1 f0       	breq	.+56     	; 0x638 <__mulsf3_pse+0x9c>
 600:	88 23       	and	r24, r24
 602:	4a f0       	brmi	.+18     	; 0x616 <__mulsf3_pse+0x7a>
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	bb 1f       	adc	r27, r27
 60a:	66 1f       	adc	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	91 50       	subi	r25, 0x01	; 1
 612:	50 40       	sbci	r21, 0x00	; 0
 614:	a9 f7       	brne	.-22     	; 0x600 <__mulsf3_pse+0x64>
 616:	9e 3f       	cpi	r25, 0xFE	; 254
 618:	51 05       	cpc	r21, r1
 61a:	70 f0       	brcs	.+28     	; 0x638 <__mulsf3_pse+0x9c>
 61c:	14 c0       	rjmp	.+40     	; 0x646 <__fp_inf>
 61e:	a6 cf       	rjmp	.-180    	; 0x56c <__fp_szero>
 620:	5f 3f       	cpi	r21, 0xFF	; 255
 622:	ec f3       	brlt	.-6      	; 0x61e <__mulsf3_pse+0x82>
 624:	98 3e       	cpi	r25, 0xE8	; 232
 626:	dc f3       	brlt	.-10     	; 0x61e <__mulsf3_pse+0x82>
 628:	86 95       	lsr	r24
 62a:	77 95       	ror	r23
 62c:	67 95       	ror	r22
 62e:	b7 95       	ror	r27
 630:	f7 95       	ror	r31
 632:	e7 95       	ror	r30
 634:	9f 5f       	subi	r25, 0xFF	; 255
 636:	c1 f7       	brne	.-16     	; 0x628 <__mulsf3_pse+0x8c>
 638:	fe 2b       	or	r31, r30
 63a:	88 0f       	add	r24, r24
 63c:	91 1d       	adc	r25, r1
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <__fp_inf>:
 646:	97 f9       	bld	r25, 7
 648:	9f 67       	ori	r25, 0x7F	; 127
 64a:	80 e8       	ldi	r24, 0x80	; 128
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	08 95       	ret

00000652 <__fp_nan>:
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	80 ec       	ldi	r24, 0xC0	; 192
 656:	08 95       	ret

00000658 <__fp_pscA>:
 658:	00 24       	eor	r0, r0
 65a:	0a 94       	dec	r0
 65c:	16 16       	cp	r1, r22
 65e:	17 06       	cpc	r1, r23
 660:	18 06       	cpc	r1, r24
 662:	09 06       	cpc	r0, r25
 664:	08 95       	ret

00000666 <__fp_pscB>:
 666:	00 24       	eor	r0, r0
 668:	0a 94       	dec	r0
 66a:	12 16       	cp	r1, r18
 66c:	13 06       	cpc	r1, r19
 66e:	14 06       	cpc	r1, r20
 670:	05 06       	cpc	r0, r21
 672:	08 95       	ret

00000674 <__fp_round>:
 674:	09 2e       	mov	r0, r25
 676:	03 94       	inc	r0
 678:	00 0c       	add	r0, r0
 67a:	11 f4       	brne	.+4      	; 0x680 <__fp_round+0xc>
 67c:	88 23       	and	r24, r24
 67e:	52 f0       	brmi	.+20     	; 0x694 <__fp_round+0x20>
 680:	bb 0f       	add	r27, r27
 682:	40 f4       	brcc	.+16     	; 0x694 <__fp_round+0x20>
 684:	bf 2b       	or	r27, r31
 686:	11 f4       	brne	.+4      	; 0x68c <__fp_round+0x18>
 688:	60 ff       	sbrs	r22, 0
 68a:	04 c0       	rjmp	.+8      	; 0x694 <__fp_round+0x20>
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	8f 4f       	sbci	r24, 0xFF	; 255
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	08 95       	ret

00000696 <__divmodhi4>:
 696:	97 fb       	bst	r25, 7
 698:	09 2e       	mov	r0, r25
 69a:	07 26       	eor	r0, r23
 69c:	0a d0       	rcall	.+20     	; 0x6b2 <__divmodhi4_neg1>
 69e:	77 fd       	sbrc	r23, 7
 6a0:	04 d0       	rcall	.+8      	; 0x6aa <__divmodhi4_neg2>
 6a2:	0c d0       	rcall	.+24     	; 0x6bc <__udivmodhi4>
 6a4:	06 d0       	rcall	.+12     	; 0x6b2 <__divmodhi4_neg1>
 6a6:	00 20       	and	r0, r0
 6a8:	1a f4       	brpl	.+6      	; 0x6b0 <__divmodhi4_exit>

000006aa <__divmodhi4_neg2>:
 6aa:	70 95       	com	r23
 6ac:	61 95       	neg	r22
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255

000006b0 <__divmodhi4_exit>:
 6b0:	08 95       	ret

000006b2 <__divmodhi4_neg1>:
 6b2:	f6 f7       	brtc	.-4      	; 0x6b0 <__divmodhi4_exit>
 6b4:	90 95       	com	r25
 6b6:	81 95       	neg	r24
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	08 95       	ret

000006bc <__udivmodhi4>:
 6bc:	aa 1b       	sub	r26, r26
 6be:	bb 1b       	sub	r27, r27
 6c0:	51 e1       	ldi	r21, 0x11	; 17
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <__udivmodhi4_ep>

000006c4 <__udivmodhi4_loop>:
 6c4:	aa 1f       	adc	r26, r26
 6c6:	bb 1f       	adc	r27, r27
 6c8:	a6 17       	cp	r26, r22
 6ca:	b7 07       	cpc	r27, r23
 6cc:	10 f0       	brcs	.+4      	; 0x6d2 <__udivmodhi4_ep>
 6ce:	a6 1b       	sub	r26, r22
 6d0:	b7 0b       	sbc	r27, r23

000006d2 <__udivmodhi4_ep>:
 6d2:	88 1f       	adc	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	5a 95       	dec	r21
 6d8:	a9 f7       	brne	.-22     	; 0x6c4 <__udivmodhi4_loop>
 6da:	80 95       	com	r24
 6dc:	90 95       	com	r25
 6de:	bc 01       	movw	r22, r24
 6e0:	cd 01       	movw	r24, r26
 6e2:	08 95       	ret

000006e4 <_exit>:
 6e4:	f8 94       	cli

000006e6 <__stop_program>:
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <__stop_program>
