
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000a1  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000088e  00000000  00000000  000007d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000272  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000005ba  00000000  00000000  000012d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000178  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000447  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00001eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 03 	jmp	0x698	; 0x698 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include "lcd.h"



int main(){
  6c:	1f 93       	push	r17


DDRA = DDRA & 0b00000000;
  6e:	8a b3       	in	r24, 0x1a	; 26
  70:	1a ba       	out	0x1a, r1	; 26
DDRD = DDRD | 0b00001111;
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8f 60       	ori	r24, 0x0F	; 15
  76:	81 bb       	out	0x11, r24	; 17
LCDInit(0);
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	0e 94 ac 00 	call	0x158	; 0x158 <LCDInit>

	
	LCDClear();
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
char a = PINA;
  86:	19 b3       	in	r17, 0x19	; 25
	LCDWriteStringXY(2,0,a);
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	0e 94 bc 01 	call	0x378	; 0x378 <LCDGotoXY>
  90:	81 2f       	mov	r24, r17
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDWriteString>
  98:	80 ed       	ldi	r24, 0xD0	; 208
  9a:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	28 ec       	ldi	r18, 0xC8	; 200
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0x34>
	
	_delay_ms(200);
    

  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	1f 91       	pop	r17
  b0:	08 95       	ret

000000b2 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  b2:	81 b3       	in	r24, 0x11	; 17
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();		//Read mode
  b8:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
  ba:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCDBusyLoop+0xc>


	do
	{

		SET_E();
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	32 e0       	ldi	r19, 0x02	; 2
  c6:	94 9a       	sbi	0x12, 4	; 18
  c8:	82 2f       	mov	r24, r18
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
  ce:	80 b3       	in	r24, 0x10	; 16
		status=status<<4;
  d0:	82 95       	swap	r24
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	92 2f       	mov	r25, r18
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  da:	94 98       	cbi	0x12, 4	; 18
  dc:	93 2f       	mov	r25, r19
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
  e2:	94 9a       	sbi	0x12, 4	; 18
  e4:	92 2f       	mov	r25, r18
  e6:	9a 95       	dec	r25
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
  ea:	90 b3       	in	r25, 0x10	; 16
  ec:	92 2f       	mov	r25, r18
  ee:	9a 95       	dec	r25
  f0:	f1 f7       	brne	.-4      	; 0xee <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  f2:	94 98       	cbi	0x12, 4	; 18
  f4:	93 2f       	mov	r25, r19
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
  fa:	87 fd       	sbrc	r24, 7
  fc:	e4 cf       	rjmp	.-56     	; 0xc6 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
  fe:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 100:	81 b3       	in	r24, 0x11	; 17
 102:	8f 60       	ori	r24, 0x0F	; 15
 104:	81 bb       	out	0x11, r24	; 17

}
 106:	08 95       	ret

00000108 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 108:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 10a:	66 23       	and	r22, r22
 10c:	11 f4       	brne	.+4      	; 0x112 <LCDByte+0xa>
	CLEAR_RS();
 10e:	96 98       	cbi	0x12, 6	; 18
 110:	01 c0       	rjmp	.+2      	; 0x114 <LCDByte+0xc>
else
	SET_RS();
 112:	96 9a       	sbi	0x12, 6	; 18
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	8a 95       	dec	r24
 118:	f1 f7       	brne	.-4      	; 0x116 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 11a:	94 9a       	sbi	0x12, 4	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	92 2f       	mov	r25, r18
 120:	92 95       	swap	r25
 122:	9f 70       	andi	r25, 0x0F	; 15
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 128:	92 bb       	out	0x12, r25	; 18
 12a:	92 e0       	ldi	r25, 0x02	; 2
 12c:	89 2f       	mov	r24, r25
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 132:	94 98       	cbi	0x12, 4	; 18
 134:	89 2f       	mov	r24, r25
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 13a:	94 9a       	sbi	0x12, 4	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	2f 70       	andi	r18, 0x0F	; 15
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 144:	82 bb       	out	0x12, r24	; 18
 146:	89 2f       	mov	r24, r25
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 14c:	94 98       	cbi	0x12, 4	; 18
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 152:	0e 94 59 00 	call	0xb2	; 0xb2 <LCDBusyLoop>
}
 156:	08 95       	ret

00000158 <LCDInit>:
	LCD_DATA_DDR|=0x0F;

}

void LCDInit(uint8_t style)
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15e:	80 e6       	ldi	r24, 0x60	; 96
 160:	9a ee       	ldi	r25, 0xEA	; 234
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDInit+0xa>

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 166:	81 b3       	in	r24, 0x11	; 17
 168:	8f 60       	ori	r24, 0x0F	; 15
 16a:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);
 16c:	8c 9a       	sbi	0x11, 4	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 16e:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 170:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 172:	82 b3       	in	r24, 0x12	; 18
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 178:	94 98       	cbi	0x12, 4	; 18
	CLEAR_RW();
 17a:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 17c:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 17e:	85 e8       	ldi	r24, 0x85	; 133
 180:	98 2f       	mov	r25, r24
 182:	9a 95       	dec	r25
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDInit+0x2a>

	//Set 4-bit mode
	_delay_us(50);	//tAS

	SET_E();
 186:	94 9a       	sbi	0x12, 4	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 188:	91 9a       	sbi	0x12, 1	; 18
 18a:	98 2f       	mov	r25, r24
 18c:	9a 95       	dec	r25
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCDInit+0x34>
	_delay_us(50);
	CLEAR_E();
 190:	94 98       	cbi	0x12, 4	; 18
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <LCDInit+0x3a>
	_delay_us(50);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 196:	0e 94 59 00 	call	0xb2	; 0xb2 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 19a:	81 2f       	mov	r24, r17
 19c:	8c 60       	ori	r24, 0x0C	; 12
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a4:	08 ec       	ldi	r16, 0xC8	; 200
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	c8 01       	movw	r24, r16
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDInit+0x52>
	_delay_us(100);
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1ae:	88 e2       	ldi	r24, 0x28	; 40
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
 1b6:	c8 01       	movw	r24, r16
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCDInit+0x60>
	_delay_us(100);
}
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
	msg++;
 1d0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	c9 f7       	brne	.-14     	; 0x1ca <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <LCDWriteString_sliding>:
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
 1de:	4f 92       	push	r4
 1e0:	5f 92       	push	r5
 1e2:	6f 92       	push	r6
 1e4:	7f 92       	push	r7
 1e6:	8f 92       	push	r8
 1e8:	9f 92       	push	r9
 1ea:	af 92       	push	r10
 1ec:	bf 92       	push	r11
 1ee:	cf 92       	push	r12
 1f0:	df 92       	push	r13
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	eb 01       	movw	r28, r22
  while (*strng>0)
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
 200:	3c 01       	movw	r6, r24
 202:	88 24       	eor	r8, r8
 204:	99 24       	eor	r9, r9
 206:	88 ec       	ldi	r24, 0xC8	; 200
 208:	48 2e       	mov	r4, r24
 20a:	51 2c       	mov	r5, r1
 20c:	42 c0       	rjmp	.+132    	; 0x292 <LCDWriteString_sliding+0xb4>
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
  {
	  LCDData(*strng++);
 20e:	21 96       	adiw	r28, 0x01	; 1
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
	  _delay_ms(delay_ms);
 216:	c4 01       	movw	r24, r8
 218:	b3 01       	movw	r22, r6
 21a:	0e 94 0c 02 	call	0x418	; 0x418 <__floatunsisf>
 21e:	5b 01       	movw	r10, r22
 220:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	4a ef       	ldi	r20, 0xFA	; 250
 228:	54 e4       	ldi	r21, 0x44	; 68
 22a:	0e 94 9a 02 	call	0x534	; 0x534 <__mulsf3>
 22e:	7b 01       	movw	r14, r22
 230:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e8       	ldi	r20, 0x80	; 128
 238:	5f e3       	ldi	r21, 0x3F	; 63
 23a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__cmpsf2>
 23e:	88 23       	and	r24, r24
 240:	1c f4       	brge	.+6      	; 0x248 <LCDWriteString_sliding+0x6a>
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	22 c0       	rjmp	.+68     	; 0x28c <LCDWriteString_sliding+0xae>
		__ticks = 1;
	else if (__tmp > 65535)
 248:	c8 01       	movw	r24, r16
 24a:	b7 01       	movw	r22, r14
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	3f ef       	ldi	r19, 0xFF	; 255
 250:	4f e7       	ldi	r20, 0x7F	; 127
 252:	57 e4       	ldi	r21, 0x47	; 71
 254:	0e 94 96 02 	call	0x52c	; 0x52c <__gesf2>
 258:	18 16       	cp	r1, r24
 25a:	a4 f4       	brge	.+40     	; 0x284 <LCDWriteString_sliding+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 25c:	c6 01       	movw	r24, r12
 25e:	b5 01       	movw	r22, r10
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e2       	ldi	r20, 0x20	; 32
 266:	51 e4       	ldi	r21, 0x41	; 65
 268:	0e 94 9a 02 	call	0x534	; 0x534 <__mulsf3>
 26c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__fixunssfsi>
 270:	05 c0       	rjmp	.+10     	; 0x27c <LCDWriteString_sliding+0x9e>
 272:	c2 01       	movw	r24, r4
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCDWriteString_sliding+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 278:	61 50       	subi	r22, 0x01	; 1
 27a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27c:	61 15       	cp	r22, r1
 27e:	71 05       	cpc	r23, r1
 280:	c1 f7       	brne	.-16     	; 0x272 <LCDWriteString_sliding+0x94>
 282:	07 c0       	rjmp	.+14     	; 0x292 <LCDWriteString_sliding+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 284:	c8 01       	movw	r24, r16
 286:	b7 01       	movw	r22, r14
 288:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__fixunssfsi>
 28c:	cb 01       	movw	r24, r22
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCDWriteString_sliding+0xb0>
 }
}
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
 292:	88 81       	ld	r24, Y
 294:	88 23       	and	r24, r24
 296:	09 f0       	breq	.+2      	; 0x29a <LCDWriteString_sliding+0xbc>
 298:	ba cf       	rjmp	.-140    	; 0x20e <LCDWriteString_sliding+0x30>
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
  }
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	bf 90       	pop	r11
 2ac:	af 90       	pop	r10
 2ae:	9f 90       	pop	r9
 2b0:	8f 90       	pop	r8
 2b2:	7f 90       	pop	r7
 2b4:	6f 90       	pop	r6
 2b6:	5f 90       	pop	r5
 2b8:	4f 90       	pop	r4
 2ba:	08 95       	ret

000002bc <LCDWriteInt>:
//-----------------------------------------------------
void LCDWriteInt(int val,unsigned int field_length)
{
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <LCDWriteInt+0xe>
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <LCDWriteInt+0x10>
 2cc:	0f 92       	push	r0
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	9c 01       	movw	r18, r24
 2d4:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2d6:	fe 01       	movw	r30, r28
 2d8:	31 96       	adiw	r30, 0x01	; 1
 2da:	85 e0       	ldi	r24, 0x05	; 5
 2dc:	df 01       	movw	r26, r30
 2de:	1d 92       	st	X+, r1
 2e0:	8a 95       	dec	r24
 2e2:	e9 f7       	brne	.-6      	; 0x2de <LCDWriteInt+0x22>
 2e4:	fe 01       	movw	r30, r28
 2e6:	35 96       	adiw	r30, 0x05	; 5
 2e8:	0d c0       	rjmp	.+26     	; 0x304 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 2ea:	c9 01       	movw	r24, r18
 2ec:	6a e0       	ldi	r22, 0x0A	; 10
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	0e 94 25 03 	call	0x64a	; 0x64a <__divmodhi4>
 2f4:	80 83       	st	Z, r24
	val=val/10;
 2f6:	c9 01       	movw	r24, r18
 2f8:	6a e0       	ldi	r22, 0x0A	; 10
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	0e 94 25 03 	call	0x64a	; 0x64a <__divmodhi4>
 300:	9b 01       	movw	r18, r22
 302:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 304:	21 15       	cp	r18, r1
 306:	31 05       	cpc	r19, r1
 308:	81 f7       	brne	.-32     	; 0x2ea <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 30a:	bf ef       	ldi	r27, 0xFF	; 255
 30c:	0f 3f       	cpi	r16, 0xFF	; 255
 30e:	1b 07       	cpc	r17, r27
 310:	79 f4       	brne	.+30     	; 0x330 <LCDWriteInt+0x74>
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 316:	ae 01       	movw	r20, r28
 318:	4f 5f       	subi	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	02 c0       	rjmp	.+4      	; 0x322 <LCDWriteInt+0x66>
 31e:	2f 5f       	subi	r18, 0xFF	; 255
 320:	3f 4f       	sbci	r19, 0xFF	; 255
 322:	fa 01       	movw	r30, r20
 324:	e2 0f       	add	r30, r18
 326:	f3 1f       	adc	r31, r19
 328:	80 81       	ld	r24, Z
 32a:	88 23       	and	r24, r24
 32c:	c1 f3       	breq	.-16     	; 0x31e <LCDWriteInt+0x62>
 32e:	04 c0       	rjmp	.+8      	; 0x338 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 330:	25 e0       	ldi	r18, 0x05	; 5
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	20 1b       	sub	r18, r16
 336:	31 0b       	sbc	r19, r17
 338:	7e 01       	movw	r14, r28
 33a:	08 94       	sec
 33c:	e1 1c       	adc	r14, r1
 33e:	f1 1c       	adc	r15, r1
 340:	e2 0e       	add	r14, r18
 342:	f3 1e       	adc	r15, r19
 344:	89 01       	movw	r16, r18
 346:	09 c0       	rjmp	.+18     	; 0x35a <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 348:	f7 01       	movw	r30, r14
 34a:	81 91       	ld	r24, Z+
 34c:	7f 01       	movw	r14, r30
 34e:	80 5d       	subi	r24, 0xD0	; 208
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 356:	0f 5f       	subi	r16, 0xFF	; 255
 358:	1f 4f       	sbci	r17, 0xFF	; 255
 35a:	05 30       	cpi	r16, 0x05	; 5
 35c:	11 05       	cpc	r17, r1
 35e:	a4 f3       	brlt	.-24     	; 0x348 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	cf 91       	pop	r28
 36c:	df 91       	pop	r29
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	08 95       	ret

00000378 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	00 d0       	rcall	.+0      	; 0x37e <LCDGotoXY+0x6>
 37e:	00 d0       	rcall	.+0      	; 0x380 <LCDGotoXY+0x8>
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	98 2f       	mov	r25, r24
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
    if(x<20)
 386:	84 31       	cpi	r24, 0x14	; 20
 388:	80 f4       	brcc	.+32     	; 0x3aa <LCDGotoXY+0x32>
{
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	89 83       	std	Y+1, r24	; 0x01
 38e:	80 ec       	ldi	r24, 0xC0	; 192
 390:	8a 83       	std	Y+2, r24	; 0x02
 392:	84 e9       	ldi	r24, 0x94	; 148
 394:	8b 83       	std	Y+3, r24	; 0x03
 396:	84 ed       	ldi	r24, 0xD4	; 212
 398:	8c 83       	std	Y+4, r24	; 0x04
    if(x<20)
    LCDCmd(line[y]+x);//if(y==0)x|=0x80,if(y==1)x|=0x80,if(y==2)x|=0x80,if(y==3)x|=0x80
 39a:	fe 01       	movw	r30, r28
 39c:	e6 0f       	add	r30, r22
 39e:	f1 1d       	adc	r31, r1
 3a0:	81 81       	ldd	r24, Z+1	; 0x01
 3a2:	89 0f       	add	r24, r25
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	0e 94 84 00 	call	0x108	; 0x108 <LCDByte>

}
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	cf 91       	pop	r28
 3b4:	df 91       	pop	r29
 3b6:	08 95       	ret

000003b8 <__cmpsf2>:
 3b8:	6c d0       	rcall	.+216    	; 0x492 <__fp_cmp>
 3ba:	08 f4       	brcc	.+2      	; 0x3be <__cmpsf2+0x6>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	08 95       	ret

000003c0 <__fixunssfsi>:
 3c0:	94 d0       	rcall	.+296    	; 0x4ea <__fp_splitA>
 3c2:	88 f0       	brcs	.+34     	; 0x3e6 <__fixunssfsi+0x26>
 3c4:	9f 57       	subi	r25, 0x7F	; 127
 3c6:	90 f0       	brcs	.+36     	; 0x3ec <__fixunssfsi+0x2c>
 3c8:	b9 2f       	mov	r27, r25
 3ca:	99 27       	eor	r25, r25
 3cc:	b7 51       	subi	r27, 0x17	; 23
 3ce:	a0 f0       	brcs	.+40     	; 0x3f8 <__fixunssfsi+0x38>
 3d0:	d1 f0       	breq	.+52     	; 0x406 <__fixunssfsi+0x46>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	1a f0       	brmi	.+6      	; 0x3e2 <__fixunssfsi+0x22>
 3dc:	ba 95       	dec	r27
 3de:	c9 f7       	brne	.-14     	; 0x3d2 <__fixunssfsi+0x12>
 3e0:	12 c0       	rjmp	.+36     	; 0x406 <__fixunssfsi+0x46>
 3e2:	b1 30       	cpi	r27, 0x01	; 1
 3e4:	81 f0       	breq	.+32     	; 0x406 <__fixunssfsi+0x46>
 3e6:	9b d0       	rcall	.+310    	; 0x51e <__fp_zero>
 3e8:	b1 e0       	ldi	r27, 0x01	; 1
 3ea:	08 95       	ret
 3ec:	98 c0       	rjmp	.+304    	; 0x51e <__fp_zero>
 3ee:	67 2f       	mov	r22, r23
 3f0:	78 2f       	mov	r23, r24
 3f2:	88 27       	eor	r24, r24
 3f4:	b8 5f       	subi	r27, 0xF8	; 248
 3f6:	39 f0       	breq	.+14     	; 0x406 <__fixunssfsi+0x46>
 3f8:	b9 3f       	cpi	r27, 0xF9	; 249
 3fa:	cc f3       	brlt	.-14     	; 0x3ee <__fixunssfsi+0x2e>
 3fc:	86 95       	lsr	r24
 3fe:	77 95       	ror	r23
 400:	67 95       	ror	r22
 402:	b3 95       	inc	r27
 404:	d9 f7       	brne	.-10     	; 0x3fc <__fixunssfsi+0x3c>
 406:	3e f4       	brtc	.+14     	; 0x416 <__fixunssfsi+0x56>
 408:	90 95       	com	r25
 40a:	80 95       	com	r24
 40c:	70 95       	com	r23
 40e:	61 95       	neg	r22
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	8f 4f       	sbci	r24, 0xFF	; 255
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	08 95       	ret

00000418 <__floatunsisf>:
 418:	e8 94       	clt
 41a:	09 c0       	rjmp	.+18     	; 0x42e <__floatsisf+0x12>

0000041c <__floatsisf>:
 41c:	97 fb       	bst	r25, 7
 41e:	3e f4       	brtc	.+14     	; 0x42e <__floatsisf+0x12>
 420:	90 95       	com	r25
 422:	80 95       	com	r24
 424:	70 95       	com	r23
 426:	61 95       	neg	r22
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	8f 4f       	sbci	r24, 0xFF	; 255
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	99 23       	and	r25, r25
 430:	a9 f0       	breq	.+42     	; 0x45c <__floatsisf+0x40>
 432:	f9 2f       	mov	r31, r25
 434:	96 e9       	ldi	r25, 0x96	; 150
 436:	bb 27       	eor	r27, r27
 438:	93 95       	inc	r25
 43a:	f6 95       	lsr	r31
 43c:	87 95       	ror	r24
 43e:	77 95       	ror	r23
 440:	67 95       	ror	r22
 442:	b7 95       	ror	r27
 444:	f1 11       	cpse	r31, r1
 446:	f8 cf       	rjmp	.-16     	; 0x438 <__floatsisf+0x1c>
 448:	fa f4       	brpl	.+62     	; 0x488 <__floatsisf+0x6c>
 44a:	bb 0f       	add	r27, r27
 44c:	11 f4       	brne	.+4      	; 0x452 <__floatsisf+0x36>
 44e:	60 ff       	sbrs	r22, 0
 450:	1b c0       	rjmp	.+54     	; 0x488 <__floatsisf+0x6c>
 452:	6f 5f       	subi	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	16 c0       	rjmp	.+44     	; 0x488 <__floatsisf+0x6c>
 45c:	88 23       	and	r24, r24
 45e:	11 f0       	breq	.+4      	; 0x464 <__floatsisf+0x48>
 460:	96 e9       	ldi	r25, 0x96	; 150
 462:	11 c0       	rjmp	.+34     	; 0x486 <__floatsisf+0x6a>
 464:	77 23       	and	r23, r23
 466:	21 f0       	breq	.+8      	; 0x470 <__floatsisf+0x54>
 468:	9e e8       	ldi	r25, 0x8E	; 142
 46a:	87 2f       	mov	r24, r23
 46c:	76 2f       	mov	r23, r22
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__floatsisf+0x5e>
 470:	66 23       	and	r22, r22
 472:	71 f0       	breq	.+28     	; 0x490 <__floatsisf+0x74>
 474:	96 e8       	ldi	r25, 0x86	; 134
 476:	86 2f       	mov	r24, r22
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	2a f0       	brmi	.+10     	; 0x488 <__floatsisf+0x6c>
 47e:	9a 95       	dec	r25
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	da f7       	brpl	.-10     	; 0x47e <__floatsisf+0x62>
 488:	88 0f       	add	r24, r24
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	97 f9       	bld	r25, 7
 490:	08 95       	ret

00000492 <__fp_cmp>:
 492:	99 0f       	add	r25, r25
 494:	00 08       	sbc	r0, r0
 496:	55 0f       	add	r21, r21
 498:	aa 0b       	sbc	r26, r26
 49a:	e0 e8       	ldi	r30, 0x80	; 128
 49c:	fe ef       	ldi	r31, 0xFE	; 254
 49e:	16 16       	cp	r1, r22
 4a0:	17 06       	cpc	r1, r23
 4a2:	e8 07       	cpc	r30, r24
 4a4:	f9 07       	cpc	r31, r25
 4a6:	c0 f0       	brcs	.+48     	; 0x4d8 <__fp_cmp+0x46>
 4a8:	12 16       	cp	r1, r18
 4aa:	13 06       	cpc	r1, r19
 4ac:	e4 07       	cpc	r30, r20
 4ae:	f5 07       	cpc	r31, r21
 4b0:	98 f0       	brcs	.+38     	; 0x4d8 <__fp_cmp+0x46>
 4b2:	62 1b       	sub	r22, r18
 4b4:	73 0b       	sbc	r23, r19
 4b6:	84 0b       	sbc	r24, r20
 4b8:	95 0b       	sbc	r25, r21
 4ba:	39 f4       	brne	.+14     	; 0x4ca <__fp_cmp+0x38>
 4bc:	0a 26       	eor	r0, r26
 4be:	61 f0       	breq	.+24     	; 0x4d8 <__fp_cmp+0x46>
 4c0:	23 2b       	or	r18, r19
 4c2:	24 2b       	or	r18, r20
 4c4:	25 2b       	or	r18, r21
 4c6:	21 f4       	brne	.+8      	; 0x4d0 <__fp_cmp+0x3e>
 4c8:	08 95       	ret
 4ca:	0a 26       	eor	r0, r26
 4cc:	09 f4       	brne	.+2      	; 0x4d0 <__fp_cmp+0x3e>
 4ce:	a1 40       	sbci	r26, 0x01	; 1
 4d0:	a6 95       	lsr	r26
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	81 1d       	adc	r24, r1
 4d6:	81 1d       	adc	r24, r1
 4d8:	08 95       	ret

000004da <__fp_split3>:
 4da:	57 fd       	sbrc	r21, 7
 4dc:	90 58       	subi	r25, 0x80	; 128
 4de:	44 0f       	add	r20, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	59 f0       	breq	.+22     	; 0x4fa <__fp_splitA+0x10>
 4e4:	5f 3f       	cpi	r21, 0xFF	; 255
 4e6:	71 f0       	breq	.+28     	; 0x504 <__fp_splitA+0x1a>
 4e8:	47 95       	ror	r20

000004ea <__fp_splitA>:
 4ea:	88 0f       	add	r24, r24
 4ec:	97 fb       	bst	r25, 7
 4ee:	99 1f       	adc	r25, r25
 4f0:	61 f0       	breq	.+24     	; 0x50a <__fp_splitA+0x20>
 4f2:	9f 3f       	cpi	r25, 0xFF	; 255
 4f4:	79 f0       	breq	.+30     	; 0x514 <__fp_splitA+0x2a>
 4f6:	87 95       	ror	r24
 4f8:	08 95       	ret
 4fa:	12 16       	cp	r1, r18
 4fc:	13 06       	cpc	r1, r19
 4fe:	14 06       	cpc	r1, r20
 500:	55 1f       	adc	r21, r21
 502:	f2 cf       	rjmp	.-28     	; 0x4e8 <__fp_split3+0xe>
 504:	46 95       	lsr	r20
 506:	f1 df       	rcall	.-30     	; 0x4ea <__fp_splitA>
 508:	08 c0       	rjmp	.+16     	; 0x51a <__fp_splitA+0x30>
 50a:	16 16       	cp	r1, r22
 50c:	17 06       	cpc	r1, r23
 50e:	18 06       	cpc	r1, r24
 510:	99 1f       	adc	r25, r25
 512:	f1 cf       	rjmp	.-30     	; 0x4f6 <__fp_splitA+0xc>
 514:	86 95       	lsr	r24
 516:	71 05       	cpc	r23, r1
 518:	61 05       	cpc	r22, r1
 51a:	08 94       	sec
 51c:	08 95       	ret

0000051e <__fp_zero>:
 51e:	e8 94       	clt

00000520 <__fp_szero>:
 520:	bb 27       	eor	r27, r27
 522:	66 27       	eor	r22, r22
 524:	77 27       	eor	r23, r23
 526:	cb 01       	movw	r24, r22
 528:	97 f9       	bld	r25, 7
 52a:	08 95       	ret

0000052c <__gesf2>:
 52c:	b2 df       	rcall	.-156    	; 0x492 <__fp_cmp>
 52e:	08 f4       	brcc	.+2      	; 0x532 <__gesf2+0x6>
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	08 95       	ret

00000534 <__mulsf3>:
 534:	0b d0       	rcall	.+22     	; 0x54c <__mulsf3x>
 536:	78 c0       	rjmp	.+240    	; 0x628 <__fp_round>
 538:	69 d0       	rcall	.+210    	; 0x60c <__fp_pscA>
 53a:	28 f0       	brcs	.+10     	; 0x546 <__mulsf3+0x12>
 53c:	6e d0       	rcall	.+220    	; 0x61a <__fp_pscB>
 53e:	18 f0       	brcs	.+6      	; 0x546 <__mulsf3+0x12>
 540:	95 23       	and	r25, r21
 542:	09 f0       	breq	.+2      	; 0x546 <__mulsf3+0x12>
 544:	5a c0       	rjmp	.+180    	; 0x5fa <__fp_inf>
 546:	5f c0       	rjmp	.+190    	; 0x606 <__fp_nan>
 548:	11 24       	eor	r1, r1
 54a:	ea cf       	rjmp	.-44     	; 0x520 <__fp_szero>

0000054c <__mulsf3x>:
 54c:	c6 df       	rcall	.-116    	; 0x4da <__fp_split3>
 54e:	a0 f3       	brcs	.-24     	; 0x538 <__mulsf3+0x4>

00000550 <__mulsf3_pse>:
 550:	95 9f       	mul	r25, r21
 552:	d1 f3       	breq	.-12     	; 0x548 <__mulsf3+0x14>
 554:	95 0f       	add	r25, r21
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	55 1f       	adc	r21, r21
 55a:	62 9f       	mul	r22, r18
 55c:	f0 01       	movw	r30, r0
 55e:	72 9f       	mul	r23, r18
 560:	bb 27       	eor	r27, r27
 562:	f0 0d       	add	r31, r0
 564:	b1 1d       	adc	r27, r1
 566:	63 9f       	mul	r22, r19
 568:	aa 27       	eor	r26, r26
 56a:	f0 0d       	add	r31, r0
 56c:	b1 1d       	adc	r27, r1
 56e:	aa 1f       	adc	r26, r26
 570:	64 9f       	mul	r22, r20
 572:	66 27       	eor	r22, r22
 574:	b0 0d       	add	r27, r0
 576:	a1 1d       	adc	r26, r1
 578:	66 1f       	adc	r22, r22
 57a:	82 9f       	mul	r24, r18
 57c:	22 27       	eor	r18, r18
 57e:	b0 0d       	add	r27, r0
 580:	a1 1d       	adc	r26, r1
 582:	62 1f       	adc	r22, r18
 584:	73 9f       	mul	r23, r19
 586:	b0 0d       	add	r27, r0
 588:	a1 1d       	adc	r26, r1
 58a:	62 1f       	adc	r22, r18
 58c:	83 9f       	mul	r24, r19
 58e:	a0 0d       	add	r26, r0
 590:	61 1d       	adc	r22, r1
 592:	22 1f       	adc	r18, r18
 594:	74 9f       	mul	r23, r20
 596:	33 27       	eor	r19, r19
 598:	a0 0d       	add	r26, r0
 59a:	61 1d       	adc	r22, r1
 59c:	23 1f       	adc	r18, r19
 59e:	84 9f       	mul	r24, r20
 5a0:	60 0d       	add	r22, r0
 5a2:	21 1d       	adc	r18, r1
 5a4:	82 2f       	mov	r24, r18
 5a6:	76 2f       	mov	r23, r22
 5a8:	6a 2f       	mov	r22, r26
 5aa:	11 24       	eor	r1, r1
 5ac:	9f 57       	subi	r25, 0x7F	; 127
 5ae:	50 40       	sbci	r21, 0x00	; 0
 5b0:	8a f0       	brmi	.+34     	; 0x5d4 <__mulsf3_pse+0x84>
 5b2:	e1 f0       	breq	.+56     	; 0x5ec <__mulsf3_pse+0x9c>
 5b4:	88 23       	and	r24, r24
 5b6:	4a f0       	brmi	.+18     	; 0x5ca <__mulsf3_pse+0x7a>
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	bb 1f       	adc	r27, r27
 5be:	66 1f       	adc	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	88 1f       	adc	r24, r24
 5c4:	91 50       	subi	r25, 0x01	; 1
 5c6:	50 40       	sbci	r21, 0x00	; 0
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__mulsf3_pse+0x64>
 5ca:	9e 3f       	cpi	r25, 0xFE	; 254
 5cc:	51 05       	cpc	r21, r1
 5ce:	70 f0       	brcs	.+28     	; 0x5ec <__mulsf3_pse+0x9c>
 5d0:	14 c0       	rjmp	.+40     	; 0x5fa <__fp_inf>
 5d2:	a6 cf       	rjmp	.-180    	; 0x520 <__fp_szero>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	ec f3       	brlt	.-6      	; 0x5d2 <__mulsf3_pse+0x82>
 5d8:	98 3e       	cpi	r25, 0xE8	; 232
 5da:	dc f3       	brlt	.-10     	; 0x5d2 <__mulsf3_pse+0x82>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b7 95       	ror	r27
 5e4:	f7 95       	ror	r31
 5e6:	e7 95       	ror	r30
 5e8:	9f 5f       	subi	r25, 0xFF	; 255
 5ea:	c1 f7       	brne	.-16     	; 0x5dc <__mulsf3_pse+0x8c>
 5ec:	fe 2b       	or	r31, r30
 5ee:	88 0f       	add	r24, r24
 5f0:	91 1d       	adc	r25, r1
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret

000005fa <__fp_inf>:
 5fa:	97 f9       	bld	r25, 7
 5fc:	9f 67       	ori	r25, 0x7F	; 127
 5fe:	80 e8       	ldi	r24, 0x80	; 128
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	08 95       	ret

00000606 <__fp_nan>:
 606:	9f ef       	ldi	r25, 0xFF	; 255
 608:	80 ec       	ldi	r24, 0xC0	; 192
 60a:	08 95       	ret

0000060c <__fp_pscA>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	16 16       	cp	r1, r22
 612:	17 06       	cpc	r1, r23
 614:	18 06       	cpc	r1, r24
 616:	09 06       	cpc	r0, r25
 618:	08 95       	ret

0000061a <__fp_pscB>:
 61a:	00 24       	eor	r0, r0
 61c:	0a 94       	dec	r0
 61e:	12 16       	cp	r1, r18
 620:	13 06       	cpc	r1, r19
 622:	14 06       	cpc	r1, r20
 624:	05 06       	cpc	r0, r21
 626:	08 95       	ret

00000628 <__fp_round>:
 628:	09 2e       	mov	r0, r25
 62a:	03 94       	inc	r0
 62c:	00 0c       	add	r0, r0
 62e:	11 f4       	brne	.+4      	; 0x634 <__fp_round+0xc>
 630:	88 23       	and	r24, r24
 632:	52 f0       	brmi	.+20     	; 0x648 <__fp_round+0x20>
 634:	bb 0f       	add	r27, r27
 636:	40 f4       	brcc	.+16     	; 0x648 <__fp_round+0x20>
 638:	bf 2b       	or	r27, r31
 63a:	11 f4       	brne	.+4      	; 0x640 <__fp_round+0x18>
 63c:	60 ff       	sbrs	r22, 0
 63e:	04 c0       	rjmp	.+8      	; 0x648 <__fp_round+0x20>
 640:	6f 5f       	subi	r22, 0xFF	; 255
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	8f 4f       	sbci	r24, 0xFF	; 255
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	08 95       	ret

0000064a <__divmodhi4>:
 64a:	97 fb       	bst	r25, 7
 64c:	09 2e       	mov	r0, r25
 64e:	07 26       	eor	r0, r23
 650:	0a d0       	rcall	.+20     	; 0x666 <__divmodhi4_neg1>
 652:	77 fd       	sbrc	r23, 7
 654:	04 d0       	rcall	.+8      	; 0x65e <__divmodhi4_neg2>
 656:	0c d0       	rcall	.+24     	; 0x670 <__udivmodhi4>
 658:	06 d0       	rcall	.+12     	; 0x666 <__divmodhi4_neg1>
 65a:	00 20       	and	r0, r0
 65c:	1a f4       	brpl	.+6      	; 0x664 <__divmodhi4_exit>

0000065e <__divmodhi4_neg2>:
 65e:	70 95       	com	r23
 660:	61 95       	neg	r22
 662:	7f 4f       	sbci	r23, 0xFF	; 255

00000664 <__divmodhi4_exit>:
 664:	08 95       	ret

00000666 <__divmodhi4_neg1>:
 666:	f6 f7       	brtc	.-4      	; 0x664 <__divmodhi4_exit>
 668:	90 95       	com	r25
 66a:	81 95       	neg	r24
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	08 95       	ret

00000670 <__udivmodhi4>:
 670:	aa 1b       	sub	r26, r26
 672:	bb 1b       	sub	r27, r27
 674:	51 e1       	ldi	r21, 0x11	; 17
 676:	07 c0       	rjmp	.+14     	; 0x686 <__udivmodhi4_ep>

00000678 <__udivmodhi4_loop>:
 678:	aa 1f       	adc	r26, r26
 67a:	bb 1f       	adc	r27, r27
 67c:	a6 17       	cp	r26, r22
 67e:	b7 07       	cpc	r27, r23
 680:	10 f0       	brcs	.+4      	; 0x686 <__udivmodhi4_ep>
 682:	a6 1b       	sub	r26, r22
 684:	b7 0b       	sbc	r27, r23

00000686 <__udivmodhi4_ep>:
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	5a 95       	dec	r21
 68c:	a9 f7       	brne	.-22     	; 0x678 <__udivmodhi4_loop>
 68e:	80 95       	com	r24
 690:	90 95       	com	r25
 692:	bc 01       	movw	r22, r24
 694:	cd 01       	movw	r24, r26
 696:	08 95       	ret

00000698 <_exit>:
 698:	f8 94       	cli

0000069a <__stop_program>:
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__stop_program>
