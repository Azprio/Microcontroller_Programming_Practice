
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000006d6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a1  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000089e  00000000  00000000  00000837  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000288  00000000  00000000  000010d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005bf  00000000  00000000  0000135d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b1  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000444  00000000  00000000  00001b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00001fb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<lcd.h>

main(){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2c 97       	sbiw	r28, 0x0c	; 12
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0b01111111;
  96:	8f e7       	ldi	r24, 0x7F	; 127
  98:	81 bb       	out	0x11, r24	; 17
	char msg[] = "Hello MCU-2";
  9a:	de 01       	movw	r26, r28
  9c:	11 96       	adiw	r26, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8c e0       	ldi	r24, 0x0C	; 12
  a4:	01 90       	ld	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x22>
  ac:	fe 01       	movw	r30, r28
  ae:	31 96       	adiw	r30, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	40 ed       	ldi	r20, 0xD0	; 208
  b2:	57 e0       	ldi	r21, 0x07	; 7
	int len = sizeof(msg);
	for(int i = 0 ; i<len-1 ; i++){
  b4:	9e 01       	movw	r18, r28
  b6:	24 5f       	subi	r18, 0xF4	; 244
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
		PORTD = msg[i];
  ba:	80 81       	ld	r24, Z
  bc:	82 bb       	out	0x12, r24	; 18
		while(!(PIND&(1<<PD7))){
  be:	87 9b       	sbis	0x10, 7	; 16
  c0:	fe cf       	rjmp	.-4      	; 0xbe <main+0x3c>
  c2:	ca 01       	movw	r24, r20
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x42>
  c8:	31 96       	adiw	r30, 0x01	; 1

main(){
	DDRD = 0b01111111;
	char msg[] = "Hello MCU-2";
	int len = sizeof(msg);
	for(int i = 0 ; i<len-1 ; i++){
  ca:	e2 17       	cp	r30, r18
  cc:	f3 07       	cpc	r31, r19
  ce:	a9 f7       	brne	.-22     	; 0xba <main+0x38>
			
		}
		_delay_ms(1);
	}
	
	PORTD |= 0b01111111;
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	8f 67       	ori	r24, 0x7F	; 127
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2c 96       	adiw	r28, 0x0c	; 12
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  ec:	81 b3       	in	r24, 0x11	; 17
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();		//Read mode
  f2:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
  f4:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCDBusyLoop+0xc>


	do
	{

		SET_E();
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	32 e0       	ldi	r19, 0x02	; 2
 100:	94 9a       	sbi	0x12, 4	; 18
 102:	82 2f       	mov	r24, r18
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 108:	80 b3       	in	r24, 0x10	; 16
		status=status<<4;
 10a:	82 95       	swap	r24
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	92 2f       	mov	r25, r18
 110:	9a 95       	dec	r25
 112:	f1 f7       	brne	.-4      	; 0x110 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 114:	94 98       	cbi	0x12, 4	; 18
 116:	93 2f       	mov	r25, r19
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 11c:	94 9a       	sbi	0x12, 4	; 18
 11e:	92 2f       	mov	r25, r18
 120:	9a 95       	dec	r25
 122:	f1 f7       	brne	.-4      	; 0x120 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 124:	90 b3       	in	r25, 0x10	; 16
 126:	92 2f       	mov	r25, r18
 128:	9a 95       	dec	r25
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 12c:	94 98       	cbi	0x12, 4	; 18
 12e:	93 2f       	mov	r25, r19
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 134:	87 fd       	sbrc	r24, 7
 136:	e4 cf       	rjmp	.-56     	; 0x100 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 138:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	8f 60       	ori	r24, 0x0F	; 15
 13e:	81 bb       	out	0x11, r24	; 17

}
 140:	08 95       	ret

00000142 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 142:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 144:	66 23       	and	r22, r22
 146:	11 f4       	brne	.+4      	; 0x14c <LCDByte+0xa>
	CLEAR_RS();
 148:	96 98       	cbi	0x12, 6	; 18
 14a:	01 c0       	rjmp	.+2      	; 0x14e <LCDByte+0xc>
else
	SET_RS();
 14c:	96 9a       	sbi	0x12, 6	; 18
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	8a 95       	dec	r24
 152:	f1 f7       	brne	.-4      	; 0x150 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 154:	94 9a       	sbi	0x12, 4	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 156:	82 b3       	in	r24, 0x12	; 18
 158:	92 2f       	mov	r25, r18
 15a:	92 95       	swap	r25
 15c:	9f 70       	andi	r25, 0x0F	; 15
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 162:	92 bb       	out	0x12, r25	; 18
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	89 2f       	mov	r24, r25
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 16c:	94 98       	cbi	0x12, 4	; 18
 16e:	89 2f       	mov	r24, r25
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 174:	94 9a       	sbi	0x12, 4	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 176:	82 b3       	in	r24, 0x12	; 18
 178:	2f 70       	andi	r18, 0x0F	; 15
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 17e:	82 bb       	out	0x12, r24	; 18
 180:	89 2f       	mov	r24, r25
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 186:	94 98       	cbi	0x12, 4	; 18
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 18c:	0e 94 76 00 	call	0xec	; 0xec <LCDBusyLoop>
}
 190:	08 95       	ret

00000192 <LCDInit>:
	LCD_DATA_DDR|=0x0F;

}

void LCDInit(uint8_t style)
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 198:	80 e6       	ldi	r24, 0x60	; 96
 19a:	9a ee       	ldi	r25, 0xEA	; 234
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDInit+0xa>

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1a0:	81 b3       	in	r24, 0x11	; 17
 1a2:	8f 60       	ori	r24, 0x0F	; 15
 1a4:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);
 1a6:	8c 9a       	sbi	0x11, 4	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1a8:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1aa:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 1ac:	82 b3       	in	r24, 0x12	; 18
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 1b2:	94 98       	cbi	0x12, 4	; 18
	CLEAR_RW();
 1b4:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 1b6:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1b8:	85 e8       	ldi	r24, 0x85	; 133
 1ba:	98 2f       	mov	r25, r24
 1bc:	9a 95       	dec	r25
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCDInit+0x2a>

	//Set 4-bit mode
	_delay_us(50);	//tAS

	SET_E();
 1c0:	94 9a       	sbi	0x12, 4	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1c2:	91 9a       	sbi	0x12, 1	; 18
 1c4:	98 2f       	mov	r25, r24
 1c6:	9a 95       	dec	r25
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDInit+0x34>
	_delay_us(50);
	CLEAR_E();
 1ca:	94 98       	cbi	0x12, 4	; 18
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCDInit+0x3a>
	_delay_us(50);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1d0:	0e 94 76 00 	call	0xec	; 0xec <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1d4:	81 2f       	mov	r24, r17
 1d6:	8c 60       	ori	r24, 0x0C	; 12
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	0e 94 a1 00 	call	0x142	; 0x142 <LCDByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1de:	08 ec       	ldi	r16, 0xC8	; 200
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	c8 01       	movw	r24, r16
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDInit+0x52>
	_delay_us(100);
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	0e 94 a1 00 	call	0x142	; 0x142 <LCDByte>
 1f0:	c8 01       	movw	r24, r16
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCDInit+0x60>
	_delay_us(100);
}
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
 202:	04 c0       	rjmp	.+8      	; 0x20c <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	0e 94 a1 00 	call	0x142	; 0x142 <LCDByte>
	msg++;
 20a:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 20c:	88 81       	ld	r24, Y
 20e:	88 23       	and	r24, r24
 210:	c9 f7       	brne	.-14     	; 0x204 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCDWriteString_sliding>:
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
 218:	4f 92       	push	r4
 21a:	5f 92       	push	r5
 21c:	6f 92       	push	r6
 21e:	7f 92       	push	r7
 220:	8f 92       	push	r8
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	eb 01       	movw	r28, r22
  while (*strng>0)
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
 23a:	3c 01       	movw	r6, r24
 23c:	88 24       	eor	r8, r8
 23e:	99 24       	eor	r9, r9
 240:	88 ec       	ldi	r24, 0xC8	; 200
 242:	48 2e       	mov	r4, r24
 244:	51 2c       	mov	r5, r1
 246:	42 c0       	rjmp	.+132    	; 0x2cc <LCDWriteString_sliding+0xb4>
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
  {
	  LCDData(*strng++);
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	0e 94 a1 00 	call	0x142	; 0x142 <LCDByte>
	  _delay_ms(delay_ms);
 250:	c4 01       	movw	r24, r8
 252:	b3 01       	movw	r22, r6
 254:	0e 94 29 02 	call	0x452	; 0x452 <__floatunsisf>
 258:	5b 01       	movw	r10, r22
 25a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	4a ef       	ldi	r20, 0xFA	; 250
 262:	54 e4       	ldi	r21, 0x44	; 68
 264:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulsf3>
 268:	7b 01       	movw	r14, r22
 26a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	5f e3       	ldi	r21, 0x3F	; 63
 274:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__cmpsf2>
 278:	88 23       	and	r24, r24
 27a:	1c f4       	brge	.+6      	; 0x282 <LCDWriteString_sliding+0x6a>
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	22 c0       	rjmp	.+68     	; 0x2c6 <LCDWriteString_sliding+0xae>
		__ticks = 1;
	else if (__tmp > 65535)
 282:	c8 01       	movw	r24, r16
 284:	b7 01       	movw	r22, r14
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	3f ef       	ldi	r19, 0xFF	; 255
 28a:	4f e7       	ldi	r20, 0x7F	; 127
 28c:	57 e4       	ldi	r21, 0x47	; 71
 28e:	0e 94 b3 02 	call	0x566	; 0x566 <__gesf2>
 292:	18 16       	cp	r1, r24
 294:	a4 f4       	brge	.+40     	; 0x2be <LCDWriteString_sliding+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 296:	c6 01       	movw	r24, r12
 298:	b5 01       	movw	r22, r10
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e2       	ldi	r20, 0x20	; 32
 2a0:	51 e4       	ldi	r21, 0x41	; 65
 2a2:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulsf3>
 2a6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__fixunssfsi>
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <LCDWriteString_sliding+0x9e>
 2ac:	c2 01       	movw	r24, r4
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCDWriteString_sliding+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b2:	61 50       	subi	r22, 0x01	; 1
 2b4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b6:	61 15       	cp	r22, r1
 2b8:	71 05       	cpc	r23, r1
 2ba:	c1 f7       	brne	.-16     	; 0x2ac <LCDWriteString_sliding+0x94>
 2bc:	07 c0       	rjmp	.+14     	; 0x2cc <LCDWriteString_sliding+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2be:	c8 01       	movw	r24, r16
 2c0:	b7 01       	movw	r22, r14
 2c2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__fixunssfsi>
 2c6:	cb 01       	movw	r24, r22
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCDWriteString_sliding+0xb0>
 }
}
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
 2cc:	88 81       	ld	r24, Y
 2ce:	88 23       	and	r24, r24
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <LCDWriteString_sliding+0xbc>
 2d2:	ba cf       	rjmp	.-140    	; 0x248 <LCDWriteString_sliding+0x30>
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
  }
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	df 90       	pop	r13
 2e2:	cf 90       	pop	r12
 2e4:	bf 90       	pop	r11
 2e6:	af 90       	pop	r10
 2e8:	9f 90       	pop	r9
 2ea:	8f 90       	pop	r8
 2ec:	7f 90       	pop	r7
 2ee:	6f 90       	pop	r6
 2f0:	5f 90       	pop	r5
 2f2:	4f 90       	pop	r4
 2f4:	08 95       	ret

000002f6 <LCDWriteInt>:
//-----------------------------------------------------
void LCDWriteInt(int val,unsigned int field_length)
{
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	df 93       	push	r29
 300:	cf 93       	push	r28
 302:	00 d0       	rcall	.+0      	; 0x304 <LCDWriteInt+0xe>
 304:	00 d0       	rcall	.+0      	; 0x306 <LCDWriteInt+0x10>
 306:	0f 92       	push	r0
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	9c 01       	movw	r18, r24
 30e:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 310:	fe 01       	movw	r30, r28
 312:	31 96       	adiw	r30, 0x01	; 1
 314:	85 e0       	ldi	r24, 0x05	; 5
 316:	df 01       	movw	r26, r30
 318:	1d 92       	st	X+, r1
 31a:	8a 95       	dec	r24
 31c:	e9 f7       	brne	.-6      	; 0x318 <LCDWriteInt+0x22>
 31e:	fe 01       	movw	r30, r28
 320:	35 96       	adiw	r30, 0x05	; 5
 322:	0d c0       	rjmp	.+26     	; 0x33e <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 324:	c9 01       	movw	r24, r18
 326:	6a e0       	ldi	r22, 0x0A	; 10
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	0e 94 42 03 	call	0x684	; 0x684 <__divmodhi4>
 32e:	80 83       	st	Z, r24
	val=val/10;
 330:	c9 01       	movw	r24, r18
 332:	6a e0       	ldi	r22, 0x0A	; 10
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 42 03 	call	0x684	; 0x684 <__divmodhi4>
 33a:	9b 01       	movw	r18, r22
 33c:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 33e:	21 15       	cp	r18, r1
 340:	31 05       	cpc	r19, r1
 342:	81 f7       	brne	.-32     	; 0x324 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 344:	bf ef       	ldi	r27, 0xFF	; 255
 346:	0f 3f       	cpi	r16, 0xFF	; 255
 348:	1b 07       	cpc	r17, r27
 34a:	79 f4       	brne	.+30     	; 0x36a <LCDWriteInt+0x74>
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 350:	ae 01       	movw	r20, r28
 352:	4f 5f       	subi	r20, 0xFF	; 255
 354:	5f 4f       	sbci	r21, 0xFF	; 255
 356:	02 c0       	rjmp	.+4      	; 0x35c <LCDWriteInt+0x66>
 358:	2f 5f       	subi	r18, 0xFF	; 255
 35a:	3f 4f       	sbci	r19, 0xFF	; 255
 35c:	fa 01       	movw	r30, r20
 35e:	e2 0f       	add	r30, r18
 360:	f3 1f       	adc	r31, r19
 362:	80 81       	ld	r24, Z
 364:	88 23       	and	r24, r24
 366:	c1 f3       	breq	.-16     	; 0x358 <LCDWriteInt+0x62>
 368:	04 c0       	rjmp	.+8      	; 0x372 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 36a:	25 e0       	ldi	r18, 0x05	; 5
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	20 1b       	sub	r18, r16
 370:	31 0b       	sbc	r19, r17
 372:	7e 01       	movw	r14, r28
 374:	08 94       	sec
 376:	e1 1c       	adc	r14, r1
 378:	f1 1c       	adc	r15, r1
 37a:	e2 0e       	add	r14, r18
 37c:	f3 1e       	adc	r15, r19
 37e:	89 01       	movw	r16, r18
 380:	09 c0       	rjmp	.+18     	; 0x394 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 382:	f7 01       	movw	r30, r14
 384:	81 91       	ld	r24, Z+
 386:	7f 01       	movw	r14, r30
 388:	80 5d       	subi	r24, 0xD0	; 208
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	0e 94 a1 00 	call	0x142	; 0x142 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 390:	0f 5f       	subi	r16, 0xFF	; 255
 392:	1f 4f       	sbci	r17, 0xFF	; 255
 394:	05 30       	cpi	r16, 0x05	; 5
 396:	11 05       	cpc	r17, r1
 398:	a4 f3       	brlt	.-24     	; 0x382 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	08 95       	ret

000003b2 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 3b2:	df 93       	push	r29
 3b4:	cf 93       	push	r28
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <LCDGotoXY+0x6>
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <LCDGotoXY+0x8>
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	98 2f       	mov	r25, r24
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
    if(x<20)
 3c0:	84 31       	cpi	r24, 0x14	; 20
 3c2:	80 f4       	brcc	.+32     	; 0x3e4 <LCDGotoXY+0x32>
{
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
 3c4:	80 e8       	ldi	r24, 0x80	; 128
 3c6:	89 83       	std	Y+1, r24	; 0x01
 3c8:	80 ec       	ldi	r24, 0xC0	; 192
 3ca:	8a 83       	std	Y+2, r24	; 0x02
 3cc:	84 e9       	ldi	r24, 0x94	; 148
 3ce:	8b 83       	std	Y+3, r24	; 0x03
 3d0:	84 ed       	ldi	r24, 0xD4	; 212
 3d2:	8c 83       	std	Y+4, r24	; 0x04
    if(x<20)
    LCDCmd(line[y]+x);//if(y==0)x|=0x80,if(y==1)x|=0x80,if(y==2)x|=0x80,if(y==3)x|=0x80
 3d4:	fe 01       	movw	r30, r28
 3d6:	e6 0f       	add	r30, r22
 3d8:	f1 1d       	adc	r31, r1
 3da:	81 81       	ldd	r24, Z+1	; 0x01
 3dc:	89 0f       	add	r24, r25
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	0e 94 a1 00 	call	0x142	; 0x142 <LCDByte>

}
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	cf 91       	pop	r28
 3ee:	df 91       	pop	r29
 3f0:	08 95       	ret

000003f2 <__cmpsf2>:
 3f2:	6c d0       	rcall	.+216    	; 0x4cc <__fp_cmp>
 3f4:	08 f4       	brcc	.+2      	; 0x3f8 <__cmpsf2+0x6>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	08 95       	ret

000003fa <__fixunssfsi>:
 3fa:	94 d0       	rcall	.+296    	; 0x524 <__fp_splitA>
 3fc:	88 f0       	brcs	.+34     	; 0x420 <__fixunssfsi+0x26>
 3fe:	9f 57       	subi	r25, 0x7F	; 127
 400:	90 f0       	brcs	.+36     	; 0x426 <__fixunssfsi+0x2c>
 402:	b9 2f       	mov	r27, r25
 404:	99 27       	eor	r25, r25
 406:	b7 51       	subi	r27, 0x17	; 23
 408:	a0 f0       	brcs	.+40     	; 0x432 <__fixunssfsi+0x38>
 40a:	d1 f0       	breq	.+52     	; 0x440 <__fixunssfsi+0x46>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	88 1f       	adc	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	1a f0       	brmi	.+6      	; 0x41c <__fixunssfsi+0x22>
 416:	ba 95       	dec	r27
 418:	c9 f7       	brne	.-14     	; 0x40c <__fixunssfsi+0x12>
 41a:	12 c0       	rjmp	.+36     	; 0x440 <__fixunssfsi+0x46>
 41c:	b1 30       	cpi	r27, 0x01	; 1
 41e:	81 f0       	breq	.+32     	; 0x440 <__fixunssfsi+0x46>
 420:	9b d0       	rcall	.+310    	; 0x558 <__fp_zero>
 422:	b1 e0       	ldi	r27, 0x01	; 1
 424:	08 95       	ret
 426:	98 c0       	rjmp	.+304    	; 0x558 <__fp_zero>
 428:	67 2f       	mov	r22, r23
 42a:	78 2f       	mov	r23, r24
 42c:	88 27       	eor	r24, r24
 42e:	b8 5f       	subi	r27, 0xF8	; 248
 430:	39 f0       	breq	.+14     	; 0x440 <__fixunssfsi+0x46>
 432:	b9 3f       	cpi	r27, 0xF9	; 249
 434:	cc f3       	brlt	.-14     	; 0x428 <__fixunssfsi+0x2e>
 436:	86 95       	lsr	r24
 438:	77 95       	ror	r23
 43a:	67 95       	ror	r22
 43c:	b3 95       	inc	r27
 43e:	d9 f7       	brne	.-10     	; 0x436 <__fixunssfsi+0x3c>
 440:	3e f4       	brtc	.+14     	; 0x450 <__fixunssfsi+0x56>
 442:	90 95       	com	r25
 444:	80 95       	com	r24
 446:	70 95       	com	r23
 448:	61 95       	neg	r22
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	8f 4f       	sbci	r24, 0xFF	; 255
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	08 95       	ret

00000452 <__floatunsisf>:
 452:	e8 94       	clt
 454:	09 c0       	rjmp	.+18     	; 0x468 <__floatsisf+0x12>

00000456 <__floatsisf>:
 456:	97 fb       	bst	r25, 7
 458:	3e f4       	brtc	.+14     	; 0x468 <__floatsisf+0x12>
 45a:	90 95       	com	r25
 45c:	80 95       	com	r24
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	99 23       	and	r25, r25
 46a:	a9 f0       	breq	.+42     	; 0x496 <__floatsisf+0x40>
 46c:	f9 2f       	mov	r31, r25
 46e:	96 e9       	ldi	r25, 0x96	; 150
 470:	bb 27       	eor	r27, r27
 472:	93 95       	inc	r25
 474:	f6 95       	lsr	r31
 476:	87 95       	ror	r24
 478:	77 95       	ror	r23
 47a:	67 95       	ror	r22
 47c:	b7 95       	ror	r27
 47e:	f1 11       	cpse	r31, r1
 480:	f8 cf       	rjmp	.-16     	; 0x472 <__floatsisf+0x1c>
 482:	fa f4       	brpl	.+62     	; 0x4c2 <__floatsisf+0x6c>
 484:	bb 0f       	add	r27, r27
 486:	11 f4       	brne	.+4      	; 0x48c <__floatsisf+0x36>
 488:	60 ff       	sbrs	r22, 0
 48a:	1b c0       	rjmp	.+54     	; 0x4c2 <__floatsisf+0x6c>
 48c:	6f 5f       	subi	r22, 0xFF	; 255
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	16 c0       	rjmp	.+44     	; 0x4c2 <__floatsisf+0x6c>
 496:	88 23       	and	r24, r24
 498:	11 f0       	breq	.+4      	; 0x49e <__floatsisf+0x48>
 49a:	96 e9       	ldi	r25, 0x96	; 150
 49c:	11 c0       	rjmp	.+34     	; 0x4c0 <__floatsisf+0x6a>
 49e:	77 23       	and	r23, r23
 4a0:	21 f0       	breq	.+8      	; 0x4aa <__floatsisf+0x54>
 4a2:	9e e8       	ldi	r25, 0x8E	; 142
 4a4:	87 2f       	mov	r24, r23
 4a6:	76 2f       	mov	r23, r22
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <__floatsisf+0x5e>
 4aa:	66 23       	and	r22, r22
 4ac:	71 f0       	breq	.+28     	; 0x4ca <__floatsisf+0x74>
 4ae:	96 e8       	ldi	r25, 0x86	; 134
 4b0:	86 2f       	mov	r24, r22
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	2a f0       	brmi	.+10     	; 0x4c2 <__floatsisf+0x6c>
 4b8:	9a 95       	dec	r25
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	da f7       	brpl	.-10     	; 0x4b8 <__floatsisf+0x62>
 4c2:	88 0f       	add	r24, r24
 4c4:	96 95       	lsr	r25
 4c6:	87 95       	ror	r24
 4c8:	97 f9       	bld	r25, 7
 4ca:	08 95       	ret

000004cc <__fp_cmp>:
 4cc:	99 0f       	add	r25, r25
 4ce:	00 08       	sbc	r0, r0
 4d0:	55 0f       	add	r21, r21
 4d2:	aa 0b       	sbc	r26, r26
 4d4:	e0 e8       	ldi	r30, 0x80	; 128
 4d6:	fe ef       	ldi	r31, 0xFE	; 254
 4d8:	16 16       	cp	r1, r22
 4da:	17 06       	cpc	r1, r23
 4dc:	e8 07       	cpc	r30, r24
 4de:	f9 07       	cpc	r31, r25
 4e0:	c0 f0       	brcs	.+48     	; 0x512 <__fp_cmp+0x46>
 4e2:	12 16       	cp	r1, r18
 4e4:	13 06       	cpc	r1, r19
 4e6:	e4 07       	cpc	r30, r20
 4e8:	f5 07       	cpc	r31, r21
 4ea:	98 f0       	brcs	.+38     	; 0x512 <__fp_cmp+0x46>
 4ec:	62 1b       	sub	r22, r18
 4ee:	73 0b       	sbc	r23, r19
 4f0:	84 0b       	sbc	r24, r20
 4f2:	95 0b       	sbc	r25, r21
 4f4:	39 f4       	brne	.+14     	; 0x504 <__fp_cmp+0x38>
 4f6:	0a 26       	eor	r0, r26
 4f8:	61 f0       	breq	.+24     	; 0x512 <__fp_cmp+0x46>
 4fa:	23 2b       	or	r18, r19
 4fc:	24 2b       	or	r18, r20
 4fe:	25 2b       	or	r18, r21
 500:	21 f4       	brne	.+8      	; 0x50a <__fp_cmp+0x3e>
 502:	08 95       	ret
 504:	0a 26       	eor	r0, r26
 506:	09 f4       	brne	.+2      	; 0x50a <__fp_cmp+0x3e>
 508:	a1 40       	sbci	r26, 0x01	; 1
 50a:	a6 95       	lsr	r26
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	81 1d       	adc	r24, r1
 510:	81 1d       	adc	r24, r1
 512:	08 95       	ret

00000514 <__fp_split3>:
 514:	57 fd       	sbrc	r21, 7
 516:	90 58       	subi	r25, 0x80	; 128
 518:	44 0f       	add	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	59 f0       	breq	.+22     	; 0x534 <__fp_splitA+0x10>
 51e:	5f 3f       	cpi	r21, 0xFF	; 255
 520:	71 f0       	breq	.+28     	; 0x53e <__fp_splitA+0x1a>
 522:	47 95       	ror	r20

00000524 <__fp_splitA>:
 524:	88 0f       	add	r24, r24
 526:	97 fb       	bst	r25, 7
 528:	99 1f       	adc	r25, r25
 52a:	61 f0       	breq	.+24     	; 0x544 <__fp_splitA+0x20>
 52c:	9f 3f       	cpi	r25, 0xFF	; 255
 52e:	79 f0       	breq	.+30     	; 0x54e <__fp_splitA+0x2a>
 530:	87 95       	ror	r24
 532:	08 95       	ret
 534:	12 16       	cp	r1, r18
 536:	13 06       	cpc	r1, r19
 538:	14 06       	cpc	r1, r20
 53a:	55 1f       	adc	r21, r21
 53c:	f2 cf       	rjmp	.-28     	; 0x522 <__fp_split3+0xe>
 53e:	46 95       	lsr	r20
 540:	f1 df       	rcall	.-30     	; 0x524 <__fp_splitA>
 542:	08 c0       	rjmp	.+16     	; 0x554 <__fp_splitA+0x30>
 544:	16 16       	cp	r1, r22
 546:	17 06       	cpc	r1, r23
 548:	18 06       	cpc	r1, r24
 54a:	99 1f       	adc	r25, r25
 54c:	f1 cf       	rjmp	.-30     	; 0x530 <__fp_splitA+0xc>
 54e:	86 95       	lsr	r24
 550:	71 05       	cpc	r23, r1
 552:	61 05       	cpc	r22, r1
 554:	08 94       	sec
 556:	08 95       	ret

00000558 <__fp_zero>:
 558:	e8 94       	clt

0000055a <__fp_szero>:
 55a:	bb 27       	eor	r27, r27
 55c:	66 27       	eor	r22, r22
 55e:	77 27       	eor	r23, r23
 560:	cb 01       	movw	r24, r22
 562:	97 f9       	bld	r25, 7
 564:	08 95       	ret

00000566 <__gesf2>:
 566:	b2 df       	rcall	.-156    	; 0x4cc <__fp_cmp>
 568:	08 f4       	brcc	.+2      	; 0x56c <__gesf2+0x6>
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__mulsf3>:
 56e:	0b d0       	rcall	.+22     	; 0x586 <__mulsf3x>
 570:	78 c0       	rjmp	.+240    	; 0x662 <__fp_round>
 572:	69 d0       	rcall	.+210    	; 0x646 <__fp_pscA>
 574:	28 f0       	brcs	.+10     	; 0x580 <__mulsf3+0x12>
 576:	6e d0       	rcall	.+220    	; 0x654 <__fp_pscB>
 578:	18 f0       	brcs	.+6      	; 0x580 <__mulsf3+0x12>
 57a:	95 23       	and	r25, r21
 57c:	09 f0       	breq	.+2      	; 0x580 <__mulsf3+0x12>
 57e:	5a c0       	rjmp	.+180    	; 0x634 <__fp_inf>
 580:	5f c0       	rjmp	.+190    	; 0x640 <__fp_nan>
 582:	11 24       	eor	r1, r1
 584:	ea cf       	rjmp	.-44     	; 0x55a <__fp_szero>

00000586 <__mulsf3x>:
 586:	c6 df       	rcall	.-116    	; 0x514 <__fp_split3>
 588:	a0 f3       	brcs	.-24     	; 0x572 <__mulsf3+0x4>

0000058a <__mulsf3_pse>:
 58a:	95 9f       	mul	r25, r21
 58c:	d1 f3       	breq	.-12     	; 0x582 <__mulsf3+0x14>
 58e:	95 0f       	add	r25, r21
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	55 1f       	adc	r21, r21
 594:	62 9f       	mul	r22, r18
 596:	f0 01       	movw	r30, r0
 598:	72 9f       	mul	r23, r18
 59a:	bb 27       	eor	r27, r27
 59c:	f0 0d       	add	r31, r0
 59e:	b1 1d       	adc	r27, r1
 5a0:	63 9f       	mul	r22, r19
 5a2:	aa 27       	eor	r26, r26
 5a4:	f0 0d       	add	r31, r0
 5a6:	b1 1d       	adc	r27, r1
 5a8:	aa 1f       	adc	r26, r26
 5aa:	64 9f       	mul	r22, r20
 5ac:	66 27       	eor	r22, r22
 5ae:	b0 0d       	add	r27, r0
 5b0:	a1 1d       	adc	r26, r1
 5b2:	66 1f       	adc	r22, r22
 5b4:	82 9f       	mul	r24, r18
 5b6:	22 27       	eor	r18, r18
 5b8:	b0 0d       	add	r27, r0
 5ba:	a1 1d       	adc	r26, r1
 5bc:	62 1f       	adc	r22, r18
 5be:	73 9f       	mul	r23, r19
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	62 1f       	adc	r22, r18
 5c6:	83 9f       	mul	r24, r19
 5c8:	a0 0d       	add	r26, r0
 5ca:	61 1d       	adc	r22, r1
 5cc:	22 1f       	adc	r18, r18
 5ce:	74 9f       	mul	r23, r20
 5d0:	33 27       	eor	r19, r19
 5d2:	a0 0d       	add	r26, r0
 5d4:	61 1d       	adc	r22, r1
 5d6:	23 1f       	adc	r18, r19
 5d8:	84 9f       	mul	r24, r20
 5da:	60 0d       	add	r22, r0
 5dc:	21 1d       	adc	r18, r1
 5de:	82 2f       	mov	r24, r18
 5e0:	76 2f       	mov	r23, r22
 5e2:	6a 2f       	mov	r22, r26
 5e4:	11 24       	eor	r1, r1
 5e6:	9f 57       	subi	r25, 0x7F	; 127
 5e8:	50 40       	sbci	r21, 0x00	; 0
 5ea:	8a f0       	brmi	.+34     	; 0x60e <__mulsf3_pse+0x84>
 5ec:	e1 f0       	breq	.+56     	; 0x626 <__mulsf3_pse+0x9c>
 5ee:	88 23       	and	r24, r24
 5f0:	4a f0       	brmi	.+18     	; 0x604 <__mulsf3_pse+0x7a>
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	bb 1f       	adc	r27, r27
 5f8:	66 1f       	adc	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	91 50       	subi	r25, 0x01	; 1
 600:	50 40       	sbci	r21, 0x00	; 0
 602:	a9 f7       	brne	.-22     	; 0x5ee <__mulsf3_pse+0x64>
 604:	9e 3f       	cpi	r25, 0xFE	; 254
 606:	51 05       	cpc	r21, r1
 608:	70 f0       	brcs	.+28     	; 0x626 <__mulsf3_pse+0x9c>
 60a:	14 c0       	rjmp	.+40     	; 0x634 <__fp_inf>
 60c:	a6 cf       	rjmp	.-180    	; 0x55a <__fp_szero>
 60e:	5f 3f       	cpi	r21, 0xFF	; 255
 610:	ec f3       	brlt	.-6      	; 0x60c <__mulsf3_pse+0x82>
 612:	98 3e       	cpi	r25, 0xE8	; 232
 614:	dc f3       	brlt	.-10     	; 0x60c <__mulsf3_pse+0x82>
 616:	86 95       	lsr	r24
 618:	77 95       	ror	r23
 61a:	67 95       	ror	r22
 61c:	b7 95       	ror	r27
 61e:	f7 95       	ror	r31
 620:	e7 95       	ror	r30
 622:	9f 5f       	subi	r25, 0xFF	; 255
 624:	c1 f7       	brne	.-16     	; 0x616 <__mulsf3_pse+0x8c>
 626:	fe 2b       	or	r31, r30
 628:	88 0f       	add	r24, r24
 62a:	91 1d       	adc	r25, r1
 62c:	96 95       	lsr	r25
 62e:	87 95       	ror	r24
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <__fp_inf>:
 634:	97 f9       	bld	r25, 7
 636:	9f 67       	ori	r25, 0x7F	; 127
 638:	80 e8       	ldi	r24, 0x80	; 128
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	08 95       	ret

00000640 <__fp_nan>:
 640:	9f ef       	ldi	r25, 0xFF	; 255
 642:	80 ec       	ldi	r24, 0xC0	; 192
 644:	08 95       	ret

00000646 <__fp_pscA>:
 646:	00 24       	eor	r0, r0
 648:	0a 94       	dec	r0
 64a:	16 16       	cp	r1, r22
 64c:	17 06       	cpc	r1, r23
 64e:	18 06       	cpc	r1, r24
 650:	09 06       	cpc	r0, r25
 652:	08 95       	ret

00000654 <__fp_pscB>:
 654:	00 24       	eor	r0, r0
 656:	0a 94       	dec	r0
 658:	12 16       	cp	r1, r18
 65a:	13 06       	cpc	r1, r19
 65c:	14 06       	cpc	r1, r20
 65e:	05 06       	cpc	r0, r21
 660:	08 95       	ret

00000662 <__fp_round>:
 662:	09 2e       	mov	r0, r25
 664:	03 94       	inc	r0
 666:	00 0c       	add	r0, r0
 668:	11 f4       	brne	.+4      	; 0x66e <__fp_round+0xc>
 66a:	88 23       	and	r24, r24
 66c:	52 f0       	brmi	.+20     	; 0x682 <__fp_round+0x20>
 66e:	bb 0f       	add	r27, r27
 670:	40 f4       	brcc	.+16     	; 0x682 <__fp_round+0x20>
 672:	bf 2b       	or	r27, r31
 674:	11 f4       	brne	.+4      	; 0x67a <__fp_round+0x18>
 676:	60 ff       	sbrs	r22, 0
 678:	04 c0       	rjmp	.+8      	; 0x682 <__fp_round+0x20>
 67a:	6f 5f       	subi	r22, 0xFF	; 255
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	08 95       	ret

00000684 <__divmodhi4>:
 684:	97 fb       	bst	r25, 7
 686:	09 2e       	mov	r0, r25
 688:	07 26       	eor	r0, r23
 68a:	0a d0       	rcall	.+20     	; 0x6a0 <__divmodhi4_neg1>
 68c:	77 fd       	sbrc	r23, 7
 68e:	04 d0       	rcall	.+8      	; 0x698 <__divmodhi4_neg2>
 690:	0c d0       	rcall	.+24     	; 0x6aa <__udivmodhi4>
 692:	06 d0       	rcall	.+12     	; 0x6a0 <__divmodhi4_neg1>
 694:	00 20       	and	r0, r0
 696:	1a f4       	brpl	.+6      	; 0x69e <__divmodhi4_exit>

00000698 <__divmodhi4_neg2>:
 698:	70 95       	com	r23
 69a:	61 95       	neg	r22
 69c:	7f 4f       	sbci	r23, 0xFF	; 255

0000069e <__divmodhi4_exit>:
 69e:	08 95       	ret

000006a0 <__divmodhi4_neg1>:
 6a0:	f6 f7       	brtc	.-4      	; 0x69e <__divmodhi4_exit>
 6a2:	90 95       	com	r25
 6a4:	81 95       	neg	r24
 6a6:	9f 4f       	sbci	r25, 0xFF	; 255
 6a8:	08 95       	ret

000006aa <__udivmodhi4>:
 6aa:	aa 1b       	sub	r26, r26
 6ac:	bb 1b       	sub	r27, r27
 6ae:	51 e1       	ldi	r21, 0x11	; 17
 6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <__udivmodhi4_ep>

000006b2 <__udivmodhi4_loop>:
 6b2:	aa 1f       	adc	r26, r26
 6b4:	bb 1f       	adc	r27, r27
 6b6:	a6 17       	cp	r26, r22
 6b8:	b7 07       	cpc	r27, r23
 6ba:	10 f0       	brcs	.+4      	; 0x6c0 <__udivmodhi4_ep>
 6bc:	a6 1b       	sub	r26, r22
 6be:	b7 0b       	sbc	r27, r23

000006c0 <__udivmodhi4_ep>:
 6c0:	88 1f       	adc	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	5a 95       	dec	r21
 6c6:	a9 f7       	brne	.-22     	; 0x6b2 <__udivmodhi4_loop>
 6c8:	80 95       	com	r24
 6ca:	90 95       	com	r25
 6cc:	bc 01       	movw	r22, r24
 6ce:	cd 01       	movw	r24, r26
 6d0:	08 95       	ret

000006d2 <_exit>:
 6d2:	f8 94       	cli

000006d4 <__stop_program>:
 6d4:	ff cf       	rjmp	.-2      	; 0x6d4 <__stop_program>
