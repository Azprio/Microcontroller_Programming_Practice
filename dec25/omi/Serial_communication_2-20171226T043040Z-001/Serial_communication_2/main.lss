
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000a1  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000008be  00000000  00000000  000007f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002a6  00000000  00000000  000010af  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000005d6  00000000  00000000  00001355  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b1  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000044c  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000120  00000000  00000000  00001fc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<lcd.h>

main(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	60 97       	sbiw	r28, 0x10	; 16
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	char c[16];
	DDRA = 0b10000000;
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	8a bb       	out	0x1a, r24	; 26
	LCDInit(0);// pass 1 for cursor blinking 
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0e 94 bc 00 	call	0x178	; 0x178 <LCDInit>
    LCDClear();
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
  92:	fe 01       	movw	r30, r28
  94:	31 96       	adiw	r30, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	20 ed       	ldi	r18, 0xD0	; 208
  98:	37 e0       	ldi	r19, 0x07	; 7
	int i = 0;
	while(1){
		c[i] = PINA;
  9a:	89 b3       	in	r24, 0x19	; 25
  9c:	81 93       	st	Z+, r24
		PORTA |= (1<<7);
  9e:	df 9a       	sbi	0x1b, 7	; 27
  a0:	c9 01       	movw	r24, r18
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
		_delay_ms(1);
		PORTA &= ~(1<<7);
  a6:	df 98       	cbi	0x1b, 7	; 27
  a8:	c9 01       	movw	r24, r18
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x3e>
		_delay_ms(1);
		i++;
		if(PINA == 0b01111111){break;}
  ae:	89 b3       	in	r24, 0x19	; 25
  b0:	8f 37       	cpi	r24, 0x7F	; 127
  b2:	99 f7       	brne	.-26     	; 0x9a <main+0x2e>
	}
		//c[0] = PINC;
		LCDWriteString(c);
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDWriteString>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	60 96       	adiw	r28, 0x10	; 16
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  d2:	81 b3       	in	r24, 0x11	; 17
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();		//Read mode
  d8:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
  da:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0xc>


	do
	{

		SET_E();
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	32 e0       	ldi	r19, 0x02	; 2
  e6:	94 9a       	sbi	0x12, 4	; 18
  e8:	82 2f       	mov	r24, r18
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
  ee:	80 b3       	in	r24, 0x10	; 16
		status=status<<4;
  f0:	82 95       	swap	r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	92 2f       	mov	r25, r18
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  fa:	94 98       	cbi	0x12, 4	; 18
  fc:	93 2f       	mov	r25, r19
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 102:	94 9a       	sbi	0x12, 4	; 18
 104:	92 2f       	mov	r25, r18
 106:	9a 95       	dec	r25
 108:	f1 f7       	brne	.-4      	; 0x106 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 10a:	90 b3       	in	r25, 0x10	; 16
 10c:	92 2f       	mov	r25, r18
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 112:	94 98       	cbi	0x12, 4	; 18
 114:	93 2f       	mov	r25, r19
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 11a:	87 fd       	sbrc	r24, 7
 11c:	e4 cf       	rjmp	.-56     	; 0xe6 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 11e:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 120:	81 b3       	in	r24, 0x11	; 17
 122:	8f 60       	ori	r24, 0x0F	; 15
 124:	81 bb       	out	0x11, r24	; 17

}
 126:	08 95       	ret

00000128 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 128:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 12a:	66 23       	and	r22, r22
 12c:	11 f4       	brne	.+4      	; 0x132 <LCDByte+0xa>
	CLEAR_RS();
 12e:	96 98       	cbi	0x12, 6	; 18
 130:	01 c0       	rjmp	.+2      	; 0x134 <LCDByte+0xc>
else
	SET_RS();
 132:	96 9a       	sbi	0x12, 6	; 18
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 13a:	94 9a       	sbi	0x12, 4	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	92 2f       	mov	r25, r18
 140:	92 95       	swap	r25
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 148:	92 bb       	out	0x12, r25	; 18
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	89 2f       	mov	r24, r25
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 152:	94 98       	cbi	0x12, 4	; 18
 154:	89 2f       	mov	r24, r25
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 15a:	94 9a       	sbi	0x12, 4	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	2f 70       	andi	r18, 0x0F	; 15
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 164:	82 bb       	out	0x12, r24	; 18
 166:	89 2f       	mov	r24, r25
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 16c:	94 98       	cbi	0x12, 4	; 18
 16e:	9a 95       	dec	r25
 170:	f1 f7       	brne	.-4      	; 0x16e <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 172:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDBusyLoop>
}
 176:	08 95       	ret

00000178 <LCDInit>:
	LCD_DATA_DDR|=0x0F;

}

void LCDInit(uint8_t style)
{
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17e:	80 e6       	ldi	r24, 0x60	; 96
 180:	9a ee       	ldi	r25, 0xEA	; 234
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDInit+0xa>

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 186:	81 b3       	in	r24, 0x11	; 17
 188:	8f 60       	ori	r24, 0x0F	; 15
 18a:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);
 18c:	8c 9a       	sbi	0x11, 4	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 18e:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 190:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 192:	82 b3       	in	r24, 0x12	; 18
 194:	80 7f       	andi	r24, 0xF0	; 240
 196:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 198:	94 98       	cbi	0x12, 4	; 18
	CLEAR_RW();
 19a:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 19c:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 19e:	85 e8       	ldi	r24, 0x85	; 133
 1a0:	98 2f       	mov	r25, r24
 1a2:	9a 95       	dec	r25
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCDInit+0x2a>

	//Set 4-bit mode
	_delay_us(50);	//tAS

	SET_E();
 1a6:	94 9a       	sbi	0x12, 4	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1a8:	91 9a       	sbi	0x12, 1	; 18
 1aa:	98 2f       	mov	r25, r24
 1ac:	9a 95       	dec	r25
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCDInit+0x34>
	_delay_us(50);
	CLEAR_E();
 1b0:	94 98       	cbi	0x12, 4	; 18
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCDInit+0x3a>
	_delay_us(50);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1b6:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1ba:	81 2f       	mov	r24, r17
 1bc:	8c 60       	ori	r24, 0x0C	; 12
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c4:	08 ec       	ldi	r16, 0xC8	; 200
 1c6:	10 e0       	ldi	r17, 0x00	; 0
 1c8:	c8 01       	movw	r24, r16
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCDInit+0x52>
	_delay_us(100);
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
 1d6:	c8 01       	movw	r24, r16
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDInit+0x60>
	_delay_us(100);
}
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	08 95       	ret

000001e2 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	msg++;
 1f0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 1f2:	88 81       	ld	r24, Y
 1f4:	88 23       	and	r24, r24
 1f6:	c9 f7       	brne	.-14     	; 0x1ea <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <LCDWriteString_sliding>:
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
 1fe:	4f 92       	push	r4
 200:	5f 92       	push	r5
 202:	6f 92       	push	r6
 204:	7f 92       	push	r7
 206:	8f 92       	push	r8
 208:	9f 92       	push	r9
 20a:	af 92       	push	r10
 20c:	bf 92       	push	r11
 20e:	cf 92       	push	r12
 210:	df 92       	push	r13
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	eb 01       	movw	r28, r22
  while (*strng>0)
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
 220:	3c 01       	movw	r6, r24
 222:	88 24       	eor	r8, r8
 224:	99 24       	eor	r9, r9
 226:	88 ec       	ldi	r24, 0xC8	; 200
 228:	48 2e       	mov	r4, r24
 22a:	51 2c       	mov	r5, r1
 22c:	42 c0       	rjmp	.+132    	; 0x2b2 <LCDWriteString_sliding+0xb4>
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
  {
	  LCDData(*strng++);
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	  _delay_ms(delay_ms);
 236:	c4 01       	movw	r24, r8
 238:	b3 01       	movw	r22, r6
 23a:	0e 94 1c 02 	call	0x438	; 0x438 <__floatunsisf>
 23e:	5b 01       	movw	r10, r22
 240:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	4a ef       	ldi	r20, 0xFA	; 250
 248:	54 e4       	ldi	r21, 0x44	; 68
 24a:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
 24e:	7b 01       	movw	r14, r22
 250:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 e8       	ldi	r20, 0x80	; 128
 258:	5f e3       	ldi	r21, 0x3F	; 63
 25a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__cmpsf2>
 25e:	88 23       	and	r24, r24
 260:	1c f4       	brge	.+6      	; 0x268 <LCDWriteString_sliding+0x6a>
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	22 c0       	rjmp	.+68     	; 0x2ac <LCDWriteString_sliding+0xae>
		__ticks = 1;
	else if (__tmp > 65535)
 268:	c8 01       	movw	r24, r16
 26a:	b7 01       	movw	r22, r14
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	3f ef       	ldi	r19, 0xFF	; 255
 270:	4f e7       	ldi	r20, 0x7F	; 127
 272:	57 e4       	ldi	r21, 0x47	; 71
 274:	0e 94 a6 02 	call	0x54c	; 0x54c <__gesf2>
 278:	18 16       	cp	r1, r24
 27a:	a4 f4       	brge	.+40     	; 0x2a4 <LCDWriteString_sliding+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 27c:	c6 01       	movw	r24, r12
 27e:	b5 01       	movw	r22, r10
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e2       	ldi	r20, 0x20	; 32
 286:	51 e4       	ldi	r21, 0x41	; 65
 288:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
 28c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__fixunssfsi>
 290:	05 c0       	rjmp	.+10     	; 0x29c <LCDWriteString_sliding+0x9e>
 292:	c2 01       	movw	r24, r4
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCDWriteString_sliding+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 298:	61 50       	subi	r22, 0x01	; 1
 29a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29c:	61 15       	cp	r22, r1
 29e:	71 05       	cpc	r23, r1
 2a0:	c1 f7       	brne	.-16     	; 0x292 <LCDWriteString_sliding+0x94>
 2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <LCDWriteString_sliding+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2a4:	c8 01       	movw	r24, r16
 2a6:	b7 01       	movw	r22, r14
 2a8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__fixunssfsi>
 2ac:	cb 01       	movw	r24, r22
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCDWriteString_sliding+0xb0>
 }
}
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
 2b2:	88 81       	ld	r24, Y
 2b4:	88 23       	and	r24, r24
 2b6:	09 f0       	breq	.+2      	; 0x2ba <LCDWriteString_sliding+0xbc>
 2b8:	ba cf       	rjmp	.-140    	; 0x22e <LCDWriteString_sliding+0x30>
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
  }
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	bf 90       	pop	r11
 2cc:	af 90       	pop	r10
 2ce:	9f 90       	pop	r9
 2d0:	8f 90       	pop	r8
 2d2:	7f 90       	pop	r7
 2d4:	6f 90       	pop	r6
 2d6:	5f 90       	pop	r5
 2d8:	4f 90       	pop	r4
 2da:	08 95       	ret

000002dc <LCDWriteInt>:
//-----------------------------------------------------
void LCDWriteInt(int val,unsigned int field_length)
{
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	df 93       	push	r29
 2e6:	cf 93       	push	r28
 2e8:	00 d0       	rcall	.+0      	; 0x2ea <LCDWriteInt+0xe>
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <LCDWriteInt+0x10>
 2ec:	0f 92       	push	r0
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	9c 01       	movw	r18, r24
 2f4:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2f6:	fe 01       	movw	r30, r28
 2f8:	31 96       	adiw	r30, 0x01	; 1
 2fa:	85 e0       	ldi	r24, 0x05	; 5
 2fc:	df 01       	movw	r26, r30
 2fe:	1d 92       	st	X+, r1
 300:	8a 95       	dec	r24
 302:	e9 f7       	brne	.-6      	; 0x2fe <LCDWriteInt+0x22>
 304:	fe 01       	movw	r30, r28
 306:	35 96       	adiw	r30, 0x05	; 5
 308:	0d c0       	rjmp	.+26     	; 0x324 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 30a:	c9 01       	movw	r24, r18
 30c:	6a e0       	ldi	r22, 0x0A	; 10
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	0e 94 35 03 	call	0x66a	; 0x66a <__divmodhi4>
 314:	80 83       	st	Z, r24
	val=val/10;
 316:	c9 01       	movw	r24, r18
 318:	6a e0       	ldi	r22, 0x0A	; 10
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	0e 94 35 03 	call	0x66a	; 0x66a <__divmodhi4>
 320:	9b 01       	movw	r18, r22
 322:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 324:	21 15       	cp	r18, r1
 326:	31 05       	cpc	r19, r1
 328:	81 f7       	brne	.-32     	; 0x30a <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 32a:	bf ef       	ldi	r27, 0xFF	; 255
 32c:	0f 3f       	cpi	r16, 0xFF	; 255
 32e:	1b 07       	cpc	r17, r27
 330:	79 f4       	brne	.+30     	; 0x350 <LCDWriteInt+0x74>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 336:	ae 01       	movw	r20, r28
 338:	4f 5f       	subi	r20, 0xFF	; 255
 33a:	5f 4f       	sbci	r21, 0xFF	; 255
 33c:	02 c0       	rjmp	.+4      	; 0x342 <LCDWriteInt+0x66>
 33e:	2f 5f       	subi	r18, 0xFF	; 255
 340:	3f 4f       	sbci	r19, 0xFF	; 255
 342:	fa 01       	movw	r30, r20
 344:	e2 0f       	add	r30, r18
 346:	f3 1f       	adc	r31, r19
 348:	80 81       	ld	r24, Z
 34a:	88 23       	and	r24, r24
 34c:	c1 f3       	breq	.-16     	; 0x33e <LCDWriteInt+0x62>
 34e:	04 c0       	rjmp	.+8      	; 0x358 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 350:	25 e0       	ldi	r18, 0x05	; 5
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	20 1b       	sub	r18, r16
 356:	31 0b       	sbc	r19, r17
 358:	7e 01       	movw	r14, r28
 35a:	08 94       	sec
 35c:	e1 1c       	adc	r14, r1
 35e:	f1 1c       	adc	r15, r1
 360:	e2 0e       	add	r14, r18
 362:	f3 1e       	adc	r15, r19
 364:	89 01       	movw	r16, r18
 366:	09 c0       	rjmp	.+18     	; 0x37a <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 368:	f7 01       	movw	r30, r14
 36a:	81 91       	ld	r24, Z+
 36c:	7f 01       	movw	r14, r30
 36e:	80 5d       	subi	r24, 0xD0	; 208
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 376:	0f 5f       	subi	r16, 0xFF	; 255
 378:	1f 4f       	sbci	r17, 0xFF	; 255
 37a:	05 30       	cpi	r16, 0x05	; 5
 37c:	11 05       	cpc	r17, r1
 37e:	a4 f3       	brlt	.-24     	; 0x368 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	cf 91       	pop	r28
 38c:	df 91       	pop	r29
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	08 95       	ret

00000398 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 398:	df 93       	push	r29
 39a:	cf 93       	push	r28
 39c:	00 d0       	rcall	.+0      	; 0x39e <LCDGotoXY+0x6>
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <LCDGotoXY+0x8>
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	98 2f       	mov	r25, r24
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
    if(x<20)
 3a6:	84 31       	cpi	r24, 0x14	; 20
 3a8:	80 f4       	brcc	.+32     	; 0x3ca <LCDGotoXY+0x32>
{
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
 3aa:	80 e8       	ldi	r24, 0x80	; 128
 3ac:	89 83       	std	Y+1, r24	; 0x01
 3ae:	80 ec       	ldi	r24, 0xC0	; 192
 3b0:	8a 83       	std	Y+2, r24	; 0x02
 3b2:	84 e9       	ldi	r24, 0x94	; 148
 3b4:	8b 83       	std	Y+3, r24	; 0x03
 3b6:	84 ed       	ldi	r24, 0xD4	; 212
 3b8:	8c 83       	std	Y+4, r24	; 0x04
    if(x<20)
    LCDCmd(line[y]+x);//if(y==0)x|=0x80,if(y==1)x|=0x80,if(y==2)x|=0x80,if(y==3)x|=0x80
 3ba:	fe 01       	movw	r30, r28
 3bc:	e6 0f       	add	r30, r22
 3be:	f1 1d       	adc	r31, r1
 3c0:	81 81       	ldd	r24, Z+1	; 0x01
 3c2:	89 0f       	add	r24, r25
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>

}
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	cf 91       	pop	r28
 3d4:	df 91       	pop	r29
 3d6:	08 95       	ret

000003d8 <__cmpsf2>:
 3d8:	6c d0       	rcall	.+216    	; 0x4b2 <__fp_cmp>
 3da:	08 f4       	brcc	.+2      	; 0x3de <__cmpsf2+0x6>
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	08 95       	ret

000003e0 <__fixunssfsi>:
 3e0:	94 d0       	rcall	.+296    	; 0x50a <__fp_splitA>
 3e2:	88 f0       	brcs	.+34     	; 0x406 <__fixunssfsi+0x26>
 3e4:	9f 57       	subi	r25, 0x7F	; 127
 3e6:	90 f0       	brcs	.+36     	; 0x40c <__fixunssfsi+0x2c>
 3e8:	b9 2f       	mov	r27, r25
 3ea:	99 27       	eor	r25, r25
 3ec:	b7 51       	subi	r27, 0x17	; 23
 3ee:	a0 f0       	brcs	.+40     	; 0x418 <__fixunssfsi+0x38>
 3f0:	d1 f0       	breq	.+52     	; 0x426 <__fixunssfsi+0x46>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	88 1f       	adc	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	1a f0       	brmi	.+6      	; 0x402 <__fixunssfsi+0x22>
 3fc:	ba 95       	dec	r27
 3fe:	c9 f7       	brne	.-14     	; 0x3f2 <__fixunssfsi+0x12>
 400:	12 c0       	rjmp	.+36     	; 0x426 <__fixunssfsi+0x46>
 402:	b1 30       	cpi	r27, 0x01	; 1
 404:	81 f0       	breq	.+32     	; 0x426 <__fixunssfsi+0x46>
 406:	9b d0       	rcall	.+310    	; 0x53e <__fp_zero>
 408:	b1 e0       	ldi	r27, 0x01	; 1
 40a:	08 95       	ret
 40c:	98 c0       	rjmp	.+304    	; 0x53e <__fp_zero>
 40e:	67 2f       	mov	r22, r23
 410:	78 2f       	mov	r23, r24
 412:	88 27       	eor	r24, r24
 414:	b8 5f       	subi	r27, 0xF8	; 248
 416:	39 f0       	breq	.+14     	; 0x426 <__fixunssfsi+0x46>
 418:	b9 3f       	cpi	r27, 0xF9	; 249
 41a:	cc f3       	brlt	.-14     	; 0x40e <__fixunssfsi+0x2e>
 41c:	86 95       	lsr	r24
 41e:	77 95       	ror	r23
 420:	67 95       	ror	r22
 422:	b3 95       	inc	r27
 424:	d9 f7       	brne	.-10     	; 0x41c <__fixunssfsi+0x3c>
 426:	3e f4       	brtc	.+14     	; 0x436 <__fixunssfsi+0x56>
 428:	90 95       	com	r25
 42a:	80 95       	com	r24
 42c:	70 95       	com	r23
 42e:	61 95       	neg	r22
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	08 95       	ret

00000438 <__floatunsisf>:
 438:	e8 94       	clt
 43a:	09 c0       	rjmp	.+18     	; 0x44e <__floatsisf+0x12>

0000043c <__floatsisf>:
 43c:	97 fb       	bst	r25, 7
 43e:	3e f4       	brtc	.+14     	; 0x44e <__floatsisf+0x12>
 440:	90 95       	com	r25
 442:	80 95       	com	r24
 444:	70 95       	com	r23
 446:	61 95       	neg	r22
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	8f 4f       	sbci	r24, 0xFF	; 255
 44c:	9f 4f       	sbci	r25, 0xFF	; 255
 44e:	99 23       	and	r25, r25
 450:	a9 f0       	breq	.+42     	; 0x47c <__floatsisf+0x40>
 452:	f9 2f       	mov	r31, r25
 454:	96 e9       	ldi	r25, 0x96	; 150
 456:	bb 27       	eor	r27, r27
 458:	93 95       	inc	r25
 45a:	f6 95       	lsr	r31
 45c:	87 95       	ror	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b7 95       	ror	r27
 464:	f1 11       	cpse	r31, r1
 466:	f8 cf       	rjmp	.-16     	; 0x458 <__floatsisf+0x1c>
 468:	fa f4       	brpl	.+62     	; 0x4a8 <__floatsisf+0x6c>
 46a:	bb 0f       	add	r27, r27
 46c:	11 f4       	brne	.+4      	; 0x472 <__floatsisf+0x36>
 46e:	60 ff       	sbrs	r22, 0
 470:	1b c0       	rjmp	.+54     	; 0x4a8 <__floatsisf+0x6c>
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	16 c0       	rjmp	.+44     	; 0x4a8 <__floatsisf+0x6c>
 47c:	88 23       	and	r24, r24
 47e:	11 f0       	breq	.+4      	; 0x484 <__floatsisf+0x48>
 480:	96 e9       	ldi	r25, 0x96	; 150
 482:	11 c0       	rjmp	.+34     	; 0x4a6 <__floatsisf+0x6a>
 484:	77 23       	and	r23, r23
 486:	21 f0       	breq	.+8      	; 0x490 <__floatsisf+0x54>
 488:	9e e8       	ldi	r25, 0x8E	; 142
 48a:	87 2f       	mov	r24, r23
 48c:	76 2f       	mov	r23, r22
 48e:	05 c0       	rjmp	.+10     	; 0x49a <__floatsisf+0x5e>
 490:	66 23       	and	r22, r22
 492:	71 f0       	breq	.+28     	; 0x4b0 <__floatsisf+0x74>
 494:	96 e8       	ldi	r25, 0x86	; 134
 496:	86 2f       	mov	r24, r22
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	2a f0       	brmi	.+10     	; 0x4a8 <__floatsisf+0x6c>
 49e:	9a 95       	dec	r25
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	da f7       	brpl	.-10     	; 0x49e <__floatsisf+0x62>
 4a8:	88 0f       	add	r24, r24
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	97 f9       	bld	r25, 7
 4b0:	08 95       	ret

000004b2 <__fp_cmp>:
 4b2:	99 0f       	add	r25, r25
 4b4:	00 08       	sbc	r0, r0
 4b6:	55 0f       	add	r21, r21
 4b8:	aa 0b       	sbc	r26, r26
 4ba:	e0 e8       	ldi	r30, 0x80	; 128
 4bc:	fe ef       	ldi	r31, 0xFE	; 254
 4be:	16 16       	cp	r1, r22
 4c0:	17 06       	cpc	r1, r23
 4c2:	e8 07       	cpc	r30, r24
 4c4:	f9 07       	cpc	r31, r25
 4c6:	c0 f0       	brcs	.+48     	; 0x4f8 <__fp_cmp+0x46>
 4c8:	12 16       	cp	r1, r18
 4ca:	13 06       	cpc	r1, r19
 4cc:	e4 07       	cpc	r30, r20
 4ce:	f5 07       	cpc	r31, r21
 4d0:	98 f0       	brcs	.+38     	; 0x4f8 <__fp_cmp+0x46>
 4d2:	62 1b       	sub	r22, r18
 4d4:	73 0b       	sbc	r23, r19
 4d6:	84 0b       	sbc	r24, r20
 4d8:	95 0b       	sbc	r25, r21
 4da:	39 f4       	brne	.+14     	; 0x4ea <__fp_cmp+0x38>
 4dc:	0a 26       	eor	r0, r26
 4de:	61 f0       	breq	.+24     	; 0x4f8 <__fp_cmp+0x46>
 4e0:	23 2b       	or	r18, r19
 4e2:	24 2b       	or	r18, r20
 4e4:	25 2b       	or	r18, r21
 4e6:	21 f4       	brne	.+8      	; 0x4f0 <__fp_cmp+0x3e>
 4e8:	08 95       	ret
 4ea:	0a 26       	eor	r0, r26
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <__fp_cmp+0x3e>
 4ee:	a1 40       	sbci	r26, 0x01	; 1
 4f0:	a6 95       	lsr	r26
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	81 1d       	adc	r24, r1
 4f6:	81 1d       	adc	r24, r1
 4f8:	08 95       	ret

000004fa <__fp_split3>:
 4fa:	57 fd       	sbrc	r21, 7
 4fc:	90 58       	subi	r25, 0x80	; 128
 4fe:	44 0f       	add	r20, r20
 500:	55 1f       	adc	r21, r21
 502:	59 f0       	breq	.+22     	; 0x51a <__fp_splitA+0x10>
 504:	5f 3f       	cpi	r21, 0xFF	; 255
 506:	71 f0       	breq	.+28     	; 0x524 <__fp_splitA+0x1a>
 508:	47 95       	ror	r20

0000050a <__fp_splitA>:
 50a:	88 0f       	add	r24, r24
 50c:	97 fb       	bst	r25, 7
 50e:	99 1f       	adc	r25, r25
 510:	61 f0       	breq	.+24     	; 0x52a <__fp_splitA+0x20>
 512:	9f 3f       	cpi	r25, 0xFF	; 255
 514:	79 f0       	breq	.+30     	; 0x534 <__fp_splitA+0x2a>
 516:	87 95       	ror	r24
 518:	08 95       	ret
 51a:	12 16       	cp	r1, r18
 51c:	13 06       	cpc	r1, r19
 51e:	14 06       	cpc	r1, r20
 520:	55 1f       	adc	r21, r21
 522:	f2 cf       	rjmp	.-28     	; 0x508 <__fp_split3+0xe>
 524:	46 95       	lsr	r20
 526:	f1 df       	rcall	.-30     	; 0x50a <__fp_splitA>
 528:	08 c0       	rjmp	.+16     	; 0x53a <__fp_splitA+0x30>
 52a:	16 16       	cp	r1, r22
 52c:	17 06       	cpc	r1, r23
 52e:	18 06       	cpc	r1, r24
 530:	99 1f       	adc	r25, r25
 532:	f1 cf       	rjmp	.-30     	; 0x516 <__fp_splitA+0xc>
 534:	86 95       	lsr	r24
 536:	71 05       	cpc	r23, r1
 538:	61 05       	cpc	r22, r1
 53a:	08 94       	sec
 53c:	08 95       	ret

0000053e <__fp_zero>:
 53e:	e8 94       	clt

00000540 <__fp_szero>:
 540:	bb 27       	eor	r27, r27
 542:	66 27       	eor	r22, r22
 544:	77 27       	eor	r23, r23
 546:	cb 01       	movw	r24, r22
 548:	97 f9       	bld	r25, 7
 54a:	08 95       	ret

0000054c <__gesf2>:
 54c:	b2 df       	rcall	.-156    	; 0x4b2 <__fp_cmp>
 54e:	08 f4       	brcc	.+2      	; 0x552 <__gesf2+0x6>
 550:	8f ef       	ldi	r24, 0xFF	; 255
 552:	08 95       	ret

00000554 <__mulsf3>:
 554:	0b d0       	rcall	.+22     	; 0x56c <__mulsf3x>
 556:	78 c0       	rjmp	.+240    	; 0x648 <__fp_round>
 558:	69 d0       	rcall	.+210    	; 0x62c <__fp_pscA>
 55a:	28 f0       	brcs	.+10     	; 0x566 <__mulsf3+0x12>
 55c:	6e d0       	rcall	.+220    	; 0x63a <__fp_pscB>
 55e:	18 f0       	brcs	.+6      	; 0x566 <__mulsf3+0x12>
 560:	95 23       	and	r25, r21
 562:	09 f0       	breq	.+2      	; 0x566 <__mulsf3+0x12>
 564:	5a c0       	rjmp	.+180    	; 0x61a <__fp_inf>
 566:	5f c0       	rjmp	.+190    	; 0x626 <__fp_nan>
 568:	11 24       	eor	r1, r1
 56a:	ea cf       	rjmp	.-44     	; 0x540 <__fp_szero>

0000056c <__mulsf3x>:
 56c:	c6 df       	rcall	.-116    	; 0x4fa <__fp_split3>
 56e:	a0 f3       	brcs	.-24     	; 0x558 <__mulsf3+0x4>

00000570 <__mulsf3_pse>:
 570:	95 9f       	mul	r25, r21
 572:	d1 f3       	breq	.-12     	; 0x568 <__mulsf3+0x14>
 574:	95 0f       	add	r25, r21
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	55 1f       	adc	r21, r21
 57a:	62 9f       	mul	r22, r18
 57c:	f0 01       	movw	r30, r0
 57e:	72 9f       	mul	r23, r18
 580:	bb 27       	eor	r27, r27
 582:	f0 0d       	add	r31, r0
 584:	b1 1d       	adc	r27, r1
 586:	63 9f       	mul	r22, r19
 588:	aa 27       	eor	r26, r26
 58a:	f0 0d       	add	r31, r0
 58c:	b1 1d       	adc	r27, r1
 58e:	aa 1f       	adc	r26, r26
 590:	64 9f       	mul	r22, r20
 592:	66 27       	eor	r22, r22
 594:	b0 0d       	add	r27, r0
 596:	a1 1d       	adc	r26, r1
 598:	66 1f       	adc	r22, r22
 59a:	82 9f       	mul	r24, r18
 59c:	22 27       	eor	r18, r18
 59e:	b0 0d       	add	r27, r0
 5a0:	a1 1d       	adc	r26, r1
 5a2:	62 1f       	adc	r22, r18
 5a4:	73 9f       	mul	r23, r19
 5a6:	b0 0d       	add	r27, r0
 5a8:	a1 1d       	adc	r26, r1
 5aa:	62 1f       	adc	r22, r18
 5ac:	83 9f       	mul	r24, r19
 5ae:	a0 0d       	add	r26, r0
 5b0:	61 1d       	adc	r22, r1
 5b2:	22 1f       	adc	r18, r18
 5b4:	74 9f       	mul	r23, r20
 5b6:	33 27       	eor	r19, r19
 5b8:	a0 0d       	add	r26, r0
 5ba:	61 1d       	adc	r22, r1
 5bc:	23 1f       	adc	r18, r19
 5be:	84 9f       	mul	r24, r20
 5c0:	60 0d       	add	r22, r0
 5c2:	21 1d       	adc	r18, r1
 5c4:	82 2f       	mov	r24, r18
 5c6:	76 2f       	mov	r23, r22
 5c8:	6a 2f       	mov	r22, r26
 5ca:	11 24       	eor	r1, r1
 5cc:	9f 57       	subi	r25, 0x7F	; 127
 5ce:	50 40       	sbci	r21, 0x00	; 0
 5d0:	8a f0       	brmi	.+34     	; 0x5f4 <__mulsf3_pse+0x84>
 5d2:	e1 f0       	breq	.+56     	; 0x60c <__mulsf3_pse+0x9c>
 5d4:	88 23       	and	r24, r24
 5d6:	4a f0       	brmi	.+18     	; 0x5ea <__mulsf3_pse+0x7a>
 5d8:	ee 0f       	add	r30, r30
 5da:	ff 1f       	adc	r31, r31
 5dc:	bb 1f       	adc	r27, r27
 5de:	66 1f       	adc	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	88 1f       	adc	r24, r24
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	50 40       	sbci	r21, 0x00	; 0
 5e8:	a9 f7       	brne	.-22     	; 0x5d4 <__mulsf3_pse+0x64>
 5ea:	9e 3f       	cpi	r25, 0xFE	; 254
 5ec:	51 05       	cpc	r21, r1
 5ee:	70 f0       	brcs	.+28     	; 0x60c <__mulsf3_pse+0x9c>
 5f0:	14 c0       	rjmp	.+40     	; 0x61a <__fp_inf>
 5f2:	a6 cf       	rjmp	.-180    	; 0x540 <__fp_szero>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	ec f3       	brlt	.-6      	; 0x5f2 <__mulsf3_pse+0x82>
 5f8:	98 3e       	cpi	r25, 0xE8	; 232
 5fa:	dc f3       	brlt	.-10     	; 0x5f2 <__mulsf3_pse+0x82>
 5fc:	86 95       	lsr	r24
 5fe:	77 95       	ror	r23
 600:	67 95       	ror	r22
 602:	b7 95       	ror	r27
 604:	f7 95       	ror	r31
 606:	e7 95       	ror	r30
 608:	9f 5f       	subi	r25, 0xFF	; 255
 60a:	c1 f7       	brne	.-16     	; 0x5fc <__mulsf3_pse+0x8c>
 60c:	fe 2b       	or	r31, r30
 60e:	88 0f       	add	r24, r24
 610:	91 1d       	adc	r25, r1
 612:	96 95       	lsr	r25
 614:	87 95       	ror	r24
 616:	97 f9       	bld	r25, 7
 618:	08 95       	ret

0000061a <__fp_inf>:
 61a:	97 f9       	bld	r25, 7
 61c:	9f 67       	ori	r25, 0x7F	; 127
 61e:	80 e8       	ldi	r24, 0x80	; 128
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	08 95       	ret

00000626 <__fp_nan>:
 626:	9f ef       	ldi	r25, 0xFF	; 255
 628:	80 ec       	ldi	r24, 0xC0	; 192
 62a:	08 95       	ret

0000062c <__fp_pscA>:
 62c:	00 24       	eor	r0, r0
 62e:	0a 94       	dec	r0
 630:	16 16       	cp	r1, r22
 632:	17 06       	cpc	r1, r23
 634:	18 06       	cpc	r1, r24
 636:	09 06       	cpc	r0, r25
 638:	08 95       	ret

0000063a <__fp_pscB>:
 63a:	00 24       	eor	r0, r0
 63c:	0a 94       	dec	r0
 63e:	12 16       	cp	r1, r18
 640:	13 06       	cpc	r1, r19
 642:	14 06       	cpc	r1, r20
 644:	05 06       	cpc	r0, r21
 646:	08 95       	ret

00000648 <__fp_round>:
 648:	09 2e       	mov	r0, r25
 64a:	03 94       	inc	r0
 64c:	00 0c       	add	r0, r0
 64e:	11 f4       	brne	.+4      	; 0x654 <__fp_round+0xc>
 650:	88 23       	and	r24, r24
 652:	52 f0       	brmi	.+20     	; 0x668 <__fp_round+0x20>
 654:	bb 0f       	add	r27, r27
 656:	40 f4       	brcc	.+16     	; 0x668 <__fp_round+0x20>
 658:	bf 2b       	or	r27, r31
 65a:	11 f4       	brne	.+4      	; 0x660 <__fp_round+0x18>
 65c:	60 ff       	sbrs	r22, 0
 65e:	04 c0       	rjmp	.+8      	; 0x668 <__fp_round+0x20>
 660:	6f 5f       	subi	r22, 0xFF	; 255
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8f 4f       	sbci	r24, 0xFF	; 255
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	08 95       	ret

0000066a <__divmodhi4>:
 66a:	97 fb       	bst	r25, 7
 66c:	09 2e       	mov	r0, r25
 66e:	07 26       	eor	r0, r23
 670:	0a d0       	rcall	.+20     	; 0x686 <__divmodhi4_neg1>
 672:	77 fd       	sbrc	r23, 7
 674:	04 d0       	rcall	.+8      	; 0x67e <__divmodhi4_neg2>
 676:	0c d0       	rcall	.+24     	; 0x690 <__udivmodhi4>
 678:	06 d0       	rcall	.+12     	; 0x686 <__divmodhi4_neg1>
 67a:	00 20       	and	r0, r0
 67c:	1a f4       	brpl	.+6      	; 0x684 <__divmodhi4_exit>

0000067e <__divmodhi4_neg2>:
 67e:	70 95       	com	r23
 680:	61 95       	neg	r22
 682:	7f 4f       	sbci	r23, 0xFF	; 255

00000684 <__divmodhi4_exit>:
 684:	08 95       	ret

00000686 <__divmodhi4_neg1>:
 686:	f6 f7       	brtc	.-4      	; 0x684 <__divmodhi4_exit>
 688:	90 95       	com	r25
 68a:	81 95       	neg	r24
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	08 95       	ret

00000690 <__udivmodhi4>:
 690:	aa 1b       	sub	r26, r26
 692:	bb 1b       	sub	r27, r27
 694:	51 e1       	ldi	r21, 0x11	; 17
 696:	07 c0       	rjmp	.+14     	; 0x6a6 <__udivmodhi4_ep>

00000698 <__udivmodhi4_loop>:
 698:	aa 1f       	adc	r26, r26
 69a:	bb 1f       	adc	r27, r27
 69c:	a6 17       	cp	r26, r22
 69e:	b7 07       	cpc	r27, r23
 6a0:	10 f0       	brcs	.+4      	; 0x6a6 <__udivmodhi4_ep>
 6a2:	a6 1b       	sub	r26, r22
 6a4:	b7 0b       	sbc	r27, r23

000006a6 <__udivmodhi4_ep>:
 6a6:	88 1f       	adc	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	5a 95       	dec	r21
 6ac:	a9 f7       	brne	.-22     	; 0x698 <__udivmodhi4_loop>
 6ae:	80 95       	com	r24
 6b0:	90 95       	com	r25
 6b2:	bc 01       	movw	r22, r24
 6b4:	cd 01       	movw	r24, r26
 6b6:	08 95       	ret

000006b8 <_exit>:
 6b8:	f8 94       	cli

000006ba <__stop_program>:
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <__stop_program>
