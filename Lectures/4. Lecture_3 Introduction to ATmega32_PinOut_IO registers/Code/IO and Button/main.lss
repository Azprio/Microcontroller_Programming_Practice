
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000010f  00000000  00000000  00000137  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b0  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000014c  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e2  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000038  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  DDRA=DDRA|0b00000011;//define as output
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8a bb       	out	0x1a, r24	; 26
  DDRA=DDRA&0b11110011;//define as input
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	83 7f       	andi	r24, 0xF3	; 243
  76:	8a bb       	out	0x1a, r24	; 26
  while(1)
  {
    if(PINA & 0b00000100)
	  PORTA=PORTA^0b00000001;
  78:	51 e0       	ldi	r21, 0x01	; 1
	if(PINA & 0b00001000)
	  PORTA=PORTA^0b00000010;
  7a:	42 e0       	ldi	r20, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7c:	28 ec       	ldi	r18, 0xC8	; 200
  7e:	30 e0       	ldi	r19, 0x00	; 0
{
  DDRA=DDRA|0b00000011;//define as output
  DDRA=DDRA&0b11110011;//define as input
  while(1)
  {
    if(PINA & 0b00000100)
  80:	ca 9b       	sbis	0x19, 2	; 25
  82:	03 c0       	rjmp	.+6      	; 0x8a <main+0x1e>
	  PORTA=PORTA^0b00000001;
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	85 27       	eor	r24, r21
  88:	8b bb       	out	0x1b, r24	; 27
	if(PINA & 0b00001000)
  8a:	cb 9b       	sbis	0x19, 3	; 25
  8c:	03 c0       	rjmp	.+6      	; 0x94 <main+0x28>
	  PORTA=PORTA^0b00000010;
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	84 27       	eor	r24, r20
  92:	8b bb       	out	0x1b, r24	; 27
  94:	88 e8       	ldi	r24, 0x88	; 136
  96:	93 e1       	ldi	r25, 0x13	; 19
  98:	f9 01       	movw	r30, r18
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a0:	79 f3       	breq	.-34     	; 0x80 <main+0x14>
  a2:	fa cf       	rjmp	.-12     	; 0x98 <main+0x2c>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
