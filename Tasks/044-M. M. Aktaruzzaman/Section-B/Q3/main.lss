
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000129  00000000  00000000  0000014f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c8  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000139  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c8  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>


int main(){
 DDRC |=0b10101010; 
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8a 6a       	ori	r24, 0xAA	; 170
  70:	84 bb       	out	0x14, r24	; 20
  72:	47 e0       	ldi	r20, 0x07	; 7
  74:	50 e0       	ldi	r21, 0x00	; 0
 
while(1){
	
	for(int i=7; i>=1; i--){
	PORTC |= (1<<i);
  76:	a1 e0       	ldi	r26, 0x01	; 1
  78:	b0 e0       	ldi	r27, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	68 ec       	ldi	r22, 0xC8	; 200
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	25 b3       	in	r18, 0x15	; 21
  80:	cd 01       	movw	r24, r26
  82:	04 2e       	mov	r0, r20
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <main+0x1a>
  8e:	98 2f       	mov	r25, r24
  90:	28 2b       	or	r18, r24
  92:	25 bb       	out	0x15, r18	; 21
  94:	28 ee       	ldi	r18, 0xE8	; 232
  96:	33 e0       	ldi	r19, 0x03	; 3
  98:	fb 01       	movw	r30, r22
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a2:	d1 f7       	brne	.-12     	; 0x98 <main+0x2c>
	_delay_ms(100);
	PORTC &= ~(1<<i);
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	90 95       	com	r25
  a8:	98 23       	and	r25, r24
  aa:	95 bb       	out	0x15, r25	; 21
int main(){
 DDRC |=0b10101010; 
 
while(1){
	
	for(int i=7; i>=1; i--){
  ac:	42 50       	subi	r20, 0x02	; 2
  ae:	50 40       	sbci	r21, 0x00	; 0
  b0:	14 16       	cp	r1, r20
  b2:	15 06       	cpc	r1, r21
  b4:	24 f3       	brlt	.-56     	; 0x7e <main+0x12>
  b6:	47 e0       	ldi	r20, 0x07	; 7
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	e1 cf       	rjmp	.-62     	; 0x7e <main+0x12>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
