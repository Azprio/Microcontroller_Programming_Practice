
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000260  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006f  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002da  00000000  00000000  0000038b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001f9  00000000  00000000  00000665  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a7  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011c  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a6  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  7a:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Initialization>:
#include<bcd_lib.h>

void ADC_Initialization()
{

ADMUX =(1<<REFS0);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADEN);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	86 b9       	out	0x06, r24	; 6
 
}
  8a:	08 95       	ret

0000008c <Read_ADC>:

int Read_ADC()
{

ADMUX |=(1<<MUX1) | (1<<MUX2);
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	86 60       	ori	r24, 0x06	; 6
  90:	87 b9       	out	0x07, r24	; 7
ADCSRA |= (1<<ADSC);
  92:	36 9a       	sbi	0x06, 6	; 6

while (ADCSRA & 0b01000000)
  94:	36 99       	sbic	0x06, 6	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <Read_ADC+0x8>
{
}

int value = 0;
value = ADCL; 
  98:	24 b1       	in	r18, 0x04	; 4
  9a:	30 e0       	ldi	r19, 0x00	; 0
value |=(ADCH << 8);
  9c:	45 b1       	in	r20, 0x05	; 5
  9e:	94 2f       	mov	r25, r20
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	28 2b       	or	r18, r24
  a4:	39 2b       	or	r19, r25
return value;

}
  a6:	c9 01       	movw	r24, r18
  a8:	08 95       	ret

000000aa <main>:


int main(){
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
#include<bcd_lib.h>

void ADC_Initialization()
{

ADMUX =(1<<REFS0);
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADEN);
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	86 b9       	out	0x06, r24	; 6


int main(){
ADC_Initialization();

DDRC = DDRC | 0b11111111;
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
DDRD = DDRD | 0b00001111;
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	8f 60       	ori	r24, 0x0F	; 15
  c0:	81 bb       	out	0x11, r24	; 17
DDRB |=0x10; 
  c2:	bc 9a       	sbi	0x17, 4	; 23

while(1){

int value = Read_ADC();
  c4:	0e 94 46 00 	call	0x8c	; 0x8c <Read_ADC>
  c8:	8c 01       	movw	r16, r24
BCD_Converter(value);
  ca:	0e 94 9a 00 	call	0x134	; 0x134 <BCD_Converter>
if (value<700){
  ce:	0c 5b       	subi	r16, 0xBC	; 188
  d0:	12 40       	sbci	r17, 0x02	; 2
  d2:	14 f4       	brge	.+4      	; 0xd8 <main+0x2e>
		PORTB |= (1<<PB4); 
  d4:	c4 9a       	sbi	0x18, 4	; 24
  d6:	f6 cf       	rjmp	.-20     	; 0xc4 <main+0x1a>
}
else{
		PORTB &= ~(1<<PB4); 
  d8:	c4 98       	cbi	0x18, 4	; 24
  da:	f4 cf       	rjmp	.-24     	; 0xc4 <main+0x1a>

000000dc <display>:
#include<avr/io.h>
#include<util/delay.h>

void display(unsigned char seg,unsigned char data){
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	28 97       	sbiw	r28, 0x08	; 8
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	98 2f       	mov	r25, r24
int s[4]={0xfe,0xfd,0xfb,0x07};
  f2:	fe 01       	movw	r30, r28
  f4:	31 96       	adiw	r30, 0x01	; 1
  f6:	a0 e6       	ldi	r26, 0x60	; 96
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	0d 90       	ld	r0, X+
  fe:	01 92       	st	Z+, r0
 100:	81 50       	subi	r24, 0x01	; 1
 102:	e1 f7       	brne	.-8      	; 0xfc <display+0x20>
PORTD=0xff;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	82 bb       	out	0x12, r24	; 18
PORTC=data;
 108:	65 bb       	out	0x15, r22	; 21
PORTD=s[seg];  
 10a:	e9 2f       	mov	r30, r25
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	ec 0f       	add	r30, r28
 114:	fd 1f       	adc	r31, r29
 116:	81 81       	ldd	r24, Z+1	; 0x01
 118:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <display+0x42>
_delay_ms(10);
}
 122:	28 96       	adiw	r28, 0x08	; 8
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <BCD_Converter>:

void BCD_Converter(int given){
 134:	9f 92       	push	r9
 136:	af 92       	push	r10
 138:	bf 92       	push	r11
 13a:	cf 92       	push	r12
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	28 97       	sbiw	r28, 0x08	; 8
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	7c 01       	movw	r14, r24
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
		 a = (given/1000);
 15c:	68 ee       	ldi	r22, 0xE8	; 232
 15e:	73 e0       	ldi	r23, 0x03	; 3
 160:	0e 94 07 01 	call	0x20e	; 0x20e <__divmodhi4>
 164:	46 2f       	mov	r20, r22
 166:	03 e0       	ldi	r16, 0x03	; 3
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
#include<avr/io.h>
#include<util/delay.h>

void display(unsigned char seg,unsigned char data){
int s[4]={0xfe,0xfd,0xfb,0x07};
 16e:	6e 01       	movw	r12, r28
 170:	08 94       	sec
 172:	c1 1c       	adc	r12, r1
 174:	d1 1c       	adc	r13, r1
PORTD=0xff;
 176:	99 24       	eor	r9, r9
 178:	9a 94       	dec	r9
 17a:	e0 e2       	ldi	r30, 0x20	; 32
 17c:	ae 2e       	mov	r10, r30
 17e:	ee e4       	ldi	r30, 0x4E	; 78
 180:	be 2e       	mov	r11, r30
void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
 182:	01 15       	cp	r16, r1
 184:	11 05       	cpc	r17, r1
 186:	11 f4       	brne	.+4      	; 0x18c <BCD_Converter+0x58>
 188:	84 2f       	mov	r24, r20
 18a:	09 c0       	rjmp	.+18     	; 0x19e <BCD_Converter+0x6a>
		 a = (given/1000);
		}
	else{
		 a = (given/j)%10;
 18c:	c7 01       	movw	r24, r14
 18e:	b9 01       	movw	r22, r18
 190:	0e 94 07 01 	call	0x20e	; 0x20e <__divmodhi4>
 194:	cb 01       	movw	r24, r22
 196:	6a e0       	ldi	r22, 0x0A	; 10
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 07 01 	call	0x20e	; 0x20e <__divmodhi4>
#include<avr/io.h>
#include<util/delay.h>

void display(unsigned char seg,unsigned char data){
int s[4]={0xfe,0xfd,0xfb,0x07};
 19e:	d6 01       	movw	r26, r12
 1a0:	e0 e6       	ldi	r30, 0x60	; 96
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	98 e0       	ldi	r25, 0x08	; 8
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	91 50       	subi	r25, 0x01	; 1
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <BCD_Converter+0x72>
PORTD=0xff;
 1ae:	92 ba       	out	0x12, r9	; 18
PORTC=data;
 1b0:	85 bb       	out	0x15, r24	; 21
PORTD=s[seg];  
 1b2:	e0 2f       	mov	r30, r16
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	ec 0d       	add	r30, r12
 1bc:	fd 1d       	adc	r31, r13
 1be:	80 81       	ld	r24, Z
 1c0:	82 bb       	out	0x12, r24	; 18
 1c2:	c5 01       	movw	r24, r10
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <BCD_Converter+0x90>
		}
	else{
		 a = (given/j)%10;
		}
display(i, a);
i--;
 1c8:	01 50       	subi	r16, 0x01	; 1
 1ca:	10 40       	sbci	r17, 0x00	; 0

void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	0f 3f       	cpi	r16, 0xFF	; 255
 1d0:	18 07       	cpc	r17, r24
 1d2:	59 f0       	breq	.+22     	; 0x1ea <BCD_Converter+0xb6>
	else{
		 a = (given/j)%10;
		}
display(i, a);
i--;
j = j*10;
 1d4:	c9 01       	movw	r24, r18
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	53 e0       	ldi	r21, 0x03	; 3
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	5a 95       	dec	r21
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <BCD_Converter+0xa8>
 1e4:	28 0f       	add	r18, r24
 1e6:	39 1f       	adc	r19, r25
 1e8:	cc cf       	rjmp	.-104    	; 0x182 <BCD_Converter+0x4e>
}
}
 1ea:	28 96       	adiw	r28, 0x08	; 8
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	df 90       	pop	r13
 204:	cf 90       	pop	r12
 206:	bf 90       	pop	r11
 208:	af 90       	pop	r10
 20a:	9f 90       	pop	r9
 20c:	08 95       	ret

0000020e <__divmodhi4>:
 20e:	97 fb       	bst	r25, 7
 210:	09 2e       	mov	r0, r25
 212:	07 26       	eor	r0, r23
 214:	0a d0       	rcall	.+20     	; 0x22a <__divmodhi4_neg1>
 216:	77 fd       	sbrc	r23, 7
 218:	04 d0       	rcall	.+8      	; 0x222 <__divmodhi4_neg2>
 21a:	0c d0       	rcall	.+24     	; 0x234 <__udivmodhi4>
 21c:	06 d0       	rcall	.+12     	; 0x22a <__divmodhi4_neg1>
 21e:	00 20       	and	r0, r0
 220:	1a f4       	brpl	.+6      	; 0x228 <__divmodhi4_exit>

00000222 <__divmodhi4_neg2>:
 222:	70 95       	com	r23
 224:	61 95       	neg	r22
 226:	7f 4f       	sbci	r23, 0xFF	; 255

00000228 <__divmodhi4_exit>:
 228:	08 95       	ret

0000022a <__divmodhi4_neg1>:
 22a:	f6 f7       	brtc	.-4      	; 0x228 <__divmodhi4_exit>
 22c:	90 95       	com	r25
 22e:	81 95       	neg	r24
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	08 95       	ret

00000234 <__udivmodhi4>:
 234:	aa 1b       	sub	r26, r26
 236:	bb 1b       	sub	r27, r27
 238:	51 e1       	ldi	r21, 0x11	; 17
 23a:	07 c0       	rjmp	.+14     	; 0x24a <__udivmodhi4_ep>

0000023c <__udivmodhi4_loop>:
 23c:	aa 1f       	adc	r26, r26
 23e:	bb 1f       	adc	r27, r27
 240:	a6 17       	cp	r26, r22
 242:	b7 07       	cpc	r27, r23
 244:	10 f0       	brcs	.+4      	; 0x24a <__udivmodhi4_ep>
 246:	a6 1b       	sub	r26, r22
 248:	b7 0b       	sbc	r27, r23

0000024a <__udivmodhi4_ep>:
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	5a 95       	dec	r21
 250:	a9 f7       	brne	.-22     	; 0x23c <__udivmodhi4_loop>
 252:	80 95       	com	r24
 254:	90 95       	com	r25
 256:	bc 01       	movw	r22, r24
 258:	cd 01       	movw	r24, r26
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
