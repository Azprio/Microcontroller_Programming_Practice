
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000278  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  00000314  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000098  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000399  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000291  00000000  00000000  00000785  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034f  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012c  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c1  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  8a:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <seg1>:
int total_pulse_counter = 0;
int total_cost = 0;

void seg1(unsigned char data){
int s[1]={0x7f};
PORTA&=0x00;
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	1b ba       	out	0x1b, r1	; 27
PORTA=data;
  96:	8b bb       	out	0x1b, r24	; 27
PORTA&=s[0];  
  98:	df 98       	cbi	0x1b, 7	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	80 e2       	ldi	r24, 0x20	; 32
  9c:	9e e4       	ldi	r25, 0x4E	; 78
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <seg1+0xc>
_delay_ms(10);
}
  a2:	08 95       	ret

000000a4 <init_int0>:

}

void init_int0()
{
	sei();
  a4:	78 94       	sei
	MCUCR |=  (1 << ISC01); 
  a6:	85 b7       	in	r24, 0x35	; 53
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 bf       	out	0x35, r24	; 53
	GICR |= ( 1<<INT0 );
  ac:	8b b7       	in	r24, 0x3b	; 59
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	8b bf       	out	0x3b, r24	; 59
	
	return 0;             
}
  b2:	08 95       	ret

000000b4 <__vector_1>:

ISR(INT0_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	total_pulse_counter ++;
  c2:	80 91 68 00 	lds	r24, 0x0068
  c6:	90 91 69 00 	lds	r25, 0x0069
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	90 93 69 00 	sts	0x0069, r25
  d0:	80 93 68 00 	sts	0x0068, r24
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <main>:
_delay_ms(10);
}



int main(){
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29

}

void init_int0()
{
	sei();
  e6:	78 94       	sei
	MCUCR |=  (1 << ISC01); 
  e8:	85 b7       	in	r24, 0x35	; 53
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	85 bf       	out	0x35, r24	; 53
	GICR |= ( 1<<INT0 );
  ee:	8b b7       	in	r24, 0x3b	; 59
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	8b bf       	out	0x3b, r24	; 59
int main(){

	init_int0();
	

	DDRC |= 0b11111111;
  f4:	84 b3       	in	r24, 0x14	; 20
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	94 bb       	out	0x14, r25	; 20
	DDRD |= 0b00110011;
  fa:	81 b3       	in	r24, 0x11	; 17
  fc:	83 63       	ori	r24, 0x33	; 51
  fe:	81 bb       	out	0x11, r24	; 17
	DDRA |= 0b11111111;
 100:	8a b3       	in	r24, 0x1a	; 26
 102:	9a bb       	out	0x1a, r25	; 26
 104:	c0 e2       	ldi	r28, 0x20	; 32
 106:	de e4       	ldi	r29, 0x4E	; 78
	
	
	while(1){

		total_cost = 5*total_pulse_counter;
 108:	80 91 68 00 	lds	r24, 0x0068
 10c:	90 91 69 00 	lds	r25, 0x0069
 110:	9c 01       	movw	r18, r24
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	28 0f       	add	r18, r24
 11c:	39 1f       	adc	r19, r25
 11e:	20 93 6a 00 	sts	0x006A, r18
 122:	30 93 6b 00 	sts	0x006B, r19
		BCD_Converter(total_cost);
 126:	c9 01       	movw	r24, r18
 128:	0e 94 d7 00 	call	0x1ae	; 0x1ae <BCD_Converter>
		
		
		seg1(total_pulse_counter);
 12c:	80 91 68 00 	lds	r24, 0x0068
 130:	90 91 69 00 	lds	r25, 0x0069
int total_pulse_counter = 0;
int total_cost = 0;

void seg1(unsigned char data){
int s[1]={0x7f};
PORTA&=0x00;
 134:	2b b3       	in	r18, 0x1b	; 27
 136:	1b ba       	out	0x1b, r1	; 27
PORTA=data;
 138:	8b bb       	out	0x1b, r24	; 27
PORTA&=s[0];  
 13a:	df 98       	cbi	0x1b, 7	; 27
 13c:	fe 01       	movw	r30, r28
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x5c>
		total_cost = 5*total_pulse_counter;
		BCD_Converter(total_cost);
		
		
		seg1(total_pulse_counter);
		if(total_pulse_counter>9){
 142:	0a 97       	sbiw	r24, 0x0a	; 10
 144:	0c f3       	brlt	.-62     	; 0x108 <main+0x26>
				total_pulse_counter=0;
 146:	10 92 69 00 	sts	0x0069, r1
 14a:	10 92 68 00 	sts	0x0068, r1
 14e:	dc cf       	rjmp	.-72     	; 0x108 <main+0x26>

00000150 <display>:
#include<avr/io.h>
#include<util/delay.h>

void display(unsigned char seg,unsigned char data){
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	28 97       	sbiw	r28, 0x08	; 8
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	28 2f       	mov	r18, r24
int s[4]={0xfe,0xfd,0xef,0xdf};
 166:	fe 01       	movw	r30, r28
 168:	31 96       	adiw	r30, 0x01	; 1
 16a:	a0 e6       	ldi	r26, 0x60	; 96
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	88 e0       	ldi	r24, 0x08	; 8
 170:	0d 90       	ld	r0, X+
 172:	01 92       	st	Z+, r0
 174:	81 50       	subi	r24, 0x01	; 1
 176:	e1 f7       	brne	.-8      	; 0x170 <display+0x20>
PORTD|=0x33;
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	83 63       	ori	r24, 0x33	; 51
 17c:	82 bb       	out	0x12, r24	; 18
PORTC=data;
 17e:	65 bb       	out	0x15, r22	; 21
PORTD&=s[seg];  
 180:	92 b3       	in	r25, 0x12	; 18
 182:	e2 2f       	mov	r30, r18
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ec 0f       	add	r30, r28
 18c:	fd 1f       	adc	r31, r29
 18e:	81 81       	ldd	r24, Z+1	; 0x01
 190:	98 23       	and	r25, r24
 192:	92 bb       	out	0x12, r25	; 18
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	9e e4       	ldi	r25, 0x4E	; 78
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <display+0x48>
_delay_ms(10);
}
 19c:	28 96       	adiw	r28, 0x08	; 8
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
 1a8:	cf 91       	pop	r28
 1aa:	df 91       	pop	r29
 1ac:	08 95       	ret

000001ae <BCD_Converter>:

void BCD_Converter(int given){
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	7c 01       	movw	r14, r24
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
		 a = (given/1000);
 1be:	68 ee       	ldi	r22, 0xE8	; 232
 1c0:	73 e0       	ldi	r23, 0x03	; 3
 1c2:	0e 94 13 01 	call	0x226	; 0x226 <__divmodhi4>
 1c6:	d6 2e       	mov	r13, r22
 1c8:	03 e0       	ldi	r16, 0x03	; 3
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	c1 e0       	ldi	r28, 0x01	; 1
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
 1d0:	01 15       	cp	r16, r1
 1d2:	11 05       	cpc	r17, r1
 1d4:	11 f4       	brne	.+4      	; 0x1da <BCD_Converter+0x2c>
 1d6:	6d 2d       	mov	r22, r13
 1d8:	0a c0       	rjmp	.+20     	; 0x1ee <BCD_Converter+0x40>
		 a = (given/1000);
		}
	else{
		 a = (given/j)%10;
 1da:	c7 01       	movw	r24, r14
 1dc:	be 01       	movw	r22, r28
 1de:	0e 94 13 01 	call	0x226	; 0x226 <__divmodhi4>
 1e2:	cb 01       	movw	r24, r22
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 13 01 	call	0x226	; 0x226 <__divmodhi4>
 1ec:	68 2f       	mov	r22, r24
		}
display(i, a);
 1ee:	80 2f       	mov	r24, r16
 1f0:	0e 94 a8 00 	call	0x150	; 0x150 <display>
i--;
 1f4:	01 50       	subi	r16, 0x01	; 1
 1f6:	10 40       	sbci	r17, 0x00	; 0

void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	0f 3f       	cpi	r16, 0xFF	; 255
 1fc:	18 07       	cpc	r17, r24
 1fe:	59 f0       	breq	.+22     	; 0x216 <BCD_Converter+0x68>
	else{
		 a = (given/j)%10;
		}
display(i, a);
i--;
j = j*10;
 200:	ce 01       	movw	r24, r28
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	23 e0       	ldi	r18, 0x03	; 3
 208:	cc 0f       	add	r28, r28
 20a:	dd 1f       	adc	r29, r29
 20c:	2a 95       	dec	r18
 20e:	e1 f7       	brne	.-8      	; 0x208 <BCD_Converter+0x5a>
 210:	c8 0f       	add	r28, r24
 212:	d9 1f       	adc	r29, r25
 214:	dd cf       	rjmp	.-70     	; 0x1d0 <BCD_Converter+0x22>
}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	df 90       	pop	r13
 224:	08 95       	ret

00000226 <__divmodhi4>:
 226:	97 fb       	bst	r25, 7
 228:	09 2e       	mov	r0, r25
 22a:	07 26       	eor	r0, r23
 22c:	0a d0       	rcall	.+20     	; 0x242 <__divmodhi4_neg1>
 22e:	77 fd       	sbrc	r23, 7
 230:	04 d0       	rcall	.+8      	; 0x23a <__divmodhi4_neg2>
 232:	0c d0       	rcall	.+24     	; 0x24c <__udivmodhi4>
 234:	06 d0       	rcall	.+12     	; 0x242 <__divmodhi4_neg1>
 236:	00 20       	and	r0, r0
 238:	1a f4       	brpl	.+6      	; 0x240 <__divmodhi4_exit>

0000023a <__divmodhi4_neg2>:
 23a:	70 95       	com	r23
 23c:	61 95       	neg	r22
 23e:	7f 4f       	sbci	r23, 0xFF	; 255

00000240 <__divmodhi4_exit>:
 240:	08 95       	ret

00000242 <__divmodhi4_neg1>:
 242:	f6 f7       	brtc	.-4      	; 0x240 <__divmodhi4_exit>
 244:	90 95       	com	r25
 246:	81 95       	neg	r24
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	08 95       	ret

0000024c <__udivmodhi4>:
 24c:	aa 1b       	sub	r26, r26
 24e:	bb 1b       	sub	r27, r27
 250:	51 e1       	ldi	r21, 0x11	; 17
 252:	07 c0       	rjmp	.+14     	; 0x262 <__udivmodhi4_ep>

00000254 <__udivmodhi4_loop>:
 254:	aa 1f       	adc	r26, r26
 256:	bb 1f       	adc	r27, r27
 258:	a6 17       	cp	r26, r22
 25a:	b7 07       	cpc	r27, r23
 25c:	10 f0       	brcs	.+4      	; 0x262 <__udivmodhi4_ep>
 25e:	a6 1b       	sub	r26, r22
 260:	b7 0b       	sbc	r27, r23

00000262 <__udivmodhi4_ep>:
 262:	88 1f       	adc	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	5a 95       	dec	r21
 268:	a9 f7       	brne	.-22     	; 0x254 <__udivmodhi4_loop>
 26a:	80 95       	com	r24
 26c:	90 95       	com	r25
 26e:	bc 01       	movw	r22, r24
 270:	cd 01       	movw	r24, r26
 272:	08 95       	ret

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
