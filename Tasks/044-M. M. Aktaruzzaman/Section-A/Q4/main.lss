
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000015c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003f  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ce  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000094  00000000  00000000  00000289  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000112  00000000  00000000  0000031d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000009b  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  74:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <US_config>:




void US_config(){
	UBRRL = UBRR_Value;
  7c:	85 e0       	ldi	r24, 0x05	; 5
  7e:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Value>>8;
  80:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN);
  82:	88 ed       	ldi	r24, 0xD8	; 216
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (3<<UCSZ0);
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	80 bd       	out	0x20, r24	; 32
	sei();
  8a:	78 94       	sei
	
}
  8c:	08 95       	ret

0000008e <main>:


int main(void)
{
	
	DDRB &=0xfe;
  8e:	b8 98       	cbi	0x17, 0	; 23
	DDRB |=0b00000010;
  90:	b9 9a       	sbi	0x17, 1	; 23




void US_config(){
	UBRRL = UBRR_Value;
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Value>>8;
  96:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN);
  98:	88 ed       	ldi	r24, 0xD8	; 216
  9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (3<<UCSZ0);
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 bd       	out	0x20, r24	; 32
	sei();
  a0:	78 94       	sei
	DDRB &=0xfe;
	DDRB |=0b00000010;
	US_config();
	
	
	PORTB &= ~(1<<PB1);
  a2:	c1 98       	cbi	0x18, 1	; 24
	
	while (1)
	{
		
			if(d==1){
  a4:	20 91 60 00 	lds	r18, 0x0060
  a8:	30 91 61 00 	lds	r19, 0x0061
			PORTB ^= (1<<PB1);
  ac:	42 e0       	ldi	r20, 0x02	; 2
			UDR=1;
  ae:	91 e0       	ldi	r25, 0x01	; 1
	PORTB &= ~(1<<PB1);
	
	while (1)
	{
		
			if(d==1){
  b0:	21 30       	cpi	r18, 0x01	; 1
  b2:	31 05       	cpc	r19, r1
  b4:	29 f4       	brne	.+10     	; 0xc0 <main+0x32>
			PORTB ^= (1<<PB1);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	84 27       	eor	r24, r20
  ba:	88 bb       	out	0x18, r24	; 24
			UDR=1;
  bc:	9c b9       	out	0x0c, r25	; 12
  be:	f8 cf       	rjmp	.-16     	; 0xb0 <main+0x22>
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x32>

000000c2 <__vector_13>:
	}
	
	
	
}
ISR(USART_RXC_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
	d = UDR;
  ce:	8c b1       	in	r24, 0x0c	; 12
  d0:	80 93 60 00 	sts	0x0060, r24
  d4:	10 92 61 00 	sts	0x0061, r1
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
