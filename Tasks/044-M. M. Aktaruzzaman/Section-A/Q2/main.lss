
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000202  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006f  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000026c  00000000  00000000  0000032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cd  00000000  00000000  00000599  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000255  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000115  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000086  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  7a:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Initialization>:
#include<bcd_lib.h>

void ADC_Initialization()
{

ADMUX =(1<<REFS0);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADEN);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	86 b9       	out	0x06, r24	; 6
 
}
  8a:	08 95       	ret

0000008c <Read_ADC>:

int Read_ADC()
{

ADMUX |=(1<<MUX0) | (1<<MUX2);
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	85 60       	ori	r24, 0x05	; 5
  90:	87 b9       	out	0x07, r24	; 7
ADCSRA |= (1<<ADSC);
  92:	36 9a       	sbi	0x06, 6	; 6

while (ADCSRA & 0b01000000)
  94:	36 99       	sbic	0x06, 6	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <Read_ADC+0x8>
{
}

int value = 0;
value = ADCL; 
  98:	24 b1       	in	r18, 0x04	; 4
  9a:	30 e0       	ldi	r19, 0x00	; 0
value |=(ADCH << 8);
  9c:	45 b1       	in	r20, 0x05	; 5
  9e:	94 2f       	mov	r25, r20
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	28 2b       	or	r18, r24
  a4:	39 2b       	or	r19, r25
return value;

}
  a6:	c9 01       	movw	r24, r18
  a8:	08 95       	ret

000000aa <main>:


int main(){
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
#include<bcd_lib.h>

void ADC_Initialization()
{

ADMUX =(1<<REFS0);
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADEN);
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	86 b9       	out	0x06, r24	; 6


int main(){
ADC_Initialization();

DDRC |= 0b11111111;
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
DDRD |= 0b00101111;
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	8f 62       	ori	r24, 0x2F	; 47
  c0:	81 bb       	out	0x11, r24	; 17

while(1){

int value = Read_ADC();
  c2:	0e 94 46 00 	call	0x8c	; 0x8c <Read_ADC>
  c6:	8c 01       	movw	r16, r24
BCD_Converter(value);
  c8:	0e 94 9c 00 	call	0x138	; 0x138 <BCD_Converter>
if (value<=500){
  cc:	05 5f       	subi	r16, 0xF5	; 245
  ce:	11 40       	sbci	r17, 0x01	; 1
  d0:	14 f4       	brge	.+4      	; 0xd6 <main+0x2c>
		PORTD |= (1<<PD5); 
  d2:	95 9a       	sbi	0x12, 5	; 18
  d4:	f6 cf       	rjmp	.-20     	; 0xc2 <main+0x18>
}
else{
		PORTD &= ~(1<<PD5); 
  d6:	95 98       	cbi	0x12, 5	; 18
  d8:	f4 cf       	rjmp	.-24     	; 0xc2 <main+0x18>

000000da <display>:
#include<avr/io.h>
#include<util/delay.h>

void display(unsigned char seg,unsigned char data){
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	28 97       	sbiw	r28, 0x08	; 8
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	28 2f       	mov	r18, r24
int s[4]={0xfe,0xfd,0xfb,0xf7};
  f0:	fe 01       	movw	r30, r28
  f2:	31 96       	adiw	r30, 0x01	; 1
  f4:	a0 e6       	ldi	r26, 0x60	; 96
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	88 e0       	ldi	r24, 0x08	; 8
  fa:	0d 90       	ld	r0, X+
  fc:	01 92       	st	Z+, r0
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	e1 f7       	brne	.-8      	; 0xfa <display+0x20>
PORTD |=0x0f;
 102:	82 b3       	in	r24, 0x12	; 18
 104:	8f 60       	ori	r24, 0x0F	; 15
 106:	82 bb       	out	0x12, r24	; 18
PORTC=data;
 108:	65 bb       	out	0x15, r22	; 21
PORTD &=s[seg];  
 10a:	92 b3       	in	r25, 0x12	; 18
 10c:	e2 2f       	mov	r30, r18
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ec 0f       	add	r30, r28
 116:	fd 1f       	adc	r31, r29
 118:	81 81       	ldd	r24, Z+1	; 0x01
 11a:	98 23       	and	r25, r24
 11c:	92 bb       	out	0x12, r25	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	9e e4       	ldi	r25, 0x4E	; 78
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <display+0x48>
_delay_ms(10);
}
 126:	28 96       	adiw	r28, 0x08	; 8
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret

00000138 <BCD_Converter>:

void BCD_Converter(int given){
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	7c 01       	movw	r14, r24
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
		 a = (given/1000);
 148:	68 ee       	ldi	r22, 0xE8	; 232
 14a:	73 e0       	ldi	r23, 0x03	; 3
 14c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__divmodhi4>
 150:	d6 2e       	mov	r13, r22
 152:	03 e0       	ldi	r16, 0x03	; 3
 154:	10 e0       	ldi	r17, 0x00	; 0
 156:	c1 e0       	ldi	r28, 0x01	; 1
 158:	d0 e0       	ldi	r29, 0x00	; 0
void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
 15a:	01 15       	cp	r16, r1
 15c:	11 05       	cpc	r17, r1
 15e:	11 f4       	brne	.+4      	; 0x164 <BCD_Converter+0x2c>
 160:	6d 2d       	mov	r22, r13
 162:	0a c0       	rjmp	.+20     	; 0x178 <BCD_Converter+0x40>
		 a = (given/1000);
		}
	else{
		 a = (given/j)%10;
 164:	c7 01       	movw	r24, r14
 166:	be 01       	movw	r22, r28
 168:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__divmodhi4>
 16c:	cb 01       	movw	r24, r22
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__divmodhi4>
 176:	68 2f       	mov	r22, r24
		}
display(i, a);
 178:	80 2f       	mov	r24, r16
 17a:	0e 94 6d 00 	call	0xda	; 0xda <display>
i--;
 17e:	01 50       	subi	r16, 0x01	; 1
 180:	10 40       	sbci	r17, 0x00	; 0

void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	0f 3f       	cpi	r16, 0xFF	; 255
 186:	18 07       	cpc	r17, r24
 188:	59 f0       	breq	.+22     	; 0x1a0 <BCD_Converter+0x68>
	else{
		 a = (given/j)%10;
		}
display(i, a);
i--;
j = j*10;
 18a:	ce 01       	movw	r24, r28
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	23 e0       	ldi	r18, 0x03	; 3
 192:	cc 0f       	add	r28, r28
 194:	dd 1f       	adc	r29, r29
 196:	2a 95       	dec	r18
 198:	e1 f7       	brne	.-8      	; 0x192 <BCD_Converter+0x5a>
 19a:	c8 0f       	add	r28, r24
 19c:	d9 1f       	adc	r29, r25
 19e:	dd cf       	rjmp	.-70     	; 0x15a <BCD_Converter+0x22>
}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	df 90       	pop	r13
 1ae:	08 95       	ret

000001b0 <__divmodhi4>:
 1b0:	97 fb       	bst	r25, 7
 1b2:	09 2e       	mov	r0, r25
 1b4:	07 26       	eor	r0, r23
 1b6:	0a d0       	rcall	.+20     	; 0x1cc <__divmodhi4_neg1>
 1b8:	77 fd       	sbrc	r23, 7
 1ba:	04 d0       	rcall	.+8      	; 0x1c4 <__divmodhi4_neg2>
 1bc:	0c d0       	rcall	.+24     	; 0x1d6 <__udivmodhi4>
 1be:	06 d0       	rcall	.+12     	; 0x1cc <__divmodhi4_neg1>
 1c0:	00 20       	and	r0, r0
 1c2:	1a f4       	brpl	.+6      	; 0x1ca <__divmodhi4_exit>

000001c4 <__divmodhi4_neg2>:
 1c4:	70 95       	com	r23
 1c6:	61 95       	neg	r22
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255

000001ca <__divmodhi4_exit>:
 1ca:	08 95       	ret

000001cc <__divmodhi4_neg1>:
 1cc:	f6 f7       	brtc	.-4      	; 0x1ca <__divmodhi4_exit>
 1ce:	90 95       	com	r25
 1d0:	81 95       	neg	r24
 1d2:	9f 4f       	sbci	r25, 0xFF	; 255
 1d4:	08 95       	ret

000001d6 <__udivmodhi4>:
 1d6:	aa 1b       	sub	r26, r26
 1d8:	bb 1b       	sub	r27, r27
 1da:	51 e1       	ldi	r21, 0x11	; 17
 1dc:	07 c0       	rjmp	.+14     	; 0x1ec <__udivmodhi4_ep>

000001de <__udivmodhi4_loop>:
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	a6 17       	cp	r26, r22
 1e4:	b7 07       	cpc	r27, r23
 1e6:	10 f0       	brcs	.+4      	; 0x1ec <__udivmodhi4_ep>
 1e8:	a6 1b       	sub	r26, r22
 1ea:	b7 0b       	sbc	r27, r23

000001ec <__udivmodhi4_ep>:
 1ec:	88 1f       	adc	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	5a 95       	dec	r21
 1f2:	a9 f7       	brne	.-22     	; 0x1de <__udivmodhi4_loop>
 1f4:	80 95       	com	r24
 1f6:	90 95       	com	r25
 1f8:	bc 01       	movw	r22, r24
 1fa:	cd 01       	movw	r24, r26
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
