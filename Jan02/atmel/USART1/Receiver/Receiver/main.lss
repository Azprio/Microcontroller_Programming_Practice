
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000033  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000168  00000000  00000000  00000165  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fd  00000000  00000000  000002cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ab  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e0  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <US_RX>:
#define BAUD_Rate 9600
#define UBRR_Value (F_CPU/(BAUD_Rate*16))-1

unsigned char US_RX()
{
	while(!(UCSRA & (1<<RXC))){
  6c:	5f 9b       	sbis	0x0b, 7	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <US_RX>
		
	}
	
	return UDR;
  70:	8c b1       	in	r24, 0x0c	; 12
}
  72:	08 95       	ret

00000074 <US_config>:


void US_config(){
	UBRRL = UBRR_Value;
  74:	85 ec       	ldi	r24, 0xC5	; 197
  76:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Value>>8;
  78:	82 e0       	ldi	r24, 0x02	; 2
  7a:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1<<RXEN);
  7c:	80 e1       	ldi	r24, 0x10	; 16
  7e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  80:	86 e8       	ldi	r24, 0x86	; 134
  82:	80 bd       	out	0x20, r24	; 32
	
}
  84:	08 95       	ret

00000086 <main>:


int main(void)
{
	
	DDRC |=0xff; 
  86:	84 b3       	in	r24, 0x14	; 20
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 bb       	out	0x14, r24	; 20
	return UDR;
}


void US_config(){
	UBRRL = UBRR_Value;
  8c:	85 ec       	ldi	r24, 0xC5	; 197
  8e:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Value>>8;
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1<<RXEN);
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	20 e9       	ldi	r18, 0x90	; 144
  9e:	31 e0       	ldi	r19, 0x01	; 1
#define BAUD_Rate 9600
#define UBRR_Value (F_CPU/(BAUD_Rate*16))-1

unsigned char US_RX()
{
	while(!(UCSRA & (1<<RXC))){
  a0:	5f 9b       	sbis	0x0b, 7	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x1a>
		
	}
	
	return UDR;
  a4:	8c b1       	in	r24, 0x0c	; 12
	
	DDRC |=0xff; 
	US_config();    
    while (1) 
    {
		PORTC = US_RX();
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	88 e8       	ldi	r24, 0x88	; 136
  aa:	93 e1       	ldi	r25, 0x13	; 19
  ac:	f9 01       	movw	r30, r18
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b4:	d9 f7       	brne	.-10     	; 0xac <main+0x26>
		
		_delay_ms(500);
		PORTC = 0x00;
  b6:	15 ba       	out	0x15, r1	; 21
  b8:	f3 cf       	rjmp	.-26     	; 0xa0 <main+0x1a>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
