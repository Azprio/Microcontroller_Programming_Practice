
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000a1  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000008f7  00000000  00000000  00000819  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002a6  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000612  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018c  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000004d7  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000120  00000000  00000000  000020cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<lcd.h>

int main(){
  6c:	1f 93       	push	r17

DDRA=DDRA & 0b01111111;
  6e:	d7 98       	cbi	0x1a, 7	; 26
DDRC |= 0b11111111;
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	84 bb       	out	0x14, r24	; 20
  76:	8c ef       	ldi	r24, 0xFC	; 252
  78:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	28 ec       	ldi	r18, 0xC8	; 200
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	f9 01       	movw	r30, r18
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <main+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  86:	d9 f7       	brne	.-10     	; 0x7e <main+0x12>
  88:	1f ef       	ldi	r17, 0xFF	; 255
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0

if(button1_status){
Data |= 0xff <<i;

}else{
Data &= ~(0xff<<i);
  8e:	4f ef       	ldi	r20, 0xFF	; 255
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	68 ec       	ldi	r22, 0xC8	; 200
  94:	70 e0       	ldi	r23, 0x00	; 0

for(int i=0; i<=7; i++){

char button1_status = PINA & 0b10000000;

if(button1_status){
  96:	cf 9b       	sbis	0x19, 7	; 25
  98:	09 c0       	rjmp	.+18     	; 0xac <main+0x40>
Data |= 0xff <<i;
  9a:	ca 01       	movw	r24, r20
  9c:	02 2e       	mov	r0, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x38>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x34>
  a8:	18 2b       	or	r17, r24
  aa:	09 c0       	rjmp	.+18     	; 0xbe <main+0x52>

}else{
Data &= ~(0xff<<i);
  ac:	ca 01       	movw	r24, r20
  ae:	02 2e       	mov	r0, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <main+0x46>
  ba:	80 95       	com	r24
  bc:	18 23       	and	r17, r24
  be:	8c ef       	ldi	r24, 0xFC	; 252
  c0:	93 e0       	ldi	r25, 0x03	; 3
  c2:	fb 01       	movw	r30, r22
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d9 f7       	brne	.-10     	; 0xc2 <main+0x56>


char Data = 0b11111111;
_delay_ms(102);

for(int i=0; i<=7; i++){
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	28 30       	cpi	r18, 0x08	; 8
  d2:	31 05       	cpc	r19, r1
  d4:	01 f7       	brne	.-64     	; 0x96 <main+0x2a>

}
_delay_ms(102);
}

PORTC |= Data;
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	81 2b       	or	r24, r17
  da:	85 bb       	out	0x15, r24	; 21
LCDInit(0);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCDInit>
LCDClear();
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	0e 94 a8 00 	call	0x150	; 0x150 <LCDByte>
LCDByte(Data,8);
  ea:	81 2f       	mov	r24, r17
  ec:	68 e0       	ldi	r22, 0x08	; 8
  ee:	0e 94 a8 00 	call	0x150	; 0x150 <LCDByte>


}
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	1f 91       	pop	r17
  f8:	08 95       	ret

000000fa <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  fa:	81 b3       	in	r24, 0x11	; 17
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();		//Read mode
 100:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 102:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <LCDBusyLoop+0xc>


	do
	{

		SET_E();
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	32 e0       	ldi	r19, 0x02	; 2
 10e:	94 9a       	sbi	0x12, 4	; 18
 110:	82 2f       	mov	r24, r18
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 116:	80 b3       	in	r24, 0x10	; 16
		status=status<<4;
 118:	82 95       	swap	r24
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	92 2f       	mov	r25, r18
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 122:	94 98       	cbi	0x12, 4	; 18
 124:	93 2f       	mov	r25, r19
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 12a:	94 9a       	sbi	0x12, 4	; 18
 12c:	92 2f       	mov	r25, r18
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 132:	90 b3       	in	r25, 0x10	; 16
 134:	92 2f       	mov	r25, r18
 136:	9a 95       	dec	r25
 138:	f1 f7       	brne	.-4      	; 0x136 <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 13a:	94 98       	cbi	0x12, 4	; 18
 13c:	93 2f       	mov	r25, r19
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 142:	87 fd       	sbrc	r24, 7
 144:	e4 cf       	rjmp	.-56     	; 0x10e <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 146:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 148:	81 b3       	in	r24, 0x11	; 17
 14a:	8f 60       	ori	r24, 0x0F	; 15
 14c:	81 bb       	out	0x11, r24	; 17

}
 14e:	08 95       	ret

00000150 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 150:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 152:	66 23       	and	r22, r22
 154:	11 f4       	brne	.+4      	; 0x15a <LCDByte+0xa>
	CLEAR_RS();
 156:	96 98       	cbi	0x12, 6	; 18
 158:	01 c0       	rjmp	.+2      	; 0x15c <LCDByte+0xc>
else
	SET_RS();
 15a:	96 9a       	sbi	0x12, 6	; 18
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 162:	94 9a       	sbi	0x12, 4	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 164:	82 b3       	in	r24, 0x12	; 18
 166:	92 2f       	mov	r25, r18
 168:	92 95       	swap	r25
 16a:	9f 70       	andi	r25, 0x0F	; 15
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 170:	92 bb       	out	0x12, r25	; 18
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	89 2f       	mov	r24, r25
 176:	8a 95       	dec	r24
 178:	f1 f7       	brne	.-4      	; 0x176 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 17a:	94 98       	cbi	0x12, 4	; 18
 17c:	89 2f       	mov	r24, r25
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 182:	94 9a       	sbi	0x12, 4	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 184:	82 b3       	in	r24, 0x12	; 18
 186:	2f 70       	andi	r18, 0x0F	; 15
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 18c:	82 bb       	out	0x12, r24	; 18
 18e:	89 2f       	mov	r24, r25
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 194:	94 98       	cbi	0x12, 4	; 18
 196:	9a 95       	dec	r25
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 19a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCDBusyLoop>
}
 19e:	08 95       	ret

000001a0 <LCDInit>:
	LCD_DATA_DDR|=0x0F;

}

void LCDInit(uint8_t style)
{
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a6:	80 e6       	ldi	r24, 0x60	; 96
 1a8:	9a ee       	ldi	r25, 0xEA	; 234
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDInit+0xa>

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1ae:	81 b3       	in	r24, 0x11	; 17
 1b0:	8f 60       	ori	r24, 0x0F	; 15
 1b2:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);
 1b4:	8c 9a       	sbi	0x11, 4	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1b6:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1b8:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 1ba:	82 b3       	in	r24, 0x12	; 18
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 1c0:	94 98       	cbi	0x12, 4	; 18
	CLEAR_RW();
 1c2:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 1c4:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1c6:	85 e8       	ldi	r24, 0x85	; 133
 1c8:	98 2f       	mov	r25, r24
 1ca:	9a 95       	dec	r25
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCDInit+0x2a>

	//Set 4-bit mode
	_delay_us(50);	//tAS

	SET_E();
 1ce:	94 9a       	sbi	0x12, 4	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1d0:	91 9a       	sbi	0x12, 1	; 18
 1d2:	98 2f       	mov	r25, r24
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDInit+0x34>
	_delay_us(50);
	CLEAR_E();
 1d8:	94 98       	cbi	0x12, 4	; 18
 1da:	8a 95       	dec	r24
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCDInit+0x3a>
	_delay_us(50);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1de:	0e 94 7d 00 	call	0xfa	; 0xfa <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1e2:	81 2f       	mov	r24, r17
 1e4:	8c 60       	ori	r24, 0x0C	; 12
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	0e 94 a8 00 	call	0x150	; 0x150 <LCDByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ec:	08 ec       	ldi	r16, 0xC8	; 200
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	c8 01       	movw	r24, r16
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCDInit+0x52>
	_delay_us(100);
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1f6:	88 e2       	ldi	r24, 0x28	; 40
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	0e 94 a8 00 	call	0x150	; 0x150 <LCDByte>
 1fe:	c8 01       	movw	r24, r16
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCDInit+0x60>
	_delay_us(100);
}
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	ec 01       	movw	r28, r24
 210:	04 c0       	rjmp	.+8      	; 0x21a <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	0e 94 a8 00 	call	0x150	; 0x150 <LCDByte>
	msg++;
 218:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 21a:	88 81       	ld	r24, Y
 21c:	88 23       	and	r24, r24
 21e:	c9 f7       	brne	.-14     	; 0x212 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <LCDWriteString_sliding>:
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
 226:	4f 92       	push	r4
 228:	5f 92       	push	r5
 22a:	6f 92       	push	r6
 22c:	7f 92       	push	r7
 22e:	8f 92       	push	r8
 230:	9f 92       	push	r9
 232:	af 92       	push	r10
 234:	bf 92       	push	r11
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	eb 01       	movw	r28, r22
  while (*strng>0)
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
 248:	3c 01       	movw	r6, r24
 24a:	88 24       	eor	r8, r8
 24c:	99 24       	eor	r9, r9
 24e:	88 ec       	ldi	r24, 0xC8	; 200
 250:	48 2e       	mov	r4, r24
 252:	51 2c       	mov	r5, r1
 254:	42 c0       	rjmp	.+132    	; 0x2da <LCDWriteString_sliding+0xb4>
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
  {
	  LCDData(*strng++);
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	0e 94 a8 00 	call	0x150	; 0x150 <LCDByte>
	  _delay_ms(delay_ms);
 25e:	c4 01       	movw	r24, r8
 260:	b3 01       	movw	r22, r6
 262:	0e 94 30 02 	call	0x460	; 0x460 <__floatunsisf>
 266:	5b 01       	movw	r10, r22
 268:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	4a ef       	ldi	r20, 0xFA	; 250
 270:	54 e4       	ldi	r21, 0x44	; 68
 272:	0e 94 be 02 	call	0x57c	; 0x57c <__mulsf3>
 276:	7b 01       	movw	r14, r22
 278:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e8       	ldi	r20, 0x80	; 128
 280:	5f e3       	ldi	r21, 0x3F	; 63
 282:	0e 94 00 02 	call	0x400	; 0x400 <__cmpsf2>
 286:	88 23       	and	r24, r24
 288:	1c f4       	brge	.+6      	; 0x290 <LCDWriteString_sliding+0x6a>
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	22 c0       	rjmp	.+68     	; 0x2d4 <LCDWriteString_sliding+0xae>
		__ticks = 1;
	else if (__tmp > 65535)
 290:	c8 01       	movw	r24, r16
 292:	b7 01       	movw	r22, r14
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	3f ef       	ldi	r19, 0xFF	; 255
 298:	4f e7       	ldi	r20, 0x7F	; 127
 29a:	57 e4       	ldi	r21, 0x47	; 71
 29c:	0e 94 ba 02 	call	0x574	; 0x574 <__gesf2>
 2a0:	18 16       	cp	r1, r24
 2a2:	a4 f4       	brge	.+40     	; 0x2cc <LCDWriteString_sliding+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2a4:	c6 01       	movw	r24, r12
 2a6:	b5 01       	movw	r22, r10
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e2       	ldi	r20, 0x20	; 32
 2ae:	51 e4       	ldi	r21, 0x41	; 65
 2b0:	0e 94 be 02 	call	0x57c	; 0x57c <__mulsf3>
 2b4:	0e 94 04 02 	call	0x408	; 0x408 <__fixunssfsi>
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <LCDWriteString_sliding+0x9e>
 2ba:	c2 01       	movw	r24, r4
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCDWriteString_sliding+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c0:	61 50       	subi	r22, 0x01	; 1
 2c2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c4:	61 15       	cp	r22, r1
 2c6:	71 05       	cpc	r23, r1
 2c8:	c1 f7       	brne	.-16     	; 0x2ba <LCDWriteString_sliding+0x94>
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <LCDWriteString_sliding+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2cc:	c8 01       	movw	r24, r16
 2ce:	b7 01       	movw	r22, r14
 2d0:	0e 94 04 02 	call	0x408	; 0x408 <__fixunssfsi>
 2d4:	cb 01       	movw	r24, r22
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCDWriteString_sliding+0xb0>
 }
}
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
 2da:	88 81       	ld	r24, Y
 2dc:	88 23       	and	r24, r24
 2de:	09 f0       	breq	.+2      	; 0x2e2 <LCDWriteString_sliding+0xbc>
 2e0:	ba cf       	rjmp	.-140    	; 0x256 <LCDWriteString_sliding+0x30>
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
  }
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	df 90       	pop	r13
 2f0:	cf 90       	pop	r12
 2f2:	bf 90       	pop	r11
 2f4:	af 90       	pop	r10
 2f6:	9f 90       	pop	r9
 2f8:	8f 90       	pop	r8
 2fa:	7f 90       	pop	r7
 2fc:	6f 90       	pop	r6
 2fe:	5f 90       	pop	r5
 300:	4f 90       	pop	r4
 302:	08 95       	ret

00000304 <LCDWriteInt>:
//-----------------------------------------------------
void LCDWriteInt(int val,unsigned int field_length)
{
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	df 93       	push	r29
 30e:	cf 93       	push	r28
 310:	00 d0       	rcall	.+0      	; 0x312 <LCDWriteInt+0xe>
 312:	00 d0       	rcall	.+0      	; 0x314 <LCDWriteInt+0x10>
 314:	0f 92       	push	r0
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	9c 01       	movw	r18, r24
 31c:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 31e:	fe 01       	movw	r30, r28
 320:	31 96       	adiw	r30, 0x01	; 1
 322:	85 e0       	ldi	r24, 0x05	; 5
 324:	df 01       	movw	r26, r30
 326:	1d 92       	st	X+, r1
 328:	8a 95       	dec	r24
 32a:	e9 f7       	brne	.-6      	; 0x326 <LCDWriteInt+0x22>
 32c:	fe 01       	movw	r30, r28
 32e:	35 96       	adiw	r30, 0x05	; 5
 330:	0d c0       	rjmp	.+26     	; 0x34c <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 332:	c9 01       	movw	r24, r18
 334:	6a e0       	ldi	r22, 0x0A	; 10
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	0e 94 49 03 	call	0x692	; 0x692 <__divmodhi4>
 33c:	80 83       	st	Z, r24
	val=val/10;
 33e:	c9 01       	movw	r24, r18
 340:	6a e0       	ldi	r22, 0x0A	; 10
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	0e 94 49 03 	call	0x692	; 0x692 <__divmodhi4>
 348:	9b 01       	movw	r18, r22
 34a:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 34c:	21 15       	cp	r18, r1
 34e:	31 05       	cpc	r19, r1
 350:	81 f7       	brne	.-32     	; 0x332 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 352:	bf ef       	ldi	r27, 0xFF	; 255
 354:	0f 3f       	cpi	r16, 0xFF	; 255
 356:	1b 07       	cpc	r17, r27
 358:	79 f4       	brne	.+30     	; 0x378 <LCDWriteInt+0x74>
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 35e:	ae 01       	movw	r20, r28
 360:	4f 5f       	subi	r20, 0xFF	; 255
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	02 c0       	rjmp	.+4      	; 0x36a <LCDWriteInt+0x66>
 366:	2f 5f       	subi	r18, 0xFF	; 255
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	fa 01       	movw	r30, r20
 36c:	e2 0f       	add	r30, r18
 36e:	f3 1f       	adc	r31, r19
 370:	80 81       	ld	r24, Z
 372:	88 23       	and	r24, r24
 374:	c1 f3       	breq	.-16     	; 0x366 <LCDWriteInt+0x62>
 376:	04 c0       	rjmp	.+8      	; 0x380 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 378:	25 e0       	ldi	r18, 0x05	; 5
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	20 1b       	sub	r18, r16
 37e:	31 0b       	sbc	r19, r17
 380:	7e 01       	movw	r14, r28
 382:	08 94       	sec
 384:	e1 1c       	adc	r14, r1
 386:	f1 1c       	adc	r15, r1
 388:	e2 0e       	add	r14, r18
 38a:	f3 1e       	adc	r15, r19
 38c:	89 01       	movw	r16, r18
 38e:	09 c0       	rjmp	.+18     	; 0x3a2 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 390:	f7 01       	movw	r30, r14
 392:	81 91       	ld	r24, Z+
 394:	7f 01       	movw	r14, r30
 396:	80 5d       	subi	r24, 0xD0	; 208
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	0e 94 a8 00 	call	0x150	; 0x150 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 39e:	0f 5f       	subi	r16, 0xFF	; 255
 3a0:	1f 4f       	sbci	r17, 0xFF	; 255
 3a2:	05 30       	cpi	r16, 0x05	; 5
 3a4:	11 05       	cpc	r17, r1
 3a6:	a4 f3       	brlt	.-24     	; 0x390 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	cf 91       	pop	r28
 3b4:	df 91       	pop	r29
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	08 95       	ret

000003c0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 3c0:	df 93       	push	r29
 3c2:	cf 93       	push	r28
 3c4:	00 d0       	rcall	.+0      	; 0x3c6 <LCDGotoXY+0x6>
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <LCDGotoXY+0x8>
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	98 2f       	mov	r25, r24
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
    if(x<20)
 3ce:	84 31       	cpi	r24, 0x14	; 20
 3d0:	80 f4       	brcc	.+32     	; 0x3f2 <LCDGotoXY+0x32>
{
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
 3d2:	80 e8       	ldi	r24, 0x80	; 128
 3d4:	89 83       	std	Y+1, r24	; 0x01
 3d6:	80 ec       	ldi	r24, 0xC0	; 192
 3d8:	8a 83       	std	Y+2, r24	; 0x02
 3da:	84 e9       	ldi	r24, 0x94	; 148
 3dc:	8b 83       	std	Y+3, r24	; 0x03
 3de:	84 ed       	ldi	r24, 0xD4	; 212
 3e0:	8c 83       	std	Y+4, r24	; 0x04
    if(x<20)
    LCDCmd(line[y]+x);//if(y==0)x|=0x80,if(y==1)x|=0x80,if(y==2)x|=0x80,if(y==3)x|=0x80
 3e2:	fe 01       	movw	r30, r28
 3e4:	e6 0f       	add	r30, r22
 3e6:	f1 1d       	adc	r31, r1
 3e8:	81 81       	ldd	r24, Z+1	; 0x01
 3ea:	89 0f       	add	r24, r25
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	0e 94 a8 00 	call	0x150	; 0x150 <LCDByte>

}
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	cf 91       	pop	r28
 3fc:	df 91       	pop	r29
 3fe:	08 95       	ret

00000400 <__cmpsf2>:
 400:	6c d0       	rcall	.+216    	; 0x4da <__fp_cmp>
 402:	08 f4       	brcc	.+2      	; 0x406 <__cmpsf2+0x6>
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	08 95       	ret

00000408 <__fixunssfsi>:
 408:	94 d0       	rcall	.+296    	; 0x532 <__fp_splitA>
 40a:	88 f0       	brcs	.+34     	; 0x42e <__fixunssfsi+0x26>
 40c:	9f 57       	subi	r25, 0x7F	; 127
 40e:	90 f0       	brcs	.+36     	; 0x434 <__fixunssfsi+0x2c>
 410:	b9 2f       	mov	r27, r25
 412:	99 27       	eor	r25, r25
 414:	b7 51       	subi	r27, 0x17	; 23
 416:	a0 f0       	brcs	.+40     	; 0x440 <__fixunssfsi+0x38>
 418:	d1 f0       	breq	.+52     	; 0x44e <__fixunssfsi+0x46>
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	1a f0       	brmi	.+6      	; 0x42a <__fixunssfsi+0x22>
 424:	ba 95       	dec	r27
 426:	c9 f7       	brne	.-14     	; 0x41a <__fixunssfsi+0x12>
 428:	12 c0       	rjmp	.+36     	; 0x44e <__fixunssfsi+0x46>
 42a:	b1 30       	cpi	r27, 0x01	; 1
 42c:	81 f0       	breq	.+32     	; 0x44e <__fixunssfsi+0x46>
 42e:	9b d0       	rcall	.+310    	; 0x566 <__fp_zero>
 430:	b1 e0       	ldi	r27, 0x01	; 1
 432:	08 95       	ret
 434:	98 c0       	rjmp	.+304    	; 0x566 <__fp_zero>
 436:	67 2f       	mov	r22, r23
 438:	78 2f       	mov	r23, r24
 43a:	88 27       	eor	r24, r24
 43c:	b8 5f       	subi	r27, 0xF8	; 248
 43e:	39 f0       	breq	.+14     	; 0x44e <__fixunssfsi+0x46>
 440:	b9 3f       	cpi	r27, 0xF9	; 249
 442:	cc f3       	brlt	.-14     	; 0x436 <__fixunssfsi+0x2e>
 444:	86 95       	lsr	r24
 446:	77 95       	ror	r23
 448:	67 95       	ror	r22
 44a:	b3 95       	inc	r27
 44c:	d9 f7       	brne	.-10     	; 0x444 <__fixunssfsi+0x3c>
 44e:	3e f4       	brtc	.+14     	; 0x45e <__fixunssfsi+0x56>
 450:	90 95       	com	r25
 452:	80 95       	com	r24
 454:	70 95       	com	r23
 456:	61 95       	neg	r22
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	8f 4f       	sbci	r24, 0xFF	; 255
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	08 95       	ret

00000460 <__floatunsisf>:
 460:	e8 94       	clt
 462:	09 c0       	rjmp	.+18     	; 0x476 <__floatsisf+0x12>

00000464 <__floatsisf>:
 464:	97 fb       	bst	r25, 7
 466:	3e f4       	brtc	.+14     	; 0x476 <__floatsisf+0x12>
 468:	90 95       	com	r25
 46a:	80 95       	com	r24
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	99 23       	and	r25, r25
 478:	a9 f0       	breq	.+42     	; 0x4a4 <__floatsisf+0x40>
 47a:	f9 2f       	mov	r31, r25
 47c:	96 e9       	ldi	r25, 0x96	; 150
 47e:	bb 27       	eor	r27, r27
 480:	93 95       	inc	r25
 482:	f6 95       	lsr	r31
 484:	87 95       	ror	r24
 486:	77 95       	ror	r23
 488:	67 95       	ror	r22
 48a:	b7 95       	ror	r27
 48c:	f1 11       	cpse	r31, r1
 48e:	f8 cf       	rjmp	.-16     	; 0x480 <__floatsisf+0x1c>
 490:	fa f4       	brpl	.+62     	; 0x4d0 <__floatsisf+0x6c>
 492:	bb 0f       	add	r27, r27
 494:	11 f4       	brne	.+4      	; 0x49a <__floatsisf+0x36>
 496:	60 ff       	sbrs	r22, 0
 498:	1b c0       	rjmp	.+54     	; 0x4d0 <__floatsisf+0x6c>
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	16 c0       	rjmp	.+44     	; 0x4d0 <__floatsisf+0x6c>
 4a4:	88 23       	and	r24, r24
 4a6:	11 f0       	breq	.+4      	; 0x4ac <__floatsisf+0x48>
 4a8:	96 e9       	ldi	r25, 0x96	; 150
 4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__floatsisf+0x6a>
 4ac:	77 23       	and	r23, r23
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <__floatsisf+0x54>
 4b0:	9e e8       	ldi	r25, 0x8E	; 142
 4b2:	87 2f       	mov	r24, r23
 4b4:	76 2f       	mov	r23, r22
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <__floatsisf+0x5e>
 4b8:	66 23       	and	r22, r22
 4ba:	71 f0       	breq	.+28     	; 0x4d8 <__floatsisf+0x74>
 4bc:	96 e8       	ldi	r25, 0x86	; 134
 4be:	86 2f       	mov	r24, r22
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	2a f0       	brmi	.+10     	; 0x4d0 <__floatsisf+0x6c>
 4c6:	9a 95       	dec	r25
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	88 1f       	adc	r24, r24
 4ce:	da f7       	brpl	.-10     	; 0x4c6 <__floatsisf+0x62>
 4d0:	88 0f       	add	r24, r24
 4d2:	96 95       	lsr	r25
 4d4:	87 95       	ror	r24
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret

000004da <__fp_cmp>:
 4da:	99 0f       	add	r25, r25
 4dc:	00 08       	sbc	r0, r0
 4de:	55 0f       	add	r21, r21
 4e0:	aa 0b       	sbc	r26, r26
 4e2:	e0 e8       	ldi	r30, 0x80	; 128
 4e4:	fe ef       	ldi	r31, 0xFE	; 254
 4e6:	16 16       	cp	r1, r22
 4e8:	17 06       	cpc	r1, r23
 4ea:	e8 07       	cpc	r30, r24
 4ec:	f9 07       	cpc	r31, r25
 4ee:	c0 f0       	brcs	.+48     	; 0x520 <__fp_cmp+0x46>
 4f0:	12 16       	cp	r1, r18
 4f2:	13 06       	cpc	r1, r19
 4f4:	e4 07       	cpc	r30, r20
 4f6:	f5 07       	cpc	r31, r21
 4f8:	98 f0       	brcs	.+38     	; 0x520 <__fp_cmp+0x46>
 4fa:	62 1b       	sub	r22, r18
 4fc:	73 0b       	sbc	r23, r19
 4fe:	84 0b       	sbc	r24, r20
 500:	95 0b       	sbc	r25, r21
 502:	39 f4       	brne	.+14     	; 0x512 <__fp_cmp+0x38>
 504:	0a 26       	eor	r0, r26
 506:	61 f0       	breq	.+24     	; 0x520 <__fp_cmp+0x46>
 508:	23 2b       	or	r18, r19
 50a:	24 2b       	or	r18, r20
 50c:	25 2b       	or	r18, r21
 50e:	21 f4       	brne	.+8      	; 0x518 <__fp_cmp+0x3e>
 510:	08 95       	ret
 512:	0a 26       	eor	r0, r26
 514:	09 f4       	brne	.+2      	; 0x518 <__fp_cmp+0x3e>
 516:	a1 40       	sbci	r26, 0x01	; 1
 518:	a6 95       	lsr	r26
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	81 1d       	adc	r24, r1
 51e:	81 1d       	adc	r24, r1
 520:	08 95       	ret

00000522 <__fp_split3>:
 522:	57 fd       	sbrc	r21, 7
 524:	90 58       	subi	r25, 0x80	; 128
 526:	44 0f       	add	r20, r20
 528:	55 1f       	adc	r21, r21
 52a:	59 f0       	breq	.+22     	; 0x542 <__fp_splitA+0x10>
 52c:	5f 3f       	cpi	r21, 0xFF	; 255
 52e:	71 f0       	breq	.+28     	; 0x54c <__fp_splitA+0x1a>
 530:	47 95       	ror	r20

00000532 <__fp_splitA>:
 532:	88 0f       	add	r24, r24
 534:	97 fb       	bst	r25, 7
 536:	99 1f       	adc	r25, r25
 538:	61 f0       	breq	.+24     	; 0x552 <__fp_splitA+0x20>
 53a:	9f 3f       	cpi	r25, 0xFF	; 255
 53c:	79 f0       	breq	.+30     	; 0x55c <__fp_splitA+0x2a>
 53e:	87 95       	ror	r24
 540:	08 95       	ret
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	55 1f       	adc	r21, r21
 54a:	f2 cf       	rjmp	.-28     	; 0x530 <__fp_split3+0xe>
 54c:	46 95       	lsr	r20
 54e:	f1 df       	rcall	.-30     	; 0x532 <__fp_splitA>
 550:	08 c0       	rjmp	.+16     	; 0x562 <__fp_splitA+0x30>
 552:	16 16       	cp	r1, r22
 554:	17 06       	cpc	r1, r23
 556:	18 06       	cpc	r1, r24
 558:	99 1f       	adc	r25, r25
 55a:	f1 cf       	rjmp	.-30     	; 0x53e <__fp_splitA+0xc>
 55c:	86 95       	lsr	r24
 55e:	71 05       	cpc	r23, r1
 560:	61 05       	cpc	r22, r1
 562:	08 94       	sec
 564:	08 95       	ret

00000566 <__fp_zero>:
 566:	e8 94       	clt

00000568 <__fp_szero>:
 568:	bb 27       	eor	r27, r27
 56a:	66 27       	eor	r22, r22
 56c:	77 27       	eor	r23, r23
 56e:	cb 01       	movw	r24, r22
 570:	97 f9       	bld	r25, 7
 572:	08 95       	ret

00000574 <__gesf2>:
 574:	b2 df       	rcall	.-156    	; 0x4da <__fp_cmp>
 576:	08 f4       	brcc	.+2      	; 0x57a <__gesf2+0x6>
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	08 95       	ret

0000057c <__mulsf3>:
 57c:	0b d0       	rcall	.+22     	; 0x594 <__mulsf3x>
 57e:	78 c0       	rjmp	.+240    	; 0x670 <__fp_round>
 580:	69 d0       	rcall	.+210    	; 0x654 <__fp_pscA>
 582:	28 f0       	brcs	.+10     	; 0x58e <__mulsf3+0x12>
 584:	6e d0       	rcall	.+220    	; 0x662 <__fp_pscB>
 586:	18 f0       	brcs	.+6      	; 0x58e <__mulsf3+0x12>
 588:	95 23       	and	r25, r21
 58a:	09 f0       	breq	.+2      	; 0x58e <__mulsf3+0x12>
 58c:	5a c0       	rjmp	.+180    	; 0x642 <__fp_inf>
 58e:	5f c0       	rjmp	.+190    	; 0x64e <__fp_nan>
 590:	11 24       	eor	r1, r1
 592:	ea cf       	rjmp	.-44     	; 0x568 <__fp_szero>

00000594 <__mulsf3x>:
 594:	c6 df       	rcall	.-116    	; 0x522 <__fp_split3>
 596:	a0 f3       	brcs	.-24     	; 0x580 <__mulsf3+0x4>

00000598 <__mulsf3_pse>:
 598:	95 9f       	mul	r25, r21
 59a:	d1 f3       	breq	.-12     	; 0x590 <__mulsf3+0x14>
 59c:	95 0f       	add	r25, r21
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	55 1f       	adc	r21, r21
 5a2:	62 9f       	mul	r22, r18
 5a4:	f0 01       	movw	r30, r0
 5a6:	72 9f       	mul	r23, r18
 5a8:	bb 27       	eor	r27, r27
 5aa:	f0 0d       	add	r31, r0
 5ac:	b1 1d       	adc	r27, r1
 5ae:	63 9f       	mul	r22, r19
 5b0:	aa 27       	eor	r26, r26
 5b2:	f0 0d       	add	r31, r0
 5b4:	b1 1d       	adc	r27, r1
 5b6:	aa 1f       	adc	r26, r26
 5b8:	64 9f       	mul	r22, r20
 5ba:	66 27       	eor	r22, r22
 5bc:	b0 0d       	add	r27, r0
 5be:	a1 1d       	adc	r26, r1
 5c0:	66 1f       	adc	r22, r22
 5c2:	82 9f       	mul	r24, r18
 5c4:	22 27       	eor	r18, r18
 5c6:	b0 0d       	add	r27, r0
 5c8:	a1 1d       	adc	r26, r1
 5ca:	62 1f       	adc	r22, r18
 5cc:	73 9f       	mul	r23, r19
 5ce:	b0 0d       	add	r27, r0
 5d0:	a1 1d       	adc	r26, r1
 5d2:	62 1f       	adc	r22, r18
 5d4:	83 9f       	mul	r24, r19
 5d6:	a0 0d       	add	r26, r0
 5d8:	61 1d       	adc	r22, r1
 5da:	22 1f       	adc	r18, r18
 5dc:	74 9f       	mul	r23, r20
 5de:	33 27       	eor	r19, r19
 5e0:	a0 0d       	add	r26, r0
 5e2:	61 1d       	adc	r22, r1
 5e4:	23 1f       	adc	r18, r19
 5e6:	84 9f       	mul	r24, r20
 5e8:	60 0d       	add	r22, r0
 5ea:	21 1d       	adc	r18, r1
 5ec:	82 2f       	mov	r24, r18
 5ee:	76 2f       	mov	r23, r22
 5f0:	6a 2f       	mov	r22, r26
 5f2:	11 24       	eor	r1, r1
 5f4:	9f 57       	subi	r25, 0x7F	; 127
 5f6:	50 40       	sbci	r21, 0x00	; 0
 5f8:	8a f0       	brmi	.+34     	; 0x61c <__mulsf3_pse+0x84>
 5fa:	e1 f0       	breq	.+56     	; 0x634 <__mulsf3_pse+0x9c>
 5fc:	88 23       	and	r24, r24
 5fe:	4a f0       	brmi	.+18     	; 0x612 <__mulsf3_pse+0x7a>
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	bb 1f       	adc	r27, r27
 606:	66 1f       	adc	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	91 50       	subi	r25, 0x01	; 1
 60e:	50 40       	sbci	r21, 0x00	; 0
 610:	a9 f7       	brne	.-22     	; 0x5fc <__mulsf3_pse+0x64>
 612:	9e 3f       	cpi	r25, 0xFE	; 254
 614:	51 05       	cpc	r21, r1
 616:	70 f0       	brcs	.+28     	; 0x634 <__mulsf3_pse+0x9c>
 618:	14 c0       	rjmp	.+40     	; 0x642 <__fp_inf>
 61a:	a6 cf       	rjmp	.-180    	; 0x568 <__fp_szero>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	ec f3       	brlt	.-6      	; 0x61a <__mulsf3_pse+0x82>
 620:	98 3e       	cpi	r25, 0xE8	; 232
 622:	dc f3       	brlt	.-10     	; 0x61a <__mulsf3_pse+0x82>
 624:	86 95       	lsr	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	e7 95       	ror	r30
 630:	9f 5f       	subi	r25, 0xFF	; 255
 632:	c1 f7       	brne	.-16     	; 0x624 <__mulsf3_pse+0x8c>
 634:	fe 2b       	or	r31, r30
 636:	88 0f       	add	r24, r24
 638:	91 1d       	adc	r25, r1
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <__fp_inf>:
 642:	97 f9       	bld	r25, 7
 644:	9f 67       	ori	r25, 0x7F	; 127
 646:	80 e8       	ldi	r24, 0x80	; 128
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	08 95       	ret

0000064e <__fp_nan>:
 64e:	9f ef       	ldi	r25, 0xFF	; 255
 650:	80 ec       	ldi	r24, 0xC0	; 192
 652:	08 95       	ret

00000654 <__fp_pscA>:
 654:	00 24       	eor	r0, r0
 656:	0a 94       	dec	r0
 658:	16 16       	cp	r1, r22
 65a:	17 06       	cpc	r1, r23
 65c:	18 06       	cpc	r1, r24
 65e:	09 06       	cpc	r0, r25
 660:	08 95       	ret

00000662 <__fp_pscB>:
 662:	00 24       	eor	r0, r0
 664:	0a 94       	dec	r0
 666:	12 16       	cp	r1, r18
 668:	13 06       	cpc	r1, r19
 66a:	14 06       	cpc	r1, r20
 66c:	05 06       	cpc	r0, r21
 66e:	08 95       	ret

00000670 <__fp_round>:
 670:	09 2e       	mov	r0, r25
 672:	03 94       	inc	r0
 674:	00 0c       	add	r0, r0
 676:	11 f4       	brne	.+4      	; 0x67c <__fp_round+0xc>
 678:	88 23       	and	r24, r24
 67a:	52 f0       	brmi	.+20     	; 0x690 <__fp_round+0x20>
 67c:	bb 0f       	add	r27, r27
 67e:	40 f4       	brcc	.+16     	; 0x690 <__fp_round+0x20>
 680:	bf 2b       	or	r27, r31
 682:	11 f4       	brne	.+4      	; 0x688 <__fp_round+0x18>
 684:	60 ff       	sbrs	r22, 0
 686:	04 c0       	rjmp	.+8      	; 0x690 <__fp_round+0x20>
 688:	6f 5f       	subi	r22, 0xFF	; 255
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	08 95       	ret

00000692 <__divmodhi4>:
 692:	97 fb       	bst	r25, 7
 694:	09 2e       	mov	r0, r25
 696:	07 26       	eor	r0, r23
 698:	0a d0       	rcall	.+20     	; 0x6ae <__divmodhi4_neg1>
 69a:	77 fd       	sbrc	r23, 7
 69c:	04 d0       	rcall	.+8      	; 0x6a6 <__divmodhi4_neg2>
 69e:	0c d0       	rcall	.+24     	; 0x6b8 <__udivmodhi4>
 6a0:	06 d0       	rcall	.+12     	; 0x6ae <__divmodhi4_neg1>
 6a2:	00 20       	and	r0, r0
 6a4:	1a f4       	brpl	.+6      	; 0x6ac <__divmodhi4_exit>

000006a6 <__divmodhi4_neg2>:
 6a6:	70 95       	com	r23
 6a8:	61 95       	neg	r22
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255

000006ac <__divmodhi4_exit>:
 6ac:	08 95       	ret

000006ae <__divmodhi4_neg1>:
 6ae:	f6 f7       	brtc	.-4      	; 0x6ac <__divmodhi4_exit>
 6b0:	90 95       	com	r25
 6b2:	81 95       	neg	r24
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	08 95       	ret

000006b8 <__udivmodhi4>:
 6b8:	aa 1b       	sub	r26, r26
 6ba:	bb 1b       	sub	r27, r27
 6bc:	51 e1       	ldi	r21, 0x11	; 17
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <__udivmodhi4_ep>

000006c0 <__udivmodhi4_loop>:
 6c0:	aa 1f       	adc	r26, r26
 6c2:	bb 1f       	adc	r27, r27
 6c4:	a6 17       	cp	r26, r22
 6c6:	b7 07       	cpc	r27, r23
 6c8:	10 f0       	brcs	.+4      	; 0x6ce <__udivmodhi4_ep>
 6ca:	a6 1b       	sub	r26, r22
 6cc:	b7 0b       	sbc	r27, r23

000006ce <__udivmodhi4_ep>:
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	5a 95       	dec	r21
 6d4:	a9 f7       	brne	.-22     	; 0x6c0 <__udivmodhi4_loop>
 6d6:	80 95       	com	r24
 6d8:	90 95       	com	r25
 6da:	bc 01       	movw	r22, r24
 6dc:	cd 01       	movw	r24, r26
 6de:	08 95       	ret

000006e0 <_exit>:
 6e0:	f8 94       	cli

000006e2 <__stop_program>:
 6e2:	ff cf       	rjmp	.-2      	; 0x6e2 <__stop_program>
