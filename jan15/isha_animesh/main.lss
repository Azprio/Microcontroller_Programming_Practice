
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001cc  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000106  00000000  00000000  0000038d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001d3  00000000  00000000  00000493  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000be  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000150  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>
int main()
{
  6c:	ef 92       	push	r14
  6e:	ff 92       	push	r15
  70:	1f 93       	push	r17
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
	DDRC |= 0xff;
  76:	84 b3       	in	r24, 0x14	; 20
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	84 bb       	out	0x14, r24	; 20
	DDRD &= 0xfe;
  7c:	88 98       	cbi	0x11, 0	; 17
	PORTC &= 0x00;
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	15 ba       	out	0x15, r1	; 21
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		if(count<j){
			PORTC &= 0x00;
			count++;
			PORTC |= (0xff>>(7-(count-1)));
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	e2 2e       	mov	r14, r18
  8e:	f1 2c       	mov	r15, r1
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	a8 ec       	ldi	r26, 0xC8	; 200
  96:	b0 e0       	ldi	r27, 0x00	; 0
	PORTC &= 0x00;
	int count = 0, i=0;
	int  j = 0;
	while(1)
	{
		if(PIND & 0x01){
  98:	80 99       	sbic	0x10, 0	; 16
		j++;
  9a:	01 96       	adiw	r24, 0x01	; 1
		}
		
		if(count<j){
  9c:	48 17       	cp	r20, r24
  9e:	59 07       	cpc	r21, r25
  a0:	0c f0       	brlt	.+2      	; 0xa4 <main+0x38>
  a2:	3e c0       	rjmp	.+124    	; 0x120 <main+0xb4>
			PORTC &= 0x00;
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	15 ba       	out	0x15, r1	; 21
			count++;
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
			PORTC |= (0xff>>(7-(count-1)));
  ac:	25 b3       	in	r18, 0x15	; 21
  ae:	c7 01       	movw	r24, r14
  b0:	84 1b       	sub	r24, r20
  b2:	95 0b       	sbc	r25, r21
  b4:	be 01       	movw	r22, r28
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x50>
  b8:	75 95       	asr	r23
  ba:	67 95       	ror	r22
  bc:	8a 95       	dec	r24
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x4c>
  c0:	96 2f       	mov	r25, r22
  c2:	26 2b       	or	r18, r22
  c4:	25 bb       	out	0x15, r18	; 21
  c6:	28 e8       	ldi	r18, 0x88	; 136
  c8:	33 e1       	ldi	r19, 0x13	; 19
  ca:	fd 01       	movw	r30, r26
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d1 f7       	brne	.-12     	; 0xca <main+0x5e>
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
			_delay_ms(500);
			
			for(i=0; i<count; i++){
			PORTC |= (0xff>>(7-(count-1)));
			_delay_ms(200);
			PORTC &= ~(0xff>>(7-(count-1)));
  da:	19 2f       	mov	r17, r25
  dc:	10 95       	com	r17
  de:	18 c0       	rjmp	.+48     	; 0x110 <main+0xa4>
			count++;
			PORTC |= (0xff>>(7-(count-1)));
			_delay_ms(500);
			
			for(i=0; i<count; i++){
			PORTC |= (0xff>>(7-(count-1)));
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	89 2b       	or	r24, r25
  e4:	85 bb       	out	0x15, r24	; 21
  e6:	20 ed       	ldi	r18, 0xD0	; 208
  e8:	37 e0       	ldi	r19, 0x07	; 7
  ea:	fd 01       	movw	r30, r26
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f4:	d1 f7       	brne	.-12     	; 0xea <main+0x7e>
			_delay_ms(200);
			PORTC &= ~(0xff>>(7-(count-1)));
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	81 23       	and	r24, r17
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	20 ed       	ldi	r18, 0xD0	; 208
  fe:	37 e0       	ldi	r19, 0x07	; 7
 100:	fd 01       	movw	r30, r26
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 106:	21 50       	subi	r18, 0x01	; 1
 108:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	d1 f7       	brne	.-12     	; 0x100 <main+0x94>
			PORTC &= 0x00;
			count++;
			PORTC |= (0xff>>(7-(count-1)));
			_delay_ms(500);
			
			for(i=0; i<count; i++){
 10c:	6f 5f       	subi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
 110:	64 17       	cp	r22, r20
 112:	75 07       	cpc	r23, r21
 114:	2c f3       	brlt	.-54     	; 0xe0 <main+0x74>
			PORTC &= ~(0xff>>(7-(count-1)));
			_delay_ms(200);
			}
			
			j=0;
			PORTC |= (0xff>>(7-(count-1)));
 116:	85 b3       	in	r24, 0x15	; 21
 118:	98 2b       	or	r25, r24
 11a:	95 bb       	out	0x15, r25	; 21
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
		}
					
		if(count >= 8){
 120:	48 30       	cpi	r20, 0x08	; 8
 122:	51 05       	cpc	r21, r1
 124:	0c f4       	brge	.+2      	; 0x128 <main+0xbc>
 126:	b8 cf       	rjmp	.-144    	; 0x98 <main+0x2c>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	b5 cf       	rjmp	.-150    	; 0x98 <main+0x2c>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
