
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000de  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008b  00000000  00000000  00000119  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000050  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000080  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007b  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 43 00 	jmp	0x86	; 0x86 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	TCCR0 |= (1<<CS00)|(1<<CS02);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	85 60       	ori	r24, 0x05	; 5
  70:	83 bf       	out	0x33, r24	; 51
	float i = 0;
	DDRC |=0x01;
  72:	a0 9a       	sbi	0x14, 0	; 20
		//i=i + 0.25 ;
		//TCNT0 = 0;
		//}
		//if(i >= 1000){
		
		PORTC ^=0x01;
  74:	91 e0       	ldi	r25, 0x01	; 1
	float i = 0;
	DDRC |=0x01;
	while (1)
	{
		
		if(TCNT0>=97){
  76:	82 b7       	in	r24, 0x32	; 50
  78:	81 36       	cpi	r24, 0x61	; 97
  7a:	e8 f3       	brcs	.-6      	; 0x76 <main+0xa>
		//i=i + 0.25 ;
		//TCNT0 = 0;
		//}
		//if(i >= 1000){
		
		PORTC ^=0x01;
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	89 27       	eor	r24, r25
  80:	85 bb       	out	0x15, r24	; 21
		TCNT0 = 0;
  82:	12 be       	out	0x32, r1	; 50
  84:	f8 cf       	rjmp	.-16     	; 0x76 <main+0xa>

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>
