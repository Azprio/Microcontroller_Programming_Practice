
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a5  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000110  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019c  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c0  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000120  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<avr/io.h>
#include<util/delay.h>

int main(){
  82:	cf 92       	push	r12
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	df 93       	push	r29
  90:	cf 93       	push	r28
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	64 97       	sbiw	r28, 0x14	; 20
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	f8 94       	cli
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	cd bf       	out	0x3d, r28	; 61
DDRC = DDRC | 0b11111111;
  a2:	84 b3       	in	r24, 0x14	; 20
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	84 bb       	out	0x14, r24	; 20
int j=0;
DDRD = DDRD | 0b11111111;
  a8:	91 b3       	in	r25, 0x11	; 17
  aa:	81 bb       	out	0x11, r24	; 17
while(1){
int a[10]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  ac:	be 01       	movw	r22, r28
  ae:	6f 5f       	subi	r22, 0xFF	; 255
  b0:	7f 4f       	sbci	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	08 ec       	ldi	r16, 0xC8	; 200
  b4:	10 e0       	ldi	r17, 0x00	; 0
i++;
_delay_ms(500);
}
}
else{
for(i=0;i<10; i++){
  b6:	95 e1       	ldi	r25, 0x15	; 21
  b8:	c9 2e       	mov	r12, r25
  ba:	d1 2c       	mov	r13, r1
  bc:	cc 0e       	add	r12, r28
  be:	dd 1e       	adc	r13, r29
int b=0;
for(b=0;b<5; b++){
PORTC = a[b];

if(b==4){
for(i=0;i<6; i++){
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	e8 2e       	mov	r14, r24
  c4:	f1 2c       	mov	r15, r1
  c6:	ec 0e       	add	r14, r28
  c8:	fd 1e       	adc	r15, r29
int main(){
DDRC = DDRC | 0b11111111;
int j=0;
DDRD = DDRD | 0b11111111;
while(1){
int a[10]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  ca:	db 01       	movw	r26, r22
  cc:	e0 e6       	ldi	r30, 0x60	; 96
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	84 e1       	ldi	r24, 0x14	; 20
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x50>
  da:	ab 01       	movw	r20, r22
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
int i=0;
int b=0;
for(b=0;b<5; b++){
PORTC = a[b];
  e0:	fa 01       	movw	r30, r20
  e2:	80 81       	ld	r24, Z
  e4:	85 bb       	out	0x15, r24	; 21

if(b==4){
  e6:	24 30       	cpi	r18, 0x04	; 4
  e8:	31 05       	cpc	r19, r1
  ea:	79 f4       	brne	.+30     	; 0x10a <main+0x88>
  ec:	db 01       	movw	r26, r22
for(i=0;i<6; i++){
PORTD = a[i];
  ee:	8c 91       	ld	r24, X
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	88 e8       	ldi	r24, 0x88	; 136
  f4:	93 e1       	ldi	r25, 0x13	; 19
  f6:	f8 01       	movw	r30, r16
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x76>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <main+0x74>
 100:	14 96       	adiw	r26, 0x04	; 4
int b=0;
for(b=0;b<5; b++){
PORTC = a[b];

if(b==4){
for(i=0;i<6; i++){
 102:	ae 15       	cp	r26, r14
 104:	bf 05       	cpc	r27, r15
 106:	99 f7       	brne	.-26     	; 0xee <main+0x6c>
 108:	0e c0       	rjmp	.+28     	; 0x126 <main+0xa4>
 10a:	db 01       	movw	r26, r22
_delay_ms(500);
}
}
else{
for(i=0;i<10; i++){
PORTD = a[i];
 10c:	8c 91       	ld	r24, X
 10e:	82 bb       	out	0x12, r24	; 18
 110:	88 e8       	ldi	r24, 0x88	; 136
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	f8 01       	movw	r30, r16
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	d9 f7       	brne	.-10     	; 0x114 <main+0x92>
 11e:	14 96       	adiw	r26, 0x04	; 4
i++;
_delay_ms(500);
}
}
else{
for(i=0;i<10; i++){
 120:	ac 15       	cp	r26, r12
 122:	bd 05       	cpc	r27, r13
 124:	99 f7       	brne	.-26     	; 0x10c <main+0x8a>
DDRD = DDRD | 0b11111111;
while(1){
int a[10]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
int i=0;
int b=0;
for(b=0;b<5; b++){
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	4e 5f       	subi	r20, 0xFE	; 254
 12c:	5f 4f       	sbci	r21, 0xFF	; 255
 12e:	25 30       	cpi	r18, 0x05	; 5
 130:	31 05       	cpc	r19, r1
 132:	b1 f6       	brne	.-84     	; 0xe0 <main+0x5e>
 134:	ca cf       	rjmp	.-108    	; 0xca <main+0x48>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
