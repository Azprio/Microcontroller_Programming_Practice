
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002b4  00000000  00000000  0000016f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000135  00000000  00000000  00000423  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000206  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cd  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005b  00000000  00000000  0000085d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <display>:
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  6c:	9f ef       	ldi	r25, 0xFF	; 255
  6e:	92 bb       	out	0x12, r25	; 18
PORTC=data;
  70:	65 bb       	out	0x15, r22	; 21
PORTD=seg;  
  72:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  74:	80 e2       	ldi	r24, 0x20	; 32
  76:	9e e4       	ldi	r25, 0x4E	; 78
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <display+0xc>
_delay_ms(10);
}
  7c:	08 95       	ret

0000007e <main>:

int main(){

DDRC = DDRC | 0b11111111;
  7e:	84 b3       	in	r24, 0x14	; 20
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 bb       	out	0x14, r24	; 20
DDRD = DDRD | 0b00001111;
  84:	81 b3       	in	r24, 0x11	; 17
  86:	8f 60       	ori	r24, 0x0F	; 15
  88:	81 bb       	out	0x11, r24	; 17
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  8a:	4f ef       	ldi	r20, 0xFF	; 255
PORTC=data;
  8c:	bb e5       	ldi	r27, 0x5B	; 91
PORTD=seg;  
  8e:	ae ef       	ldi	r26, 0xFE	; 254
  90:	20 e2       	ldi	r18, 0x20	; 32
  92:	3e e4       	ldi	r19, 0x4E	; 78
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
PORTC=data;
  94:	ff e3       	ldi	r31, 0x3F	; 63
PORTD=seg;  
  96:	ed ef       	ldi	r30, 0xFD	; 253
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
PORTC=data;
  98:	56 e6       	ldi	r21, 0x66	; 102
PORTD=seg;  
  9a:	7b ef       	ldi	r23, 0xFB	; 251
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  9c:	67 e0       	ldi	r22, 0x07	; 7
  9e:	42 bb       	out	0x12, r20	; 18
PORTC=data;
  a0:	b5 bb       	out	0x15, r27	; 21
PORTD=seg;  
  a2:	a2 bb       	out	0x12, r26	; 18
  a4:	c9 01       	movw	r24, r18
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x28>
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  aa:	42 bb       	out	0x12, r20	; 18
PORTC=data;
  ac:	f5 bb       	out	0x15, r31	; 21
PORTD=seg;  
  ae:	e2 bb       	out	0x12, r30	; 18
  b0:	c9 01       	movw	r24, r18
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x34>
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  b6:	42 bb       	out	0x12, r20	; 18
PORTC=data;
  b8:	55 bb       	out	0x15, r21	; 21
PORTD=seg;  
  ba:	72 bb       	out	0x12, r23	; 18
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x40>
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  c2:	42 bb       	out	0x12, r20	; 18
PORTC=data;
  c4:	55 bb       	out	0x15, r21	; 21
PORTD=seg;  
  c6:	62 bb       	out	0x12, r22	; 18
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x4c>
  ce:	e7 cf       	rjmp	.-50     	; 0x9e <main+0x20>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
