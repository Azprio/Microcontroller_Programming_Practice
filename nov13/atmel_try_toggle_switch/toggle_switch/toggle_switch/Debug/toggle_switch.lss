
toggle_switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000013c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c3  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000531  00000000  00000000  0000078b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000216  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000316  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000022  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

char preiv1 =0;
char preiv2 =0;
int main(){
	//1
	DDRA=DDRA | 0b00000011; //define as output
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	83 60       	ori	r24, 0x03	; 3
  80:	8a bb       	out	0x1a, r24	; 26
	DDRA=DDRA & 0b11110011; //define as input
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	83 7f       	andi	r24, 0xF3	; 243
  86:	8a bb       	out	0x1a, r24	; 26
		//2
		char button1_status = PINA & 0b00000100; //Reading button 1 status
		char button2_status = PINA & 0b00001000; //Reading button 2 status
		//3 Update LED Status
		if(button1_status && (button1_status!=preiv1))
		PORTA=PORTA ^ 0b00000001; //toggle LED 1
  88:	41 e0       	ldi	r20, 0x01	; 1
		if(button2_status && (button2_status!=preiv2))
		PORTA=PORTA ^ 0b00000010; //toggle LED 2
  8a:	32 e0       	ldi	r19, 0x02	; 2
	DDRA=DDRA | 0b00000011; //define as output
	DDRA=DDRA & 0b11110011; //define as input
	
	while(1){
		//2
		char button1_status = PINA & 0b00000100; //Reading button 1 status
  8c:	99 b3       	in	r25, 0x19	; 25
		char button2_status = PINA & 0b00001000; //Reading button 2 status
  8e:	89 b3       	in	r24, 0x19	; 25
  90:	88 70       	andi	r24, 0x08	; 8
		//3 Update LED Status
		if(button1_status && (button1_status!=preiv1))
  92:	29 2f       	mov	r18, r25
  94:	24 70       	andi	r18, 0x04	; 4
  96:	92 ff       	sbrs	r25, 2
  98:	07 c0       	rjmp	.+14     	; 0xa8 <main+0x2c>
  9a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <preiv1>
  9e:	29 17       	cp	r18, r25
  a0:	19 f0       	breq	.+6      	; 0xa8 <main+0x2c>
		PORTA=PORTA ^ 0b00000001; //toggle LED 1
  a2:	9b b3       	in	r25, 0x1b	; 27
  a4:	94 27       	eor	r25, r20
  a6:	9b bb       	out	0x1b, r25	; 27
		if(button2_status && (button2_status!=preiv2))
  a8:	88 23       	and	r24, r24
  aa:	39 f0       	breq	.+14     	; 0xba <main+0x3e>
  ac:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  b0:	89 17       	cp	r24, r25
  b2:	19 f0       	breq	.+6      	; 0xba <main+0x3e>
		PORTA=PORTA ^ 0b00000010; //toggle LED 2
  b4:	9b b3       	in	r25, 0x1b	; 27
  b6:	93 27       	eor	r25, r19
  b8:	9b bb       	out	0x1b, r25	; 27
		//_delay_ms(270);

		preiv1 = button1_status ;
  ba:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <preiv1>
		preiv2 = button2_status ;
  be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
  c2:	e4 cf       	rjmp	.-56     	; 0x8c <main+0x10>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
