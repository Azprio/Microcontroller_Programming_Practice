
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000168  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000048  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000cd  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000099  00000000  00000000  0000029d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d8  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a0  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Time_config>:
#include<avr/interrupt.h>

volatile int ov_count = 0;

void Time_config(){
	TCCR0 |= (1<<CS00)|(1<<CS02);
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	85 60       	ori	r24, 0x05	; 5
  80:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
  82:	89 b7       	in	r24, 0x39	; 57
  84:	81 60       	ori	r24, 0x01	; 1
  86:	89 bf       	out	0x39, r24	; 57
	sei();
  88:	78 94       	sei
}
  8a:	08 95       	ret

0000008c <main>:
#include<avr/interrupt.h>

volatile int ov_count = 0;

void Time_config(){
	TCCR0 |= (1<<CS00)|(1<<CS02);
  8c:	83 b7       	in	r24, 0x33	; 51
  8e:	85 60       	ori	r24, 0x05	; 5
  90:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
  92:	89 b7       	in	r24, 0x39	; 57
  94:	81 60       	ori	r24, 0x01	; 1
  96:	89 bf       	out	0x39, r24	; 57
	sei();
  98:	78 94       	sei

int main()
{
	
	Time_config();
	DDRC |=0x01;
  9a:	a0 9a       	sbi	0x14, 0	; 20
	while (1)
	{
		
		if(ov_count == 12 && TCNT0>=52){
		
		PORTC ^=0x01;
  9c:	21 e0       	ldi	r18, 0x01	; 1
	Time_config();
	DDRC |=0x01;
	while (1)
	{
		
		if(ov_count == 12 && TCNT0>=52){
  9e:	80 91 60 00 	lds	r24, 0x0060
  a2:	90 91 61 00 	lds	r25, 0x0061
  a6:	0c 97       	sbiw	r24, 0x0c	; 12
  a8:	d1 f7       	brne	.-12     	; 0x9e <main+0x12>
  aa:	82 b7       	in	r24, 0x32	; 50
  ac:	84 33       	cpi	r24, 0x34	; 52
  ae:	b8 f3       	brcs	.-18     	; 0x9e <main+0x12>
		
		PORTC ^=0x01;
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	82 27       	eor	r24, r18
  b4:	85 bb       	out	0x15, r24	; 21
		TCNT0 = 0;
  b6:	12 be       	out	0x32, r1	; 50
		ov_count = 0;
  b8:	10 92 61 00 	sts	0x0061, r1
  bc:	10 92 60 00 	sts	0x0060, r1
  c0:	ee cf       	rjmp	.-36     	; 0x9e <main+0x12>

000000c2 <__vector_11>:
		
	}
	
}

ISR(TIMER0_OVF_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	ov_count++;
  d0:	80 91 60 00 	lds	r24, 0x0060
  d4:	90 91 61 00 	lds	r25, 0x0061
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	90 93 61 00 	sts	0x0061, r25
  de:	80 93 60 00 	sts	0x0060, r24
	}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
