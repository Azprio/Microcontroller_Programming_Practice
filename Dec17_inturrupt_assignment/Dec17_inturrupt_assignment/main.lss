
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000236  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008c  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002a1  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d3  00000000  00000000  0000061f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a7  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014a  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000086  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  7a:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Initialization>:
void init_int0();

void ADC_Initialization()
{

	ADMUX =(1<<REFS0);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADPS1) | (1<<ADEN);
  86:	82 e8       	ldi	r24, 0x82	; 130
  88:	86 b9       	out	0x06, r24	; 6
	
}
  8a:	08 95       	ret

0000008c <Read_ADC>:

int Read_ADC()
{

	ADMUX |=(1<<MUX1);
  8c:	39 9a       	sbi	0x07, 1	; 7
	ADCSRA |= (1<<ADSC);
  8e:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & 0b01000000)
  90:	36 99       	sbic	0x06, 6	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <Read_ADC+0x4>
	{
	}

	int value = 0;
	value = ADCL;
  94:	24 b1       	in	r18, 0x04	; 4
  96:	30 e0       	ldi	r19, 0x00	; 0
	value |=(ADCH << 8);
  98:	45 b1       	in	r20, 0x05	; 5
  9a:	94 2f       	mov	r25, r20
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	28 2b       	or	r18, r24
  a0:	39 2b       	or	r19, r25
	return value;

}
  a2:	c9 01       	movw	r24, r18
  a4:	08 95       	ret

000000a6 <init_int0>:

}

void init_int0()
{
	sei();
  a6:	78 94       	sei
	//SREG | = (1<< 7);
	MCUCR |=  (1 << ISC01) | (1 << ISC00); 
  a8:	85 b7       	in	r24, 0x35	; 53
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	85 bf       	out	0x35, r24	; 53
	GICR |= ( 1<<INT0 );
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8b bf       	out	0x3b, r24	; 59
	
	return 0;             
}
  b4:	08 95       	ret

000000b6 <__vector_1>:

ISR(INT0_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
	PORTD^=(1<<7);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 58       	subi	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <main>:

}

void init_int0()
{
	sei();
  d4:	78 94       	sei
	//SREG | = (1<< 7);
	MCUCR |=  (1 << ISC01) | (1 << ISC00); 
  d6:	85 b7       	in	r24, 0x35	; 53
  d8:	83 60       	ori	r24, 0x03	; 3
  da:	85 bf       	out	0x35, r24	; 53
	GICR |= ( 1<<INT0 );
  dc:	8b b7       	in	r24, 0x3b	; 59
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	8b bf       	out	0x3b, r24	; 59
void init_int0();

void ADC_Initialization()
{

	ADMUX =(1<<REFS0);
  e2:	80 e4       	ldi	r24, 0x40	; 64
  e4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADPS1) | (1<<ADEN);
  e6:	82 e8       	ldi	r24, 0x82	; 130
  e8:	86 b9       	out	0x06, r24	; 6
int main(){

	init_int0();
	ADC_Initialization();

	DDRC = DDRC | 0b11111111;
  ea:	84 b3       	in	r24, 0x14	; 20
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
	DDRD = DDRD | 0b00110011;
  f0:	81 b3       	in	r24, 0x11	; 17
  f2:	83 63       	ori	r24, 0x33	; 51
  f4:	81 bb       	out	0x11, r24	; 17
	DDRD|=1<<7;
  f6:	8f 9a       	sbi	0x11, 7	; 17
	PORTD&=~(1<<7);
  f8:	97 98       	cbi	0x12, 7	; 18
	while(1){

		int sensed_value = Read_ADC()/2;
  fa:	0e 94 46 00 	call	0x8c	; 0x8c <Read_ADC>
		BCD_Converter(sensed_value);
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__divmodhi4>
 106:	cb 01       	movw	r24, r22
 108:	0e 94 b6 00 	call	0x16c	; 0x16c <BCD_Converter>
 10c:	f6 cf       	rjmp	.-20     	; 0xfa <main+0x26>

0000010e <display>:
#include<avr/io.h>
#include<util/delay.h>

void display(unsigned char seg,unsigned char data){
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	28 97       	sbiw	r28, 0x08	; 8
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	28 2f       	mov	r18, r24
int s[4]={0xfe,0xfd,0xef,0xdf};
 124:	fe 01       	movw	r30, r28
 126:	31 96       	adiw	r30, 0x01	; 1
 128:	a0 e6       	ldi	r26, 0x60	; 96
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	0d 90       	ld	r0, X+
 130:	01 92       	st	Z+, r0
 132:	81 50       	subi	r24, 0x01	; 1
 134:	e1 f7       	brne	.-8      	; 0x12e <display+0x20>
PORTD|=0x33;
 136:	82 b3       	in	r24, 0x12	; 18
 138:	83 63       	ori	r24, 0x33	; 51
 13a:	82 bb       	out	0x12, r24	; 18
PORTC=data;
 13c:	65 bb       	out	0x15, r22	; 21
PORTD&=s[seg];  
 13e:	92 b3       	in	r25, 0x12	; 18
 140:	e2 2f       	mov	r30, r18
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	ec 0f       	add	r30, r28
 14a:	fd 1f       	adc	r31, r29
 14c:	81 81       	ldd	r24, Z+1	; 0x01
 14e:	98 23       	and	r25, r24
 150:	92 bb       	out	0x12, r25	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	9e e4       	ldi	r25, 0x4E	; 78
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <display+0x48>
_delay_ms(10);
}
 15a:	28 96       	adiw	r28, 0x08	; 8
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	cf 91       	pop	r28
 168:	df 91       	pop	r29
 16a:	08 95       	ret

0000016c <BCD_Converter>:

void BCD_Converter(int given){
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	7c 01       	movw	r14, r24
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
		 a = (given/1000);
 17c:	68 ee       	ldi	r22, 0xE8	; 232
 17e:	73 e0       	ldi	r23, 0x03	; 3
 180:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__divmodhi4>
 184:	d6 2e       	mov	r13, r22
 186:	03 e0       	ldi	r16, 0x03	; 3
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	c1 e0       	ldi	r28, 0x01	; 1
 18c:	d0 e0       	ldi	r29, 0x00	; 0
void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
 18e:	01 15       	cp	r16, r1
 190:	11 05       	cpc	r17, r1
 192:	11 f4       	brne	.+4      	; 0x198 <BCD_Converter+0x2c>
 194:	6d 2d       	mov	r22, r13
 196:	0a c0       	rjmp	.+20     	; 0x1ac <BCD_Converter+0x40>
		 a = (given/1000);
		}
	else{
		 a = (given/j)%10;
 198:	c7 01       	movw	r24, r14
 19a:	be 01       	movw	r22, r28
 19c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__divmodhi4>
 1a0:	cb 01       	movw	r24, r22
 1a2:	6a e0       	ldi	r22, 0x0A	; 10
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__divmodhi4>
 1aa:	68 2f       	mov	r22, r24
		}
display(i, a);
 1ac:	80 2f       	mov	r24, r16
 1ae:	0e 94 87 00 	call	0x10e	; 0x10e <display>
i--;
 1b2:	01 50       	subi	r16, 0x01	; 1
 1b4:	10 40       	sbci	r17, 0x00	; 0

void BCD_Converter(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	0f 3f       	cpi	r16, 0xFF	; 255
 1ba:	18 07       	cpc	r17, r24
 1bc:	59 f0       	breq	.+22     	; 0x1d4 <BCD_Converter+0x68>
	else{
		 a = (given/j)%10;
		}
display(i, a);
i--;
j = j*10;
 1be:	ce 01       	movw	r24, r28
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	23 e0       	ldi	r18, 0x03	; 3
 1c6:	cc 0f       	add	r28, r28
 1c8:	dd 1f       	adc	r29, r29
 1ca:	2a 95       	dec	r18
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <BCD_Converter+0x5a>
 1ce:	c8 0f       	add	r28, r24
 1d0:	d9 1f       	adc	r29, r25
 1d2:	dd cf       	rjmp	.-70     	; 0x18e <BCD_Converter+0x22>
}
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	08 95       	ret

000001e4 <__divmodhi4>:
 1e4:	97 fb       	bst	r25, 7
 1e6:	09 2e       	mov	r0, r25
 1e8:	07 26       	eor	r0, r23
 1ea:	0a d0       	rcall	.+20     	; 0x200 <__divmodhi4_neg1>
 1ec:	77 fd       	sbrc	r23, 7
 1ee:	04 d0       	rcall	.+8      	; 0x1f8 <__divmodhi4_neg2>
 1f0:	0c d0       	rcall	.+24     	; 0x20a <__udivmodhi4>
 1f2:	06 d0       	rcall	.+12     	; 0x200 <__divmodhi4_neg1>
 1f4:	00 20       	and	r0, r0
 1f6:	1a f4       	brpl	.+6      	; 0x1fe <__divmodhi4_exit>

000001f8 <__divmodhi4_neg2>:
 1f8:	70 95       	com	r23
 1fa:	61 95       	neg	r22
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255

000001fe <__divmodhi4_exit>:
 1fe:	08 95       	ret

00000200 <__divmodhi4_neg1>:
 200:	f6 f7       	brtc	.-4      	; 0x1fe <__divmodhi4_exit>
 202:	90 95       	com	r25
 204:	81 95       	neg	r24
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	08 95       	ret

0000020a <__udivmodhi4>:
 20a:	aa 1b       	sub	r26, r26
 20c:	bb 1b       	sub	r27, r27
 20e:	51 e1       	ldi	r21, 0x11	; 17
 210:	07 c0       	rjmp	.+14     	; 0x220 <__udivmodhi4_ep>

00000212 <__udivmodhi4_loop>:
 212:	aa 1f       	adc	r26, r26
 214:	bb 1f       	adc	r27, r27
 216:	a6 17       	cp	r26, r22
 218:	b7 07       	cpc	r27, r23
 21a:	10 f0       	brcs	.+4      	; 0x220 <__udivmodhi4_ep>
 21c:	a6 1b       	sub	r26, r22
 21e:	b7 0b       	sbc	r27, r23

00000220 <__udivmodhi4_ep>:
 220:	88 1f       	adc	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	5a 95       	dec	r21
 226:	a9 f7       	brne	.-22     	; 0x212 <__udivmodhi4_loop>
 228:	80 95       	com	r24
 22a:	90 95       	com	r25
 22c:	bc 01       	movw	r22, r24
 22e:	cd 01       	movw	r24, r26
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
