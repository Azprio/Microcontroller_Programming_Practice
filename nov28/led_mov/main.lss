
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004d  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002a0  00000000  00000000  000001e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018b  00000000  00000000  00000483  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002c4  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000da  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<my_lib.h>
int main(){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
DDRA = DDRA | 0b11111111;
  70:	8a b3       	in	r24, 0x1a	; 26
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	8a bb       	out	0x1a, r24	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	c8 ec       	ldi	r28, 0xC8	; 200
  78:	d0 e0       	ldi	r29, 0x00	; 0

while(1){
top_to_down();
  7a:	0e 94 49 00 	call	0x92	; 0x92 <top_to_down>
  7e:	88 e8       	ldi	r24, 0x88	; 136
  80:	93 e1       	ldi	r25, 0x13	; 19
  82:	fe 01       	movw	r30, r28
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  88:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8a:	d9 f7       	brne	.-10     	; 0x82 <main+0x16>
_delay_ms(500);
down_to_top();
  8c:	0e 94 64 00 	call	0xc8	; 0xc8 <down_to_top>
  90:	f4 cf       	rjmp	.-24     	; 0x7a <main+0xe>

00000092 <top_to_down>:
#include<avr/io.h>
#include<util/delay.h>

void top_to_down(){
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0

for(int i=0;i<8; i++){
PORTA= (0b00000001<< i);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	48 ec       	ldi	r20, 0xC8	; 200
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	cb 01       	movw	r24, r22
  a0:	02 2e       	mov	r0, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <top_to_down+0x16>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	0a 94       	dec	r0
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <top_to_down+0x12>
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	97 e0       	ldi	r25, 0x07	; 7
  b2:	fa 01       	movw	r30, r20
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <top_to_down+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ba:	d9 f7       	brne	.-10     	; 0xb2 <top_to_down+0x20>
#include<avr/io.h>
#include<util/delay.h>

void top_to_down(){

for(int i=0;i<8; i++){
  bc:	2f 5f       	subi	r18, 0xFF	; 255
  be:	3f 4f       	sbci	r19, 0xFF	; 255
  c0:	28 30       	cpi	r18, 0x08	; 8
  c2:	31 05       	cpc	r19, r1
  c4:	61 f7       	brne	.-40     	; 0x9e <top_to_down+0xc>
PORTA= (0b00000001<< i);
_delay_ms(200);
}

}
  c6:	08 95       	ret

000000c8 <down_to_top>:

void down_to_top(){
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0

for(int i=0;i<8; i++){
PORTA= (0b10000000>> i);
  cc:	60 e8       	ldi	r22, 0x80	; 128
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	48 ec       	ldi	r20, 0xC8	; 200
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	cb 01       	movw	r24, r22
  d6:	02 2e       	mov	r0, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <down_to_top+0x16>
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <down_to_top+0x12>
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	80 ed       	ldi	r24, 0xD0	; 208
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	fa 01       	movw	r30, r20
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <down_to_top+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f0:	d9 f7       	brne	.-10     	; 0xe8 <down_to_top+0x20>

}

void down_to_top(){

for(int i=0;i<8; i++){
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	28 30       	cpi	r18, 0x08	; 8
  f8:	31 05       	cpc	r19, r1
  fa:	61 f7       	brne	.-40     	; 0xd4 <down_to_top+0xc>
PORTA= (0b10000000>> i);
_delay_ms(200);
}

  fc:	08 95       	ret

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
