
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000304  00000000  00000000  000001b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013d  00000000  00000000  000004bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000296  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c3  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000cb  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000108  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <display>:
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  6c:	9f ef       	ldi	r25, 0xFF	; 255
  6e:	92 bb       	out	0x12, r25	; 18
PORTC=data;
  70:	65 bb       	out	0x15, r22	; 21
PORTD=seg;  
  72:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  74:	80 e2       	ldi	r24, 0x20	; 32
  76:	9e e4       	ldi	r25, 0x4E	; 78
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <display+0xc>
_delay_ms(10);
}
  7c:	08 95       	ret

0000007e <main>:

int main(){
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17

DDRC = DDRC | 0b11111111;
  82:	84 b3       	in	r24, 0x14	; 20
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 bb       	out	0x14, r24	; 20
DDRD = DDRD | 0b00001111;
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8f 60       	ori	r24, 0x0F	; 15
  8c:	81 bb       	out	0x11, r24	; 17
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  92:	3f ef       	ldi	r19, 0xFF	; 255
PORTC=data;
  94:	f2 e0       	ldi	r31, 0x02	; 2
PORTD=seg;  
  96:	0e ef       	ldi	r16, 0xFE	; 254
  98:	60 e2       	ldi	r22, 0x20	; 32
  9a:	7e e4       	ldi	r23, 0x4E	; 78
  9c:	1d ef       	ldi	r17, 0xFD	; 253
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
PORTC=data;
  9e:	bb ef       	ldi	r27, 0xFB	; 251
  a0:	e7 e0       	ldi	r30, 0x07	; 7
  a2:	a4 e0       	ldi	r26, 0x04	; 4
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  a4:	32 bb       	out	0x12, r19	; 18
PORTC=data;
  a6:	f5 bb       	out	0x15, r31	; 21
PORTD=seg;  
  a8:	02 bb       	out	0x12, r16	; 18
  aa:	cb 01       	movw	r24, r22
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x2e>
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  b0:	32 bb       	out	0x12, r19	; 18
PORTC=data;
  b2:	15 ba       	out	0x15, r1	; 21
PORTD=seg;  
  b4:	12 bb       	out	0x12, r17	; 18
  b6:	cb 01       	movw	r24, r22
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x3a>
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  bc:	32 bb       	out	0x12, r19	; 18
PORTC=data;
  be:	45 bb       	out	0x15, r20	; 21
PORTD=seg;  
  c0:	b2 bb       	out	0x12, r27	; 18
  c2:	cb 01       	movw	r24, r22
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x46>
for(b=0;b<5; b++){
display(s[0], 2);
display(s[1], 0);
//PORTC = a[b];
display(s[2], b);
if(b==4){
  c8:	44 30       	cpi	r20, 0x04	; 4
  ca:	51 05       	cpc	r21, r1
  cc:	99 f4       	brne	.+38     	; 0xf4 <main+0x76>
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  ce:	32 bb       	out	0x12, r19	; 18
PORTC=data;
  d0:	15 ba       	out	0x15, r1	; 21
PORTD=seg;  
  d2:	e2 bb       	out	0x12, r30	; 18
  d4:	cb 01       	movw	r24, r22
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x58>
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  da:	32 bb       	out	0x12, r19	; 18
PORTC=data;
  dc:	f5 bb       	out	0x15, r31	; 21
PORTD=seg;  
  de:	e2 bb       	out	0x12, r30	; 18
  e0:	cb 01       	movw	r24, r22
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x64>
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  e6:	32 bb       	out	0x12, r19	; 18
PORTC=data;
  e8:	a5 bb       	out	0x15, r26	; 21
PORTD=seg;  
  ea:	e2 bb       	out	0x12, r30	; 18
  ec:	cb 01       	movw	r24, r22
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x70>
  f2:	0a c0       	rjmp	.+20     	; 0x108 <main+0x8a>
display(s[0], 2);
display(s[1], 0);
//PORTC = a[b];
display(s[2], b);
if(b==4){
for(i=0;i<6; i++){
  f4:	20 e0       	ldi	r18, 0x00	; 0
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10
void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  f6:	32 bb       	out	0x12, r19	; 18
PORTC=data;
  f8:	25 bb       	out	0x15, r18	; 21
PORTD=seg;  
  fa:	e2 bb       	out	0x12, r30	; 18
  fc:	cb 01       	movw	r24, r22
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x80>
 102:	2e 5f       	subi	r18, 0xFE	; 254
display(s[3], i);
i++;
}
}
else{
for(i=0;i<10; i++){
 104:	2a 30       	cpi	r18, 0x0A	; 10
 106:	b9 f7       	brne	.-18     	; 0xf6 <main+0x78>



int i=0;
int b=0;
for(b=0;b<5; b++){
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	45 30       	cpi	r20, 0x05	; 5
 10e:	51 05       	cpc	r21, r1
 110:	0c f4       	brge	.+2      	; 0x114 <main+0x96>
 112:	c8 cf       	rjmp	.-112    	; 0xa4 <main+0x26>
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	c5 cf       	rjmp	.-118    	; 0xa4 <main+0x26>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
