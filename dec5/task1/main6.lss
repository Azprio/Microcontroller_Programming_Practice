
main6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001e8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000031  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000207  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000161  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001cb  00000000  00000000  0000061d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d0  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006b  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  7a:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <display>:
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10

void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  82:	9f ef       	ldi	r25, 0xFF	; 255
  84:	92 bb       	out	0x12, r25	; 18
PORTC=data;
  86:	65 bb       	out	0x15, r22	; 21
PORTD=seg;  
  88:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8a:	80 e2       	ldi	r24, 0x20	; 32
  8c:	9e e4       	ldi	r25, 0x4E	; 78
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <display+0xc>
_delay_ms(10);
}
  92:	08 95       	ret

00000094 <calcu>:

void calcu(int given){
  94:	7f 92       	push	r7
  96:	8f 92       	push	r8
  98:	9f 92       	push	r9
  9a:	af 92       	push	r10
  9c:	bf 92       	push	r11
  9e:	cf 92       	push	r12
  a0:	df 92       	push	r13
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	28 97       	sbiw	r28, 0x08	; 8
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	6c 01       	movw	r12, r24
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
		 a = (given/1000);
  c0:	68 ee       	ldi	r22, 0xE8	; 232
  c2:	73 e0       	ldi	r23, 0x03	; 3
  c4:	0e 94 cb 00 	call	0x196	; 0x196 <__divmodhi4>
  c8:	46 2f       	mov	r20, r22
  ca:	e7 e0       	ldi	r30, 0x07	; 7
  cc:	ee 2e       	mov	r14, r30
  ce:	f1 2c       	mov	r15, r1
  d0:	ec 0e       	add	r14, r28
  d2:	fd 1e       	adc	r15, r29
  d4:	03 e0       	ldi	r16, 0x03	; 3
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
		}
	else{
		 a = (given/j)%10;
		}
int s[4]={0xfe,0xfd,0xfb,0x07};
  dc:	4e 01       	movw	r8, r28
  de:	08 94       	sec
  e0:	81 1c       	adc	r8, r1
  e2:	91 1c       	adc	r9, r1
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10

void display(unsigned char seg,unsigned char data){
PORTD=0xff;
  e4:	77 24       	eor	r7, r7
  e6:	7a 94       	dec	r7
  e8:	70 e2       	ldi	r23, 0x20	; 32
  ea:	a7 2e       	mov	r10, r23
  ec:	7e e4       	ldi	r23, 0x4E	; 78
  ee:	b7 2e       	mov	r11, r23
void calcu(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
	if(i==0){
  f0:	01 15       	cp	r16, r1
  f2:	11 05       	cpc	r17, r1
  f4:	11 f4       	brne	.+4      	; 0xfa <calcu+0x66>
  f6:	94 2f       	mov	r25, r20
  f8:	0a c0       	rjmp	.+20     	; 0x10e <calcu+0x7a>
		 a = (given/1000);
		}
	else{
		 a = (given/j)%10;
  fa:	c6 01       	movw	r24, r12
  fc:	b9 01       	movw	r22, r18
  fe:	0e 94 cb 00 	call	0x196	; 0x196 <__divmodhi4>
 102:	cb 01       	movw	r24, r22
 104:	6a e0       	ldi	r22, 0x0A	; 10
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	0e 94 cb 00 	call	0x196	; 0x196 <__divmodhi4>
 10c:	98 2f       	mov	r25, r24
		}
int s[4]={0xfe,0xfd,0xfb,0x07};
 10e:	d4 01       	movw	r26, r8
 110:	e0 e6       	ldi	r30, 0x60	; 96
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	01 90       	ld	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	e1 f7       	brne	.-8      	; 0x116 <calcu+0x82>
display(s[i], a);
 11e:	f7 01       	movw	r30, r14
 120:	80 81       	ld	r24, Z
#include<avr/io.h>
#include<util/delay.h>
#define delaya 10

void display(unsigned char seg,unsigned char data){
PORTD=0xff;
 122:	72 ba       	out	0x12, r7	; 18
PORTC=data;
 124:	95 bb       	out	0x15, r25	; 21
PORTD=seg;  
 126:	82 bb       	out	0x12, r24	; 18
 128:	c5 01       	movw	r24, r10
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <calcu+0x96>
	else{
		 a = (given/j)%10;
		}
int s[4]={0xfe,0xfd,0xfb,0x07};
display(s[i], a);
i--;
 12e:	01 50       	subi	r16, 0x01	; 1
 130:	10 40       	sbci	r17, 0x00	; 0
 132:	8e ef       	ldi	r24, 0xFE	; 254
 134:	9f ef       	ldi	r25, 0xFF	; 255
 136:	e8 0e       	add	r14, r24
 138:	f9 1e       	adc	r15, r25

void calcu(int given){
int i=3;
int j=1;
int a=0;
while(i>=0){
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	0f 3f       	cpi	r16, 0xFF	; 255
 13e:	19 07       	cpc	r17, r25
 140:	59 f0       	breq	.+22     	; 0x158 <calcu+0xc4>
		 a = (given/j)%10;
		}
int s[4]={0xfe,0xfd,0xfb,0x07};
display(s[i], a);
i--;
j = j*10;
 142:	c9 01       	movw	r24, r18
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	53 e0       	ldi	r21, 0x03	; 3
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	5a 95       	dec	r21
 150:	e1 f7       	brne	.-8      	; 0x14a <calcu+0xb6>
 152:	28 0f       	add	r18, r24
 154:	39 1f       	adc	r19, r25
 156:	cc cf       	rjmp	.-104    	; 0xf0 <calcu+0x5c>
}
}
 158:	28 96       	adiw	r28, 0x08	; 8
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	df 90       	pop	r13
 172:	cf 90       	pop	r12
 174:	bf 90       	pop	r11
 176:	af 90       	pop	r10
 178:	9f 90       	pop	r9
 17a:	8f 90       	pop	r8
 17c:	7f 90       	pop	r7
 17e:	08 95       	ret

00000180 <main>:


int main(){

DDRC = DDRC | 0b11111111;
 180:	84 b3       	in	r24, 0x14	; 20
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	84 bb       	out	0x14, r24	; 20
DDRD = DDRD | 0b00001111;
 186:	81 b3       	in	r24, 0x11	; 17
 188:	8f 60       	ori	r24, 0x0F	; 15
 18a:	81 bb       	out	0x11, r24	; 17
while(1){

calcu(823);
 18c:	87 e3       	ldi	r24, 0x37	; 55
 18e:	93 e0       	ldi	r25, 0x03	; 3
 190:	0e 94 4a 00 	call	0x94	; 0x94 <calcu>
 194:	fb cf       	rjmp	.-10     	; 0x18c <main+0xc>

00000196 <__divmodhi4>:
 196:	97 fb       	bst	r25, 7
 198:	09 2e       	mov	r0, r25
 19a:	07 26       	eor	r0, r23
 19c:	0a d0       	rcall	.+20     	; 0x1b2 <__divmodhi4_neg1>
 19e:	77 fd       	sbrc	r23, 7
 1a0:	04 d0       	rcall	.+8      	; 0x1aa <__divmodhi4_neg2>
 1a2:	0c d0       	rcall	.+24     	; 0x1bc <__udivmodhi4>
 1a4:	06 d0       	rcall	.+12     	; 0x1b2 <__divmodhi4_neg1>
 1a6:	00 20       	and	r0, r0
 1a8:	1a f4       	brpl	.+6      	; 0x1b0 <__divmodhi4_exit>

000001aa <__divmodhi4_neg2>:
 1aa:	70 95       	com	r23
 1ac:	61 95       	neg	r22
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255

000001b0 <__divmodhi4_exit>:
 1b0:	08 95       	ret

000001b2 <__divmodhi4_neg1>:
 1b2:	f6 f7       	brtc	.-4      	; 0x1b0 <__divmodhi4_exit>
 1b4:	90 95       	com	r25
 1b6:	81 95       	neg	r24
 1b8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ba:	08 95       	ret

000001bc <__udivmodhi4>:
 1bc:	aa 1b       	sub	r26, r26
 1be:	bb 1b       	sub	r27, r27
 1c0:	51 e1       	ldi	r21, 0x11	; 17
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <__udivmodhi4_ep>

000001c4 <__udivmodhi4_loop>:
 1c4:	aa 1f       	adc	r26, r26
 1c6:	bb 1f       	adc	r27, r27
 1c8:	a6 17       	cp	r26, r22
 1ca:	b7 07       	cpc	r27, r23
 1cc:	10 f0       	brcs	.+4      	; 0x1d2 <__udivmodhi4_ep>
 1ce:	a6 1b       	sub	r26, r22
 1d0:	b7 0b       	sbc	r27, r23

000001d2 <__udivmodhi4_ep>:
 1d2:	88 1f       	adc	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	5a 95       	dec	r21
 1d8:	a9 f7       	brne	.-22     	; 0x1c4 <__udivmodhi4_loop>
 1da:	80 95       	com	r24
 1dc:	90 95       	com	r25
 1de:	bc 01       	movw	r22, r24
 1e0:	cd 01       	movw	r24, r26
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
